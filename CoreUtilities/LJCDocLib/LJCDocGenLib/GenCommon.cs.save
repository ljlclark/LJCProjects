using System.IO;
using System.Text;
using LJC.DocObjLib;

namespace LJC.DocGenLib
{
	// Copyright (c) Lester J. Clark 2017-2019 - All Rights Reserved
	// The static common DocGen methods.
	/// <include path='items/GenCommon/*' file='Doc/GenCommon.xml'/>
	public class GenCommon
	{
		#region Methods

		// Retrieves the Syntax remark paragraph if it exists.
		/// <include path='items/Syntax1/*' file='Doc/GenCommon.xml'/>
		public static string Syntax(DataRemark remark)
		{
			string retValue = "";

			string text = DataCommon.GetSyntax(remark, out bool hasSyntax);
			retValue = Syntax(text);
			return retValue;
		}

		// Creates the Syntax XML string from the supplied text.
		/// <include path='items/Syntax2/*' file='Doc/GenCommon.xml'/>
		public static string Syntax(string text)
		{
			string retValue = "";

			if (text != null)
			{
				StringBuilder builder = new StringBuilder(64);
				builder.AppendLine("		<br />");
				builder.AppendLine("		<div class='Text'>Syntax</div>");
				builder.AppendLine("		<br />");
				builder.AppendLine("		<div class='SectionContainer'>");
				builder.AppendLine("			<table class='CodeTable'>");
				builder.AppendLine("				<colgroup><col width = '100%'></colgroup>");
				builder.AppendLine("				<tbody>");
				builder.AppendLine("					<tr><th class='CodeTable'>C#</th></tr>");
				builder.AppendLine("					<tr class='CodeTable'>");
				builder.AppendLine("						<td class='CodeTable'>");
				text = text.Replace("<", "&lt;");
				text = text.Replace(">", "&gt;");
				builder.AppendLine(text);
				builder.AppendLine("						</td>");
				builder.AppendLine("					</tr>");
				builder.AppendLine("				</tbody>");
				builder.AppendLine("			</table>");
				builder.AppendLine("		</div>");
				retValue = builder.ToString();
			}
			return retValue;
		}

		// Retrieves the Summary text if it exists.
		/// <include path='items/Summary/*' file='Doc/GenCommon.xml'/>
		public static string Summary(string location, string summary)
		{
			string text;
			string retValue = "";

			if (false == string.IsNullOrWhiteSpace(summary))
			{
				StringBuilder builder = new StringBuilder(64);
				builder.AppendFormat("		<br />\r\n");
				// ToDo: Implement Missing Summary in template? 
				if (string.IsNullOrWhiteSpace(summary))
				{
					text = string.Format("{0} - Missing Summary\r\n", location);
					File.AppendAllText("Missing.txt", text);
					builder.AppendFormat("		<div class='Text' style='color:red'>Missing Summary</div>\r\n");
				}
				else
				{
					builder.AppendFormat("		<div class='Text'>{0}</div>\r\n", summary);
				}
				retValue = builder.ToString();
			}
			return retValue;
		}

		// Retrieves the Returns text if it exists.
		/// <include path='items/Returns/*' file='Doc/GenCommon.xml'/>
		public static string Returns(string location, string returns)
		{
			string text;
			string retValue = "";

			if (false == string.IsNullOrWhiteSpace(returns))
			{
				StringBuilder builder = new StringBuilder(64);
				builder.AppendFormat("		<br />\r\n");
				builder.AppendFormat("		<div class='Text'>Returns</div>\r\n");
				// ToDo: Implement Missing Summary in template? 
				if (string.IsNullOrWhiteSpace(returns))
				{
					text = string.Format("{0} - Missing Returns\r\n", location);
					File.AppendAllText("Missing.txt", text);
					builder.AppendFormat("		<div class='Text' style='color:red'>Missing Returns</div>\r\n");
				}
				else
				{
					builder.AppendFormat("		<div class='Text'>{0}</div>\r\n", returns);
				}
				retValue = builder.ToString();
			}
			return retValue;
		}

		// Retrieves the remarks text if it exists.
		/// <include path='items/Remarks/*' file='Doc/GenCommon.xml'/>
		public static string Remarks(string location, DataRemark remark)
		{
			string text;
			string retValue = "";

			StringBuilder builder = new StringBuilder(64);
			if (remark != null
				&& (false == string.IsNullOrWhiteSpace(remark.Text)
				|| (remark.Paras != null && remark.Paras.Count > 0)))
			{
				bool first = true;
				if (false == string.IsNullOrWhiteSpace(remark.Text))
				{
					if (false == remark.Text.Contains("--"))
					{
						if (first)
						{
							builder.AppendFormat("		<br />\r\n");
							builder.AppendFormat("		<div class='Text'>Remarks</div>\r\n");
							first = false;
						}
						builder.AppendFormat("    <br />\r\n");
						// ToDo: Implement Missing Remarks in template? 
						if (null == remark
							|| string.IsNullOrWhiteSpace(remark.Text))
						{
							text = string.Format("{0} - Missing Remarks\r\n", location);
							File.AppendAllText("Missing.txt", text);
							builder.AppendFormat("		<div class='Text' style='color:red'>Missing Remarks</div>\r\n");
						}
						else
						{
							builder.AppendFormat("		<div class='Text'>{0}</div>\r\n", remark.Text);
						}
					}
				}
				if (remark.Paras != null && remark.Paras.Count > 0)
				{
					foreach (DataPara docPara in remark.Paras)
					{
						if (docPara.Text != null && docPara.Text.Contains("--"))
						{
							break;
						}
						if (docPara.Text != null && false == docPara.Text.Trim().StartsWith("Syntax:"))
						{
							if (first)
							{
								builder.AppendFormat("		<br />\r\n");
								builder.AppendFormat("		<div class='Text'>Remarks</div>\r\n");
								first = false;
							}
							builder.AppendFormat("    <br />\r\n");
							if (string.IsNullOrWhiteSpace(docPara.Text))
							{
								// ToDo: Implement Missing Paragraph in template? 
								builder.AppendFormat("		<div class='Text' style='color:red'>Missing Paragraph</div>\r\n");
							}
							else
							{
								builder.AppendFormat("		<div class='Text'>{0}</div>\r\n", docPara.Text);
							}
						}
					}
				}
				retValue = builder.ToString();
			}
			return retValue;
		}

		// Retrieves the Example section if it exists.
		/// <include path='items/Example/*' file='Doc/GenCommon.xml'/>
		public static string Example(DataExample example)
		{
			string retValue = "";

			StringBuilder builder = new StringBuilder(64);
			if (example != null
				&& (false == string.IsNullOrWhiteSpace(example.Code)
				|| example.Paras != null && example.Paras.Count > 0))
			{
				builder.AppendFormat("		<br />\r\n");
				builder.AppendFormat("		<div class='Text'>Example</div>\r\n");
				if (example.Paras != null && example.Paras.Count > 0)
				{
					foreach (DataPara docPara in example.Paras)
					{
						builder.AppendFormat("		<br />\r\n");
						if (string.IsNullOrWhiteSpace(docPara.Text))
						{
							builder.AppendFormat("		<div class='Text' style='color:red'>Missing Paragraph</div>\r\n");
						}
						else
						{
							builder.AppendFormat("		<div class='Text'>{0}</div>\r\n", docPara.Text);
						}
					}
				}
				if (example.Code != null
					&& false == string.IsNullOrWhiteSpace(example.Code))
				{
					string code = example.Code.Replace("{", "{{");
					code = code.Replace("}", "}}");
					builder.AppendLine("		<br />");
					builder.AppendLine("		<div class='SectionContainer'>");
					builder.AppendLine("			<table class='CodeTable'>");
					builder.AppendLine("				<colgroup><col width = '100%'></colgroup>");
					builder.AppendLine("				<tbody>");
					builder.AppendLine("					<tr class='CodeTable'><th class='CodeTable'>C#</th></tr>");
					builder.AppendLine("					<tr class='CodeTable'>");
					builder.AppendLine("						<td class='CodeTable'>");
					builder.AppendLine("							<pre style = 'margin-left: 2px;'>");

					code = code.Replace("<", "&lt;");
					code = code.Replace(">", "&gt;");
					int leadingSpaces = 12;
					string[] lines = code.Split('\n');
					for (int index = 0; index < lines.Length - 1; index++)
					{
						string line = lines[index];
						if (line.Length > leadingSpaces)
						{
							builder.AppendLine(line.Substring(leadingSpaces));
						}
						else
						{
							builder.AppendLine(line);
						}
					}

					builder.AppendLine("							</pre>");
					builder.AppendLine("						</td>");
					builder.AppendLine("					</tr>");
					builder.AppendLine("				</tbody>");
					builder.AppendLine("			</table>");
					builder.AppendLine("		</div>");
				}
				retValue = builder.ToString();
			}
			return retValue;
		}
		#endregion
	}
}
