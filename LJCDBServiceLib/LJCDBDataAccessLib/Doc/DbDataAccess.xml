<?xml version="1.0" encoding="utf-8" ?>
<!-- Copyright (c) Lester J. Clark 2017-2019 - All Rights Reserved -->
<items>
  <DbDataAccess>
    <summary>
      Implements a Message Based data access class.
      (DE)
    </summary>
    <remarks>
      <para>
        The Message Data Access class contains methods for performing common
        database functions using
        &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
        request objects and returning
        &lt;span class="userType"&gt;DbResult&lt;/span&gt;
        objects.
      </para>
      <para>
        The single public method is
        &lt;span class="commonType"&gt;Execute()&lt;/span&gt;.
        The &lt;span class="commonType"&gt;Execute()&lt;/span&gt;
        method calls the supporting private data methods based on the
        &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
        query request type. It returns the
        &lt;span class="userType"&gt;DbResult&lt;/span&gt;
        object created in the private data methods.
      </para>
      <para>
        The &lt;span class="userType"&gt;DbResult&lt;/span&gt;
        object is created from the
        &lt;span class="userType"&gt;DataTable&lt;/span&gt;
        using the
        &lt;span class="userType"&gt;ResultCommon&lt;/span&gt;
        static
        &lt;span class="commonType"&gt;GetResultColumns()&lt;/span&gt; and
        &lt;span class="commonType"&gt;GetResultRecords()&lt;/span&gt;
        functions.
      </para>
      <para>
        The private data methods create a SQL statement based on the data from
        the &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
        object. The SQL statement is executed and the SQL result is
        transformed into a
        &lt;span class="userType"&gt;DbResult&lt;/span&gt;
        object.
      </para>
      <para>
        The test code is found in project LJCDBServiceLib\TestDbDataAccess.
      </para>
    </remarks>
    <example>
      <para>
        The following example shows how to directly use the
        &lt;span class="userType"&gt;DbDataAccess&lt;/span&gt;
        object for database access.
        Applications should generally encapsulate much of this code in a table
        specific Manager class to make application programming easier and cleaner.
      </para>
      <para>
        A Manager class is the client code that creates a table specific
        &lt;span class="userType"&gt;DbRequest&lt;/span&gt; object.
        It passes the
        &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
        object to the
        &lt;span class="userType"&gt;DbDataAccess.Execute()&lt;/span&gt;
        method.
      </para>
      <para>
        A common Manager class
        &lt;span class="userType"&gt;LJCDbClientLib.DataManager&lt;/span&gt;
        is available to simplify interacting with the data access
        objects.&lt;br /&gt;
        It can directly call
        &lt;span class="userType"&gt;DbDataAccess&lt;/span&gt; or
        &lt;span class="userType"&gt;LJCDBServiceLib.DbService&lt;/span&gt; and
        returns data as
        &lt;span class="userType"&gt;DbResult&lt;/span&gt;
        objects.&lt;br /&gt;
        It can also access a remote
        &lt;span class="userType"&gt;DbService&lt;/span&gt;
        object using a Service Host and a client proxy. The
        &lt;span class="userType"&gt;LJCDBServiceHost.DBWindowsService&lt;/span&gt;
        is a host that is provided to run as a windows service.
      </para>
      <para>
        The test code is found in project LJCDBServiceLib\TestDbDataAccess.
      </para>
      <code>
        IF NOT EXISTS(SELECT* FROM INFORMATION_SCHEMA.TABLES
          WHERE TABLE_NAME = N'PersonTest')
        BEGIN
        CREATE TABLE[dbo].[PersonTest]
        (
          [Id][int] IDENTITY(1,1) NOT NULL,
          [Name] [nvarchar] (60) NULL,
          [PrincipleFlag] [bit] NOT NULL,
          CONSTRAINT[PK_PersonTest]
          PRIMARY KEY CLUSTERED(
            [Id] ASC),
          )
        END
        GO

        using System;
        using System.Collections.Generic;
        using System.Data.Common;
        using LJCNet.Common;
        using LJCDBMessage;
        using LJCDBDataAccessLib;

        // A Person Data Record class.
        public class Person
        {
          public Int32 ID { get; set; }
          public string Name { get; set; }
          public bool PrincipleFlag { get; set; }
        }
        public class Persons : List&lt;Person&gt; { }

        // Test DbDataAccess
        private static void TestDbDataAccess()
        {
          DbConnectionStringBuilder connectionBuilder;
          DbDataAccess dbDataAccess;

          string databaseName = "DatabaseName";
          connectionBuilder = new DbConnectionStringBuilder()
          {
            { "Data Source", "DataServiceName" },
            { "Initial Catalog", databaseName },
            { "Integrated Security", "True" }
          };
          string connectionString = connectionBuilder.ConnectionString;
          string providerName = "System.Data.SqlClient";
          dbDataAccess = new DbDataAccess(connectionString, providerName
            , databaseName);

          // Get the table data definition.
          DbColumns dataDefinition = SchemaOnly(dbDataAccess);
          DbColumn dbColumn = dataDefinition.LJCSearchByName("Id");
          dbColumn.PropertyName = "ID";

          Add(dbDataAccess, dataDefinition);
          Person person = Retrieve(dbDataAccess, dataDefinition);
          Persons persons = Load(dbDataAccess, dataDefinition);
          Update(dbDataAccess, dataDefinition);
          persons = Load(dbDataAccess, dataDefinition);
          Delete(dbDataAccess, dataDefinition);
          persons = Load(dbDataAccess, dataDefinition);

          Add(dbDataAccess, dataDefinition);
          person = RetrieveClientSql(dbDataAccess, dataDefinition);
          persons = LoadClientSql(dbDataAccess, dataDefinition);
          ExecuteClientSql(dbDataAccess, dataDefinition);
          persons = LoadClientSql(dbDataAccess, dataDefinition);
          Delete(dbDataAccess, dataDefinition);
          persons = LoadClientSql(dbDataAccess, dataDefinition);
        }

        // Create the Data Definition from the table schema.
        private static DbColumns SchemaOnly(DbDataAccess dbDataAccess)
        {
          DbColumns retValue = null;

          DbRequest dbRequest = new DbRequest()
          {
            QueryType = QueryType.SchemaOnly.ToString(),
            TableName = "PersonTest"
          };
          DbResult dbResult = dbDataAccess.Execute(dbRequest);
          retValue = dbResult.DbRecordColumns;
          return retValue;
        }
      </code>
    </example>
  </DbDataAccess>  
  <DbDataAccessC>
    <summary>
      Initializes an object instance with the supplied values.
    </summary>
    <param name="connectionString">The Connection string.</param>
    <param name="providerName">The Provider name.</param>
    <param name="databaseName">The Database name.</param>
  </DbDataAccessC>
  <!-- Public Methods -->
  <Execute>
    <summary>
      Executes the specified DbRequest definition.
    </summary>
    <param name="dbRequest">
      The &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
      object.
    </param>
    <returns>
      The &lt;span class="userType"&gt;DbResult&lt;/span&gt;
      object.</returns>
  </Execute>
  <!-- Private Data Methods -->
  <Add>
    <summary>
      Inserts a record with the specified columns.
      (E)
    </summary>
    <returns>The database result XML message.</returns>
    <remarks>
      <para>
        This method is called from the
        &lt;span class="commonType"&gt;Execute()&lt;/span&gt;
        method if the DbRequest.QueryType is "Insert".
      </para>
    </remarks>
    <example>
      <code>
        // Adds a Person record.
        private static void Add(DbDataAccess dbDataAccess
          , DbColumns dataDefinition)
        {
          // Create the list of included columns.
          // This list must not include the database assigned columns
          // or the database assigned columns must have the AutoIncrement
          // value set to "true".
          List&lt;string&gt; columnNames = new List&lt;string&gt;();
          foreach (DbColumn column in dataDefinition)
          {
            if (column.ColumnName != "Id")
            {
              columnNames.Add(column.ColumnName);
            }
          }

          // The inserted columns must not include the DB assigned columns.
          Person dataRecord = new Person()
          {
            Name = "TestName",
            PrincipleFlag = false
          };

          // Create a Data Columns object with the included data definitions
          // and values from the data record.
          var dataColumns = DbCommon.QueryDataColumns(dataRecord, columnList
            , dataDefinition);

          // This code is needed only if there are database assigned columns.
          DbColumns keyColumns = GetKeyColumns(dataRecord, dataDefinition);

          // Create query with columns containing values from the record.
          DbRequest dbRequest = new DbRequest()
          {
            Columns = dataColumns,
            KeyColumns = keyColumns
            QueryType = QueryType.Insert.ToString(),
            TableName = "PersonTest",
          };
          DbResult dbResult = dbDataAccess.Execute(dbRequest);

          if (dbResult != null)
          {
            string sqlStatement = dbResult.ExecutedSql;

            // This code is needed only if there are database assigned columns.
            if (dbResult.DbRecords != null &amp;&amp; dbResult.DbRecords.Count > 0)
            {
              SetAssignedValues(dataRecord, dbResult.DbRecords[0]);
            }
          }
        }

        // Gets the key columns if there are database assigned columns.
        private static DbColumns GetKeyColumns(Person person
          , DbColumns dataDefinition)
        {
          DbColumns retValue = null;

          // Create the list of database assigned and lookup column names.
          // This list must include the database assigned column definitions.
          List&lt;string&gt; lookupColumnNames = new List&lt;string&gt;()
          {
            "Id",
            "Name"
          };

          // Create a Lookup Keys object with the lookup data definitions
          // and values from the data record.
          // This is the unique key to find the inserted record for obtaining
          // the database assigned values.
          retValue = DbCommon.QueryDataKeys(person, dataDefinintion
            , lookupColumnNames);

          // Create the list of database assigned columns and updates
          // the key columns.
          List&lt;string&gt; dbAssignedColumnNames = new List&lt;string&gt;()
          {
            "Id"
          };
          DbCommon.SetDatabaseAssignedKeys(retValue, dbAssignedColumnNames);
          return retValue;
        }

        // Set the database assigned values.
        private static void SetAssignedValues(Person person, DbValues resultRecord)
        {
          Person addedPerson = new Person();
          DbCommon.SetObjectValues(resultRecord, addedPerson);
          person.ID = addedPerson.ID;
        }
      </code>
    </example>
  </Add>
  <Delete>
    <summary>
      Deletes a record.
      (E)
    </summary>
    <returns>The result XML message.</returns>
    <remarks>
      <para>
        This method is called from the
        &lt;span class="commonType"&gt;Execute()&lt;/span&gt;
        method if the DbRequest.QueryType is "Delete".
      </para>
    </remarks>
    <example>
      <code>
        // Deletes a record.
        private static void Delete(DbDataAccess dbDataAccess
          , DbColumns dataDefinition)
        {
          // Create Key Columns.
          var keyColumns = new DbColumns()
          {
            { "Name", (object)"TestNameUpdated" }
          };
          dataDefinition.LJCSetExcludeKeyValue("PrincipleFlag");

          var queryKeyColumns = DbCommon.QueryKeys(keyColumns, dataDefinition);
          DbRequest dbRequest = new DbRequest()
          {
            KeyColumns = queryKeyColumns
            QueryType = QueryType.Delete.ToString(),
            TableName = "PersonTest",
          };
          DbResult dbResult = dbDataAccess.Execute(dbRequest);

          if (dbResult != null)
          {
            string sqlStatement = dbResult.ExecutedSql;
          }
        }
      </code>
    </example>
  </Delete>
  <ExecuteClientSql>
    <summary>
      Executes a "Non-Query" client SQL statement.
      (E)
    </summary>
    <returns>The result XML message.</returns>
    <remarks>
      <para>
        This method is called from the
        &lt;span class="userType"&gt;Execute()&lt;/span&gt;
        method if the DbRequest.QueryType is "ExecuteSql".
      </para>
    </remarks>
    <example>
      <code>
        // Execute a non-query SQL statement.
        private static void ExecuteClientSql(DbDataAccess dbDataAccess
          , DbColumns dataDefinition)
        {
          StringBuilder builder = new StringBuilder(64);
          builder.AppendLine("update PersonTest");
          builder.AppendLine("set Name = 'TestNameUpdated'");
          builder.AppendLine("where Name = 'TestName'");
          string sql = builder.ToString();

          DbRequest dbRequest = new DbRequest()
          {
            ClientSql = sql
            QueryType = QueryType.ExecuteSql.ToString()",
            TableName = "PersonTest",
          };
          DbResult dbResult = dbDataAccess.Execute(dbRequest);
          
          if (dbResult != null)
          {
            string sqlStatement = dbResult.ExecutedSql;
            int affectedCount = dbResult.AffectedRecords;
          }
        }
      </code>
    </example>
  </ExecuteClientSql>
  <LoadClientSql>
    <summary>
      Executes a "Load" client SQL statement.
      (E)
    </summary>
    <returns>The result XML message.</returns>
    <remarks>
      <para>
        This method is called from the
        &lt;span class="commonType"&gt;Execute()&lt;/span&gt;
        method if the DbRequest.QueryType is "LoadSql".
      </para>
    </remarks>
    <example>
      <code>
        // Selects multiple records with an SQL statement.
        private static Persons LoadClientSql(DbDataAccess dbDataAccess
          , DbColumns dataDefinition)
        {
          Person retValue = null;

          StringBuilder builder = new StringBuilder(64);
          builder.AppendLine("select * from PersonTest");
          string sql = builder.ToString();

          DbColumns dataColumns = null;
          bool isColumnModifications = true;
          if (isColumnModifications)
          {
            // Create the list of included columns.
            // This list should include the database assigned columns.
            List&lt;string&gt; columnNames = new List&lt;string&gt;();
            foreach (DbColumn column in dataDefinition)
            {
              columnNames.Add(column.ColumnName);
            }

            // Create a Data Columns object with the included data definitions
            // and values from the data record.
            dataColumns = DbCommon.QueryColumns(columnNames, dataDefinition);
          }
          
          DbRequest dbRequest = new DbRequest()
          {
            ClientSql = sql
            Columns = dataColumns,
            QueryType = QueryType.LoadSQL.ToString(),
            TableName = "PersonTest",
          };
          DbResult dbResult = dbDataAccess.Execute(dbRequest);
          
          if (dbResult != null)
          {
            string sqlStatement = dbResult.ExecutedSql;
            if (dbResult.DbRecords != null &amp;&amp; dbResult.DbRecords.Count > 0)
            {
              retValue = new Persons();
              foreach (DbValues dbValues in dbResult.DbRecords)
              {
                Person person = new Person();
                DbCommon.SetObjectValues(dbValues, retValue);
                retValue.Add(person);
              }  
            }
            return retValue;
          }
        }
      </code>
    </example>
  </LoadClientSql>
  <Load>
    <summary>
      Retrieves multiple data rows.
      (E)
    </summary>
    <returns>The result XML message.</returns>
    <remarks>
      <para>
        This method is called from the
        &lt;span class="commonType"&gt;Execute()&lt;/span&gt;
        method if the DbRequest.QueryType is "Load".
      </para>
    </remarks>
    <example>
      <code>
        // Loads multiple Person objects.
        private static Persons Load(DbDataAccess dbDataAccess
          , DbColumns dataDefinition)
        {
          Person retValue = null;

          // Create the list of included columns.
          // This list should include the database assigned columns.
          List&lt;string&gt; columnNames = new List&lt;string&gt;();
          foreach (DbColumn column in dataDefinition)
          {
            columnNames.Add(column.ColumnName);
          }

          // Create a Data Columns object with the included data definitions
          // and values from the data record.
          var dataColumns = DbCommon.QueryColumns(columnNames, dataDefinition);

          // Create Key Columns.
          var keyColumns = new DbColumns()
          {
            { "Name", (object)"TestName" }
          };
          dataDefinition.LJCSetExcludeKeyValue("PrincipleFlag");
 
          var queryKeyColumns = DbCommon.QueryKeys(keyColumns, dataDefinition);

          // Create a query with the retrieve columns.
          // The retrieved columns should include the DB assigned columns.
          DbRequest dbRequest = new DbRequest()
          {
            Columns = dataColumns
            //KeyColumns = queryKeyColumns
            QueryType = QueryType.Load.ToString(),
            TableName = "PersonTest",
          };
          DbResult dbResult = dbDataAccess.Execute(dbRequest);

          if (dbResult != null)
          {
            string sqlStatement = dbResult.ExecutedSql;
            if (dbResult.DbRecords != null &amp;&amp; dbResult.DbRecords.Count > 0)
            {
              retValue = new Persons();
              foreach (DbValues dbValues in dbResult.DbRecords)
              {
                Person person = new Person();
                DbCommon.SetObjectValues(dbValues, retValue);
                retValue.Add(person);
              }
            }
          }
          return retValue;
        }
      </code>
    </example>
  </Load>
  <Retrieve>
    <summary>
      Retrieves the data row values.
      (E)
    </summary>
    <param name="dbRequest">The request object.</param>
    <returns>The result XML message.</returns>
    <remarks>
      <para>
        This method is called from the
        &lt;span class="commonType"&gt;Execute()&lt;/span&gt;
        method if the DbRequest.RequestType is "Select".
      </para>
    </remarks>
    <example>
      <code>
        // Retrieves a Person object.
        private static Person Retrieve(DbDataAccess dbDataAccess
          , DbColumns dataDefinition)
        {
          Person retValue = null;

          // Create the list of included columns.
          // This list should include the database assigned columns.
          List&lt;string&gt; columnList = new List&lt;string&gt;();
          foreach (DbColumn column in dataDefinition)
          {
            columnList.Add(column.ColumnName);
          }

          // Create a Data Columns object with the included data definitions
          // and values from the data record.
          var dataColumns = DbCommon.QueryColumns(columnList, dataDefinition);

          // Create Key Columns.
          var keyColumns = new DbColumns()
          {
            { "Name", (object)"TestName" }
          };
          dataDefinition.LJCSetExcludeKeyValue("PrincipleFlag");

          var queryKeyColumns = DbCommon.QueryKeys(keyColumns, dataDefinition);

          // Create a query with the retrieve columns.
          // The retrieved columns should include the DB assigned columns.
          DbRequest dbRequest = new DbRequest()
          {
            Columns = dataColumns,
            KeyColumns = queryKeyColumns
            QueryType = QueryType.Select.ToString(),
            TableName = "PersonTest",
          };
          DbResult dbResult = dbDataAccess.Execute(dbRequest);

          if (dbResult != null)
          {
            string sqlStatement = dbResult.ExecutedSql;
            if (dbResult.DbRecords != null &amp;&amp; dbResult.DbRecords.Count > 0)
            {
              retValue = new Person();
              DbCommon.SetObjectValues(dbResult.DbRecords[0], retValue);
            }
          }
          return retValue;
        }
      </code>
    </example>
  </Retrieve>
  <RetrieveClientSql>
    <summary>
      Executes a "Retrieve" client SQL statement.
      (E)
    </summary>
    <returns>The result XML message.</returns>
    <remarks>
      <para>
        This method is called from the
        &lt;span class="userType"&gt;Execute()&lt;/span&gt;
        method if the DbRequest.QueryType is "RetrieveSql".
      </para>
    </remarks>
    <example>
      <code>
        // Selects a record with an SQL statement.
        private static Person RetrieveClientSql(DbDataAccess dbDataAccess
          , DbColumns dataDefinition)
        {
          Person retValue = null;

          StringBuilder builder = new StringBuilder(64);
          builder.AppendLine("select * from PersonTest");
          builder.AppendLine("where Name = 'TestName'");
          string sql = builder.ToString();

          DbColumns dataColumns = null;
          bool isColumnModifications = true;
          if (isColumnModifications)
          {
            // Create the list of included columns.
            // This list should include the database assigned columns.
            List&lt;string&gt; columnNames = new List&lt;string&gt;();
            foreach (DbColumn column in dataDefinition)
            {
              columnNames.Add(column.ColumnName);
            }

            // Create a Data Columns object with the included data definitions
            // and values from the data record.
            dataColumns = DbCommon.QueryColumns(columnNames, dataDefinition);
          }
          
          DbRequest dbRequest = new DbRequest()
          {
            ClientSql = sql
            Columns = dataColumns,
            QueryType = QueryType.RetrieveSQL.ToString(),
            TableName = "PersonTest",
          };
          DbResult dbResult = dbDataAccess.Execute(dbRequest);
          
          if (dbResult != null)
          {
            string sqlStatement = dbResult.ExecutedSql;
            if (dbResult.DbRecords != null &amp;&amp; dbResult.DbRecords.Count > 0)
            {
              retValue = new Person();
              DbCommon.SetObjectValues(dbResult.DbRecords[0], retValue);
            }
          }
          return retValue;
        }
      </code>
    </example>
  </RetrieveClientSql>
  <SelectProcedure>
    <summary>
      Retrieves the data row values from a Stored Procedure.
    </summary>
    <param name="dbRequest">The request object.</param>
    <returns>The result XML message.</returns>
    <remarks>
      <para>
        This method is called from the
        &lt;span class="userType"&gt;Execute()&lt;/span&gt;
        method if the DbRequest.QueryType is "SelectProcedure".
      </para>
    </remarks>
  </SelectProcedure>
  <TableNames>
    <summary>
      Retrieves the table names for the specified database.
    </summary>
    <param name="databaseName">The Database name.</param>
    <param name="dbRequest">The request object.</param>
    <returns>The result XML message.</returns>
  </TableNames>
  <Update>
    <summary>
      Updates a database record.
      (E)
    </summary>
    <returns>The result XML message.</returns>
    <remarks>
      <para>
        This method is called from the
        &lt;span class="commonType"&gt;Execute()&lt;/span&gt;
        method if the DbRequest.QueryType is "Update".
        (E)
      </para>
    </remarks>
    <example>
      <code>
        // Updates a record.
        private static void Update(DbDataAccess dbDataAccess
          , DbColumns dataDefinition)
        {
          // Create the list of included columns.
          // This list must not include the database assigned columns
          // or the database assigned columns must have the AutoIncrement
          // value set to "true".
          List&lt;string&gt; columnNames = new List&lt;string&gt;();
          foreach (DbColumn column in dataDefinition)
          {
            if (column.ColumnName != "Id")
            {
              columnNames.Add(column.ColumnName);
            }
          }

          Person dataRecord = new Person()
          {
            Name = "TestNameUpdated"
          };

          // Create a Data Columns object with the included data definitions
          // and values from the data record.
          var dataColumns = DbCommon.QueryDataColumns(dataRecord
            , dataDefinition, columnNames);

          // Create Key Columns.
          var keyColumns = new DbColumns()
          {
            { "Name}, (object)"TestName" }
          };
          dataDefinition.LJCSetExcludeKeyValue("PrincipleFlag");

          var queryKeyColumns = DbCommon.QueryKeys(keyColumns, dataDefinition);

          // Create query with columns containing values from the record.
          // The updated columns must not include the Db assigned columns.
          DbRequest dbRequest = new DbRequest()
          {
            Columns = dataColumns,
            KeyColumns = queryKeyColumns
            QueryType = QueryType.Update.ToString(),
            TableName = "PersonTest",
          };
          DbResult dbResult = dbDataAccess.Execute(dbRequest);

          if (dbResult != null)
          {
            string sqlStatement = dbResult.ExecutedSql;
            int affectedCount = dbResult.AffectedRecords;
          }
          return retValue;
        }
      </code>
    </example>
  </Update>
  <!-- DataConfig Methods -->
  <GetConfigValues>
    <summary>
      Sets the DataConfig values.
    </summary>
    <param name="dataConfigName">The DataConfig name.</param>
  </GetConfigValues>
  <!-- Private Methods -->
  <CreateResult>
    <summary>
      Creates the result object with common values.
    </summary>
    <param name="dbRequest">The request object.</param>
    <returns>
      The &lt;span class="userType"&gt;DbResult&lt;/span&gt;
      object.
    </returns>
  </CreateResult>
</items>
