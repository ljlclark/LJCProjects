<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LJCGridDataLib</name>
    </assembly>
    <members>
        <member name="T:LJCGridDataLib.ResultGridData">
            <summary>
      Provides DbResult helpers for an LJCDataGrid control.
    </summary><remarks>
      <para>
        A List Form contains one or more List Grids for displaying a list of
        items.&lt;br /&gt;
        When the data formats are known in advance, the List Form can contain data
        methods that use strongly typed Data Objects.&lt;br /&gt;
        Each List Grid is coded to have Row Data Methods to display and modify the
        items in the grid.&lt;br /&gt;
        These methods are DataRetrieve(), LoadRows(), RowAdd(), RowUpdate(),
        SetStoredValues() and RowSelect().&lt;br /&gt;
        The methods may be postfixed with a value that identifies the
        grid to which it applies. E.G. DataRetrieveAddress(), RowAddAddress(),
        etc.&lt;br /&gt;
        This is especially true if the form contains more than one grid.
      </para>
      <para>
        The ResultGrid class is designed to allow for display of data items when
        the data formats are not known in advance.&lt;br /&gt;
        It provides methods for displaying data directly from the DbResult values.
      </para>
      <para>
        &lt;b&gt;The Result Grid Configuration Methods&lt;/b&gt;&lt;br /&gt;
        This class has methods for the contained grid configuration.&lt;br /&gt;
        These methods are SetDisplayColumns() with 3 overrides and
        RemoveDisplayColumn().&lt;br /&gt;
      </para>
      <para>
        &lt;b&gt;The Result Row Data Methods&lt;/b&gt;&lt;br /&gt;
        There are methods for managing rows and row data using DbColumn values.
        &lt;br /&gt;
        These methods are LoadRows() with 2 overrides, RowAdd(), RowUpdate() and
        RowSetValues().&lt;br /&gt;
      </para>
      <para>
        The TableGrid class is designed to allow for display of data items when
        the data formats are not known in advance.&lt;br /&gt;
        It provides methods for displaying data directly from DataTable values.
        &lt;br /&gt; It has many of the same Configuration and Row Data methods
        as the ResultGrid class except they take DataTable objects instead of
        DbResult objects.
      </para>
      <para>-- Project Level Remarks</para>
      <para>
        Provides DbResult helpers for an LJCDataGrid control.
      </para>
    </remarks><example>
      <para>
        This is main function sample code for testing. The code for the additional
        test functions is listed under the methods with the same names.
      </para>
      <code>
        using LJCDataAccessConfig;
        using LJCDBClientLib;
        using LJCDBDataAccess;

        // Test DataGrid.
        private void TestDataGrid()
        {
          string connectionString;
          string providerName;

          // Create Data Configuration values.
          var databaseName = "DatabaseName";
          var tableName = "TableName";
      
          bool useInternal = false;
          if (useInternal)
          {
            // Use internal configuration.
            DbConnectionStringBuilder connectionBuilder;
            string databaseName = "DatabaseName";
            connectionBuilder = new DbConnectionStringBuilder()
            {
              { "Data Source", "DataServiceName" },
              { "Initial Catalog", databaseName },
              { "Integrated Security", "True" }
            };
            connectionString = connectionBuilder.ConnectionString;
            providerName = "System.Data.SqlClient";
          }
          else
          {
            // Or use external configuration.
            DataConfigs dataConfigs = new DataConfigs();
            dataConfigs.LJCLoadData();
            dataConfig = dataConfigs.LJCGetByName("ConfigName");
            connectionString = dataConfig.GetConnectionString();
            providerName = dataConfig.GetProviderName();
          }

          // Create DataManager.
          var dbServiceRef = new DbServiceRef()
          {
            DbDataAccess = new DbDataAccess(databaseName
              , connectionString, providerName)
          };
          var dataManager = new DataManager(dbServiceRef, null, tableName);

          // Method Tests.
          SetDisplayColumns(dataManager);
          SetDisplayColumns1(dataManager);
          SetDisplayColumns2();
          LoadRows(dataManager);
          LoadRows1(dataManager);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCGridDataLib.ResultGridData.#ctor(LJCWinFormControls.LJCDataGrid)">
            <summary>
      Initalizes an object instance.
    </summary><param name="grid">The Grid control.</param>
        </member>
        <member name="M:LJCGridDataLib.ResultGridData.SetDisplayColumns(LJCNetCommon.DbColumns,System.Collections.Generic.List{System.String})">
            <summary>
      Configure the Display Columns from the DbColumns definition.
    </summary><param name="dbColumns">The DbColumns.</param><param name="columnNames">The display column names.</param><example>
      <code>
        // See the DataManager setup code on the ResultGridData class page.

        using LJCDBClientLib;
        using LJCGridDataLib;

        // Configure the Display Columns from the DbColumns definition.
        private static void SetDisplayColumns1(DataManager dataManager)
        {
          DbColumns retValue = null;
          
          var dbResult = dataManager.Load();
          if (DbResult.HasData(dbResult))
          {
            // Create the Display columns.
            var resultGridData = new ResultGridData(LJCDataGridName);
            resultGridData.SetDisplayColumns(dbResult.Columns);
            retValue = resultGridData.DisplayColumns;
          }
          return retValue;
        }
      </code>
    </example>
        </member>
        <member name="M:LJCGridDataLib.ResultGridData.SetDisplayColumns(LJCDBMessage.DbRequest,System.Collections.Generic.List{System.String})">
            <summary>
      Configure the Display Columns from the DbRequest object definition.
    </summary><param name="dbRequest">The DbRequest object.</param><param name="columnNames">The included columns.</param><example>
      <code>
        // See the DataManager setup code on the ResultGridData class page.

        using LJCDBClientLib;
        using LJCGridDataLib;
        using LJCDBViewDAL;

        // Configure the Display Columns from the DbRequest object definition.
        private DbColumns SetDisplayColumns1(DataManager dataManager)
        {
          DbColumns retValue;
          
          // Get a View Request.
          var dbRequest = ViewHelper.GetViewRequest("TableName", "ViewDataName");

          // Or Create the Request.
          dbRequest = new DbRequest()
          {
            Columns = dataManager.DataDefinition,
            DataConfigName = dataManager.DataConfigName,
            RequestTypeName = RequestType.Load.ToString(),
            TableName = dataManager.TableName
          };

          // Create the Display columns.
          var resultGridData = new ResultGridData(LJCDataGridName);
          resultGridData.SetDisplayColumns(dbRequest);
          retValue = resultGridData.DisplayColumns;
          return retValue;
        }
      </code>
    </example>
        </member>
        <member name="M:LJCGridDataLib.ResultGridData.SetDisplayColumns(System.Object,System.Collections.Generic.List{System.String})">
            <summary>
      Configure the Display Columns from the Data object properties.
    </summary><param name="dataObject">The Data object.</param><param name="propertyNames">The included columns.</param><example>
      <code>
        // See the DataManager setup code on the ResultGridData class page.

        using LJCDBClientLib;
        using LJCGridDataLib;

        // Configure the Display Columns from the Data object properties.
        private DbColumns SetDisplayColumns2(DataManager dataManager)
        {
          DbColumns retValue;

          var dataObject = new ADataObject();

          // Create the Display columns.
          var resultGridData = new ResultGridData(LJCDataGridName);
          resultGridData.SetDisplayColumns(dataObject);
          retValue = resultGridData.DisplayColumns;
          return retValue;
        }
      </code>
    </example>
        </member>
        <member name="M:LJCGridDataLib.ResultGridData.RemoveDisplayColumn(System.String)">
            <summary>
      Removes a display column.
    </summary><param name="columnName">The column name.</param>
        </member>
        <member name="M:LJCGridDataLib.ResultGridData.LoadRows(LJCDBMessage.DbResult)">
            <summary>
      Loads the grid rows from the result Rows.
    </summary><param name="dbResult">The DbResult object.</param><example>
      <code>
        // See the DataManager setup code on the ResultGridData class page.

        // Loads the grid rows from the result Rows.
        private void LoadRows(DataManager dataManager)
        {
          var dbResult = dataManager.Load();
          if (DbResult.HasData(dbResult))
          {
            // Create the Display column definitions.
            var resultGridData = new ResultGridData(LJCDataGridName);
            resultGridData.SetDisplayColumns(dbResult.Columns);
            
            // Configure the grid columns.
            LJCDataGridName.Columns.Clear();
            LJCDataGridName.LJCAddDisplayColumns(resultGridData.DisplayColumns);

            // Load the grid rows.
            resultGridData.LoadRows(dbResult);
          }
        }
      </code>
    </example>
        </member>
        <member name="M:LJCGridDataLib.ResultGridData.LoadRows(LJCDBMessage.DbRows)">
            <summary>
      Loads the grid rows from the DbRows object.
    </summary><param name="dbRows">The DbRows object.</param><example>
      <code>
        // See the DataManager setup code on the ResultGridData class page.

        // Loads the grid rows from the DbRows object.
        private void LoadRows1(DataManager dataManager)
        {
          var dbResult = dataManager.Load();
          if (DbResult.HasData(dbResult))
          {
            // Create the Display column definitions.
            var resultGridData = new ResultGridData(LJCDataGridName);
            resultGridData.SetDisplayColumns(dbResult.Columns);
            
            // Configure the grid columns.
            LJCDataGridName.Columns.Clear();
            LJCDataGridName.LJCAddDisplayColumns(resultGridData.DisplayColumns);

            // Load the grid rows.
            resultGridData.LoadRows(dbResult.Rows);
          }
        }
      </code>
    </example>
        </member>
        <member name="M:LJCGridDataLib.ResultGridData.RowAdd(LJCNetCommon.DbValues)">
            <summary>
      Adds a grid row and updates it with the DbValues.
    </summary><param name="record">The DbValues object.</param><example>
      <code>
        // See the DataManager setup code on the ResultGridData class page.

        // Loads the grid rows from the DbRows object.
        private void RowAdd(DataManager dataManager)
        {
          var dbResult = dataManager.Load();
          if (DbResult.HasData(dbResult))
          {
            // Create the Display column definitions.
            var resultGridData = new ResultGridData(LJCDataGridName);
            resultGridData.SetDisplayColumns(dbResult.Columns);
            
            // Configure the grid columns.
            LJCDataGridName.Columns.Clear();
            LJCDataGridName.LJCAddDisplayColumns(resultGridData.DisplayColumns);

            // Load the grid rows individually.
            foreach (DbRow dbRow in dbResult.Rows)
            {
              resultGridData.RowAdd(dbRow.Values);
            }
          }
        }
      </code>
    </example>
        </member>
        <member name="M:LJCGridDataLib.ResultGridData.RowSetValues(LJCWinFormControls.LJCGridRow,LJCNetCommon.DbValues)">
            <summary>
      Updates a grid row with the DbValues.
    </summary><param name="gridRow">The grid row.</param><param name="record">The DbValues object.</param><example>
      <code>
        // See the DataManager setup code on the ResultGridData class page.

        // Loads the grid rows from the DbRows object.
        private void LoadRows1(DataManager dataManager)
        {
          var dbResult = dataManager.Load();
          if (DbResult.HasData(dbResult))
          {
            // Create the Display column definitions.
            var resultGridData = new ResultGridData(LJCDataGridName);
            resultGridData.SetDisplayColumns(dbResult.Columns);
            
            // Configure the grid columns.
            LJCDataGridName.Columns.Clear();
            LJCDataGridName.LJCAddDisplayColumns(resultGridData.DisplayColumns);

            // Create and load the grid rows individually.
            foreach (DbRow dbRow in dbResult.Rows)
            {
              var gridRow = LJCDataGridName.LJCRowAdd();
              resultGridData.RowSetValues(gridRow, dbRow.Values);
            }
          }
        }
      </code>
    </example>
        </member>
        <member name="M:LJCGridDataLib.ResultGridData.RowUpdate(LJCNetCommon.DbValues)">
            <summary>
      Updates the current row with the DbValues.
    </summary><param name="record">The DbValues object.</param>
        </member>
        <member name="M:LJCGridDataLib.ResultGridData.OnAddRow">
            <summary>
      Fires the AddRow event.
    </summary><remarks>
      <para>Syntax: protected void OnAddRow()</para>
    </remarks>
        </member>
        <member name="F:LJCGridDataLib.ResultGridData.Grid">
            <summary>Gets or sets the Grid control value.</summary>
        </member>
        <member name="P:LJCGridDataLib.ResultGridData.GridRow">
            <summary>Gets or sets the GridRow value.</summary>
        </member>
        <member name="P:LJCGridDataLib.ResultGridData.DataDefinition">
            <summary>Gets or sets the DataDefinition value.</summary>
        </member>
        <member name="P:LJCGridDataLib.ResultGridData.DataRecord">
            <summary>Gets or sets the DataRecord value.</summary>
        </member>
        <member name="P:LJCGridDataLib.ResultGridData.DisplayColumns">
            <summary>Gets or sets the Display Columns.</summary>
        </member>
        <member name="E:LJCGridDataLib.ResultGridData.AddRow">
            <summary>The AddRow event.</summary>
        </member>
        <member name="T:LJCGridDataLib.TableGridData">
            <summary>
      Provides DataTable helpers for an LJCDataGrid control.
    </summary><example>
      <para>
        This is main function sample code for testing. The code for the additional
        test functions is listed under the methods with the same names.
      </para>
      <code>
        using LJCDataAccessConfig;
        using LJCDBClientLib;
        using LJCDBDataAccess;

        // Test DataGrid.
        private void TestDataGrid()
        {
          string connectionString;
          string providerName;

          // Create Data Configuration values.
          var databaseName = "DatabaseName";
      
          bool useInternal = false;
          if (useInternal)
          {
            // Use internal configuration.
            DbConnectionStringBuilder connectionBuilder;
            string databaseName = "DatabaseName";
            connectionBuilder = new DbConnectionStringBuilder()
            {
              { "Data Source", "DataServiceName" },
              { "Initial Catalog", databaseName },
              { "Integrated Security", "True" }
            };
            connectionString = connectionBuilder.ConnectionString;
            providerName = "System.Data.SqlClient";
          }
          else
          {
            // Or use external configuration.
            DataConfigs dataConfigs = new DataConfigs();
            dataConfigs.LJCLoadData();
            dataConfig = dataConfigs.LJCGetByName("ConfigName");
            connectionString = dataConfig.GetConnectionString();
            providerName = dataConfig.GetProviderName();
          }

          // Create DataAccess.
          retValue = new DataAccess()
          {
            ConnectionString = connectionString,
            ProviderName = providerName
          };
        }
      </code>
    </example>
        </member>
        <member name="M:LJCGridDataLib.TableGridData.CreateDataColumns">
            <summary>
      Creates a new DataColumns object.
    </summary><returns>The new DataColumns object.</returns>
        </member>
        <member name="M:LJCGridDataLib.TableGridData.DataColumnClone(System.Data.DataColumn)">
            <summary>
      Clones a DataColumn object.
    </summary><param name="dataColumn">The DataColumn object.</param><returns>The cloned DataColumn object.</returns>
        </member>
        <member name="M:LJCGridDataLib.TableGridData.DataColumnsClone(System.Data.DataTable)">
            <summary>
      Clones a DataColumn collection.
    </summary><param name="dataTable">The DataTable object.</param><returns>The cloned DataColumnCollection object.</returns>
        </member>
        <member name="M:LJCGridDataLib.TableGridData.GetColumnNames(System.Data.DataColumnCollection)">
            <summary>
      Creates a ColumnNames list from a DataColumns collection.
    </summary><param name="dataColumns">The DataColumn collection.</param><returns>The ColumnNames list.</returns>
        </member>
        <member name="M:LJCGridDataLib.TableGridData.GetDbColumn(System.Data.DataColumn)">
            <summary>
      Creates a DbColumn object from a DataColumn object.
    </summary><param name="dataColumn">The DataColumn object.</param><returns>The DbColumn object.</returns>
        </member>
        <member name="M:LJCGridDataLib.TableGridData.GetDbColumns(System.Data.DataColumnCollection)">
            <summary>
      Creates a DbColumns collection from a DataColumns collection.
    </summary><param name="dataColumns">The DataColumns collection.</param><returns>The DbColumns collection.</returns>
        </member>
        <member name="M:LJCGridDataLib.TableGridData.GetDataColumns(System.Data.DataColumnCollection,System.Collections.Generic.List{System.String})">
            <summary>
      Returns a set of DataColumns that match the supplied list.
    </summary><param name="dataColumns">The DataColumnCollection object.</param><param name="columnNames">The display column names.</param><returns>The DisplayColumns object.</returns>
        </member>
        <member name="M:LJCGridDataLib.TableGridData.#ctor(LJCWinFormControls.LJCDataGrid)">
            <summary>
      Initalizes an object instance.
    </summary><param name="grid">The Grid control.</param>
        </member>
        <member name="M:LJCGridDataLib.TableGridData.SetDisplayColumns(System.Data.DataColumnCollection,System.Collections.Generic.List{System.String})">
            <summary>
      Sets the Display Columns from the DataColumns object.
    </summary><param name="dataColumns">The DataColumnCollection object.</param><param name="propertyNames">The Property names.</param><example>
      <code>
        // See the DataAccess setup code on the TableGridData class page.

        // Sets the Display Columns from the DataColumns object.
        private DbColumns SetDisplayColumns(DataAccess dataAccess)
        {
          DbColumns retValue = null;

          var sql = "select * from Province";
          var dataTable = dataAccess.GetDataTable(sql);
          if (NetCommon.HasData(dataTable))
          {
            var tableGridData = new TableGridData(LJCDataGridName);
            tableGridData.SetDisplayColumns(dataTable.Columns);
            retValue = tableGridData.DisplayColumns;
          }
          return retValue;
        }
      </code>
    </example>
        </member>
        <member name="M:LJCGridDataLib.TableGridData.SetDisplayColumns(System.Object,System.Collections.Generic.List{System.String})">
            <summary>
      Sets the Display Columns from the DataObject properties.
    </summary><param name="dataObject">The DataObject reference.</param><param name="propertyNames">The Property Names.</param><example>
      <code>
        // See the DataAccess setup code on the TableGridData class page.

        // Sets the Display Columns from the DataColumns object.
        private DbColumns SetDisplayColumns(DataAccess dataAccess)
        {
          DbColumns retValue = null;

          var sql = "select * from Province";
          var dataTable = dataAccess.GetDataTable(sql);
          if (NetCommon.HasData(dataTable))
          {
            var province = new Province();
          
            var tableGridData = new TableGridData(LJCDataGridName);
            tableGridData.SetDisplayColumns(province);
            retValue = tableGridData.DisplayColumns;
          }
          return retValue;
        }
      </code>
    </example>
        </member>
        <member name="M:LJCGridDataLib.TableGridData.RemoveDisplayColumn(System.String)">
            <summary>
      Removes a display column.
    </summary><param name="columnName">The column name.</param>
        </member>
        <member name="M:LJCGridDataLib.TableGridData.LoadRows(System.Data.DataTable)">
            <summary>
      Loads the grid rows from the DataRows collection.
    </summary><param name="dataTable">The DataTable object.</param><example>
      <code>
        // See the DataAccess setup code on the TableGridData class page.

        // Loads the grid rows from the DataRows collection.
        private void LoadRows(DataAccess dataAccess)
        {
          var sql = "select * from Province";
          var dataTable = dataAccess.GetDataTable(sql);
          if (NetCommon.HasData(dataTable))
          {
            // Create the Display column definitions.
            var tableGridData = new TableGridData(LJCDataGridName);
            tableGridData.SetDisplayColumns(dataTable.Columns);

            // Configure the grid columns.
            LJCDataGridName.Columns.Clear();
            LJCDataGridName.LJCAddDisplayColumns(tableGridData.DisplayColumns);

            // Load the grid rows.
            tableGridData.LoadRows(dataTable);
          }
        }
      </code>
    </example>
        </member>
        <member name="M:LJCGridDataLib.TableGridData.RowAdd(System.Data.DataRow)">
            <summary>
      Adds a grid row and updates it with the DataRow values.
    </summary><param name="dataRow">The DataRow object.</param><returns>The added Grid row object.</returns><example>
      <code>
        // See the DataAccess setup code on the TableGridData class page.

        // Adds a grid row and updates it with the DbValues.
        private void RowAdd(DataAccess dataAccess)
        {
          var sql = "select * from Province";
          var dataTable = dataAccess.GetDataTable(sql);
          if (NetCommon.HasData(dataTable))
          {
            // Create the Display column definitions.
            var tableGridData = new TableGridData(LJCDataGridName);
            tableGridData.SetDisplayColumns(dataTable.Columns);

            // Configure the grid columns.
            LJCDataGridName.Columns.Clear();
            LJCDataGridName.LJCAddDisplayColumns(tableGridData.DisplayColumns);

            // Load the grid rows individually.
            foreach (DataRow row in dataTable.Rows)
            {
              tableGridData.RowAdd(row);
            }
          }
        }
      </code>
    </example>
        </member>
        <member name="M:LJCGridDataLib.TableGridData.RowSetValues(LJCWinFormControls.LJCGridRow,System.Data.DataRow)">
            <summary>
      Updates a grid row with the DataRow values.
    </summary><param name="gridRow">The Grid row object.</param><param name="dataRow">The DataRow object.</param><example>
      <code>
        // See the DataAccess setup code on the TableGridData class page.

        // Updates a grid row with the DbValues.
        private void RowSetValuesSql(DataAccess dataAccess)
        {
          var sql = "select * from Province";
          var dataTable = dataAccess.GetDataTable(sql);
          if (NetCommon.HasData(dataTable))
          {
            // Create the Display column definitions.
            var tableGridData = new TableGridData(LJCDataGridName);
            tableGridData.SetDisplayColumns(dataTable.Columns);

            // Configure the grid columns.
            LJCDataGridName.Columns.Clear();
            LJCDataGridName.LJCAddDisplayColumns(tableGridData.DisplayColumns);

            // Create and load the grid rows individually.
            foreach (DataRow row in dataTable.Rows)
            {
              var gridRow = LJCDataGridName.LJCRowAdd();
              tableGridData.RowSetValues(gridRow, row);
            }
          }
        }
      </code>
    </example>
        </member>
        <member name="M:LJCGridDataLib.TableGridData.RowUpdate(System.Data.DataRow)">
            <summary>
      Updates the current row with the DataRow values.
    </summary><param name="dataRow">The DataRow object.</param>
        </member>
        <member name="M:LJCGridDataLib.TableGridData.OnAddRow">
            <summary>
      Fires the AddRow event.
    </summary><remarks>
      <para>Syntax: protected void OnAddRow()</para>
    </remarks>
        </member>
        <member name="P:LJCGridDataLib.TableGridData.DataDefinition">
            <summary>Gets or sets the DataDefinition value.</summary>
        </member>
        <member name="P:LJCGridDataLib.TableGridData.DataRecord">
            <summary>Gets or sets the DataRecord value.</summary>
        </member>
        <member name="P:LJCGridDataLib.TableGridData.DisplayColumns">
            <summary>Gets the DisplayColumns.</summary>
        </member>
        <member name="P:LJCGridDataLib.TableGridData.GridRow">
            <summary>Gets or sets the GridRow value.</summary>
        </member>
        <member name="E:LJCGridDataLib.TableGridData.AddRow">
            <summary>The AddRow event.</summary>
        </member>
    </members>
</doc>
