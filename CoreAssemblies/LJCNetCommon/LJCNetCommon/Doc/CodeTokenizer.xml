<?xml version="1.0" encoding="utf-8" ?>
<!-- Copyright(c) Lester J. Clark and Contributors. -->
<!-- Licensed under the MIT License. -->
<!-- CodeTokenizer.xml -->
<items>
  <CodeTokenizer>
    <summary>
      A C# Code Tokenizer class. (RE)
    </summary>
  </CodeTokenizer>
  <InitializeKeywords>
    <summary>
      Initializes the Keywords. (R)
    </summary>
    <remarks>
      This is provided so the CodeTokens object can be created without
      initializing the Keywords. This is useful in a Parallel.For() loop.
    </remarks>
  </InitializeKeywords>
  <SetKeywords>
    <summary>
      Sets the Keywords from the previously initialized CodeTokens. (R)
    </summary>
    <param name="setup">The setup CodeTokens</param>
    <remarks>
      This is provided to set the Keywords in a Parallel.For() loop.
    </remarks>
  </SetKeywords>

  <!-- Public Methods -->
  <ClearRemainingTokens>
    <summary>
      Clears all the remaining tokens; starting with the specified token index.
      (E)
    </summary>
    <param name="tokenIndex">The token index.</param>
    <example>
      <code>        using LJCNetCommon;
        
        var tokenizer = new CodeTokenizer();
        string text = " // This is a comment.";
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);
        if (tokenizer.IsComment(token))
        {
          // Remaining tokens are not processed.
          tokenizer.ClearRemainingTokens(tokenIndex + 1);
        }</code>
    </example>
  </ClearRemainingTokens>
  <CombineXmlCommentTokens>
    <summary>
      Combines the tokens for an XMLComment. (E)
    </summary>
    <param name="tokenIndex">The token index.</param>
    <example>
      <code>        using LJCNetCommon;
        
        var tokenizer = new CodeTokenizer();
        string text = " /// &lt;summary&gt;This is an XML comment.&lt;/summary&gt;";
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);
        if (tokenizer.IsCodeXMLComment(token))
        {
          // All text is processed as one token.
          tokenizer.CombineXmlCommentTokens(tokenIndex);
        }</code>
    </example>
  </CombineXmlCommentTokens>
  <EndTokens>
    <summary>
      Sets the tokenIndex to the end of the tokens array. (E)
    </summary>
    <param name="tokenIndex">The token index.</param>
    <example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " string text = \"DataValue\"";
        tokenizer.SetTokens(text);
        short tokenIndex = 3;
        string token = tokenizer.GetToken(tokenIndex);
        if (tokenizer.IsDataValue(token)
          &amp;&amp; false = token.Contains("("))
        {
          // Value tokenIndex is set to the end of the tokens array.
          tokenizer.EndTokens(ref tokenIndex);
        }</code>
    </example>
  </EndTokens>
  <GetNextToken>
    <summary>
      Gets the next token after the specified token index. (E)
    </summary>
    <param name="tokenIndex">The token index.</param>
    <returns>The next token value.</returns>
    <example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " // This is a comment.";
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetNextToken(ref tokenIndex);
        // Value token = "This".
        // Value tokenIndex = 1.</code>
    </example>
  </GetNextToken>
  <GetToken>
    <summary>
      Gets the token at the specified token index. (E)
    </summary>
    <param name="tokenIndex">The token index.</param>
    <returns>The token value.</returns>
    <example>
      <code>        using LJCNetCommon;
        
        var tokenizer = new CodeTokenizer();
        string text = " // This is a comment.";
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);
        // Value token = "//".</code>
    </example>
  </GetToken>
  <HasBeginDelimiter>
    <summary>
      Check if the text has the begin delimiter. (E)
    </summary>
    <param name="text">The text value.</param>
    <param name="beginDelimiter">The begin delimiter.</param>
    <returns>True if the begin delimiter is found.</returns>
    <example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " /// &lt;summary&gt;This is an XML comment.&lt;/summary&gt;";
        tokenizer.SetTokens(text);
        short tokenIndex = 1;
        string token = tokenizer.GetToken(tokenIndex);
        bool hasBegin = tokenizer.HasBeginDelimiter(token, "&lt;summary&gt;");
        // Value hasBegin is true.</code>
    </example>
  </HasBeginDelimiter>
  <HasBothDelimiters>
    <summary>
      Check if the text is a Full summary comment. (E)
    </summary>
    <param name="text">The text value.</param>
    <param name="beginDelimiter">The begin delimiter.</param>
    <param name="endDelimiter">The end delimiter.</param>
    <returns>True if both delimiters are found.</returns>
    <example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " &lt;summary&gt;This is an XML comment.&lt;/summary&gt;";
        tokenizer.SetTokens(text);
        short tokenIndex = 1;
        string token = tokenizer.GetToken(tokenIndex);
        bool hasBoth = tokenizer.HasBothDelimiter(token, "&lt;summary&gt;"
          , "&lt;/summary&gt;");
        // Value hasBoth is true.</code>
    </example>
  </HasBothDelimiters>
  <HasEndDelimiter>
    <summary>
      Check if the text has the end delimiter. (E)
    </summary>
    <param name="text">The text value.</param>
    <param name="endDelimiter">The end delimiter.</param>
    <returns>True if the end delimiter is found.</returns>
    <example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " /// &lt;summary&gt;This is an XML comment.&lt;/summary&gt;";
        tokenizer.SetTokens(text);
        short tokenIndex = 1;
        string token = tokenizer.GetToken(tokenIndex);
        bool hasEnd = tokenizer.HasEndDelimiter(token, "&lt;/summary&gt;");
        // Value hasEnd is true.</code>
    </example>
  </HasEndDelimiter>
  <IsCodeXmlComment>
    <summary>
      Check if a XML comment. (E)
    </summary>
    <param name="text">The text value.</param>
    <returns>True if an XML comment, otherwise false.</returns>
    <example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " /// &lt;summary&gt;This is an XML comment.&lt;/summary&gt;";
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);
        bool isXMLComment = tokenizer.IsCodeXMLComment(token);
        // Value isXMLComment is true.</code>
    </example>
  </IsCodeXmlComment>
  <IsComment>
    <summary>
      Check if a code comment. (E)
    </summary>
    <param name="text">The text value.</param>
    <returns>True if a comment, otherwise false.</returns>
    <example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " // This is a comment.";
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);
        bool isComment = tokenizer.IsComment(token);
        // Value isComment is true.</code>
    </example>
  </IsComment>
  <IsDataType>
    <summary>
      Check if the text is a DataType. (E)
    </summary>
    <param name="text">The text value.</param>
    <param name="firstPass">The first pass for common values.</param>
    <returns>True if a data type, otherwise false.</returns>
    <example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " string text = \"DataValue\"";
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);

        int prefixCount = 0;
        string stripToken = tokenizer.StripQualifier(token, ref prefixCount);
        bool isDataType = tokenizer.IsDataType(stripToken);
        // Value isDataType = true.</code>
    </example>
  </IsDataType>
  <IsDataValue>
    <summary>
      Check if the text is a Data value. (E)
    </summary>
    <param name="text">The text value.</param>
    <returns>True if a data value, otherwise false.</returns>
    <example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " string text = \"DataValue\"";
        tokenizer.SetTokens(text);
        short tokenIndex = 3;
        string token = tokenizer.GetToken(tokenIndex);

        int prefixCount = 0;
        string stripToken = tokenizer.StripQualifier(token, ref prefixCount);
        bool isDataValue = tokenizer.IsDataType(stripToken);
        // Value isDataValue = true.</code>
    </example>
  </IsDataValue>
  <IsDelimiters>
    <summary>
      Check if the text contains a common delimiter. (E)
    </summary>
    <param name="text">The text value.</param>
    <returns>True if a common delimiter, otherwise false.</returns>
    <example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " string text = \"DataValue\"";
        tokenizer.SetTokens(text);
        short tokenIndex = 2;
        string token = tokenizer.GetToken(tokenIndex);
        
        // Common Delimiters are: ':', '{', '}', '=' and '"'.
        bool isCommonDelimiter = tokenizer.IsDelimiters(token);
        // Value isCommonDelimiter = true.</code>
    </example>
  </IsDelimiters>
  <IsKeyword>
    <summary>
      Check if the text is a Keyword. (E)
    </summary>
    <param name="text">The text value.</param>
    <param name="firstPass">The first pass for common values.</param>
    <returns>True if a keyword, otherwise false.</returns>
    <example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " if (text == \"DataValue\"");
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);

        int prefixCount = 0;
        string stripToken = tokenizer.StripQualifier(token, ref prefixCount);
        bool isKeyword = tokenizer.IsKeyword(stripToken);
        // Value isDataType = true.</code>
    </example>
  </IsKeyword>
  <IsLibType>
    <summary>
      Check if the text is a LibType. (E)
    </summary>
    <param name="text">The text value.</param>
    <returns>True if a library type, otherwise false.</returns>
    <example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " private List&lt;string&gt; list;"
        tokenizer.SetTokens(text);
        short tokenIndex = 1;
        string token = tokenizer.GetToken(tokenIndex);

        int prefixCount = 0;
        string stripToken = tokenizer.StripQualifier(token, ref prefixCount);
        bool isLibType = tokenizer.IsLibType(stripToken);
        // Value isLibType = true.</code>
    </example>
  </IsLibType>
  <IsModifier>
    <summary>
      Check if the text is a Modifier. (E)
    </summary>
    <param name="text">The text value.</param>
    <param name="firstPass">The first pass for common values.</param>
    <returns>True if a modifier, otherwise false.</returns>
    <example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " private List&lt;string&gt; list;"
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);

        int prefixCount = 0;
        string stripToken = tokenizer.StripQualifier(token, ref prefixCount);
        bool isModifier = tokenizer.IsModifier(stripToken);
        // Value isModifier = true.</code>
    </example>
  </IsModifier>
  <IsParam>
    <summary>
      Check if the text is a param comment. (E)
    </summary>
    <param name="text">The text value.</param>
    <returns>True if a param item, otherwise false.</returns>
    <example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " /// &lt;param name=\"id\"&gt;The ID value.&lt;/param&gt;";
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);
        if (tokenizer.IsCodeXMLComment(token))
        {
          bool isParam = tokenizer.IsParam(text);
          // Value isParam is true.
        }</code>
    </example>
  </IsParam>
  <IsRefType>
    <summary>
      Check if the text is a RefType. (E)
    </summary>
    <param name="text">The text value.</param>
    <returns>True if a reference type, otherwise false.</returns>
    <example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " public class ClassName()";
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);
        bool isRefType = tokenizer.IsRefType(token);
        // Value isRefType = true.</code>
    </example>
  </IsRefType>
  <SetTokens>
    <summary>
      Sets the Tokens value, split on blanks. (E)
    </summary>
    <param name="text">The text value.</param>
    <example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " public class ClassName()";
        tokenizer.SetTokens(text);
        // Array tokenizer.Tokens has three elements.</code>
    </example>
  </SetTokens>
  <StripQualifier>
    <summary>
      Strips the leading qualifiers and from next qualifier to end of string.
      (E)
    </summary>
    <param name="text">The text value.</param>
    <param name="prefixCount">The recursive prefix count.</param>
    <returns>The strip text value.</returns>
    <example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " private List&lt;string&gt; list;"
        tokenizer.SetTokens(text);
        short tokenIndex = 1;
        string token = tokenizer.GetToken(tokenIndex);

        int prefixCount = 0;
        string stripToken = tokenizer.StripQualifier(token, ref prefixCount);
        // stripToken = "List".</code>
    </example>
  </StripQualifier>
</items>