<?xml version="1.0" encoding="utf-8" ?>
<!-- Copyright(c) Lester J. Clark and Contributors. -->
<!-- Licensed under the MIT License. -->
<!-- NetString.xml -->
<items>
  <NetString>
    <summary>
      Contains common string related static functions.
    </summary>
    <remarks>
      <para>
        The NetCommon class contains string related static helper functions for
        all .NET program types.
      </para>
    </remarks>
  </NetString>
  
  <!-- Checking String Values -->
  <HasValue>
    <summary>
      Checks if a text value exists.
    </summary>
    <param name="text">The text value.</param>
    <returns>True if there is a text value, otherwise false.</returns>
  </HasValue>
  <IsDigits>
    <summary>
      Checks a string value for digits.
    </summary>
    <param name="text">The text value.</param>
    <returns>True if all digits, otherwise false.</returns>
  </IsDigits>
  <IsEqual>
    <summary>
      Do an Ignore Case string compare.
    </summary>
    <param name="stringA">The first string.</param>
    <param name="stringB">The second string.</param>
  </IsEqual>

  <!-- Formatting a String -->
  <GetPropertyName>
    <summary>
      Gets a column name with underscores converted to Pascal case.
    </summary>
    <param name="name">The column name.</param>
    <returns>The Pascal case property name.</returns>
  </GetPropertyName>
  <ExceptionString>
    <summary>
      Creates an exception string with outer and inner exception.
    </summary>
    <param name="e">The Exception object.</param>
    <returns>The exception string.</returns>
  </ExceptionString>
  <InitString>
    <summary>
      Initializes a string to the trimmed value or null.
    </summary>
    <param name="value">The string value.</param>
    <returns>
      The trimmed string value or null if the string is null
      or an empty string when trimmed.
    </returns>
  </InitString>

  <!-- Parsing Delimited String Values -->
  <GetDelimitedAndIndexes>
    <summary>
      Get the delimited string begin and end index.
    </summary>
    <param name="text">The text value.</param>
    <param name="beginDelimiter">The beginning delimiter.</param>
    <param name="beginIndex">The begin index.</param>
    <param name="endIndex">The end index.</param>
    <param name="startIndex">The starting index.</param>
    <param name="endDelimiter">The ending delimiter.</param>
    <returns>The string between the specified delimiters.</returns>
    <example>
      <code>
        using LJCNetCommon;
        
        // Get the delimited string begin and end index.
        private static void GetDelimitedAndIndexes()
        {
          // Get text that has different begin and end delimiter.
          var source = "&lt;summary&gt;This is some text.&lt;/summary&gt;";
          int startIndex = 0;
          var beginDelimiter = "&lt;summary&gt;";
          var endDelimiter = "&lt;/summary&gt;";
          var text = NetString.GetDelimitedAndIndexes(source, beginDelimiter
            , out int beginIndex, out int endIndex, ref startIndex, endDelimiter);
          // text = "This is some text.";
          // beginIndex = 0;
          // endIndex = 27;
          // startIndex = -1;

          // Get text that has the same begin and end delimiter.
          // The endDelimiter is not specified or null.
          source = "|This is some text.|";
          startIndex = 0;
          beginDelimiter = "|";
          text = NetString.GetDelimitedAndIndexes(source, beginDelimiter
            , out beginIndex, out endIndex, ref startIndex);
          // text = "This is some text.";
          // beginIndex = 0;
          // endIndex = 19;
          // startIndex = -1;

          // Get text that has no end delimiter.
          source = "|This is some text.";
          startIndex = 0;
          beginDelimiter = "|";
          text = NetString.GetDelimitedAndIndexes(source, beginDelimiter
            , out beginIndex, out endIndex, ref startIndex, "#NoDelimiter");
          // text = "This is some text.";
          // beginIndex = 0;
          // endIndex = 19;
          // startIndex = -1;

          // Get delimited text where the delimiters occur multiple times.
          source = "|This is some text.| |and some more here.|";
          startIndex = 0;
          beginDelimiter = "|";
          while (startIndex > -1)
          {
            text = NetString.GetDelimitedAndIndexes(source, beginDelimiter
              , out beginIndex, out endIndex, ref startIndex);
            // First time: text = "This is some text.";
            // beginIndex = 0;
            // endIndex = 19;
            // startIndex = 20;
            // Second time: text = "and some more here.";
            // beginIndex = 21;
            // endIndex = 41;
            // startIndex = -1
          }
        }
      </code>
    </example>
  </GetDelimitedAndIndexes>
  <GetDelimitedString>
    <summary>
      Gets the string between the specified delimiters.
    </summary>
    <param name="text">The text value.</param>
    <param name="beginDelimiter">The beginning delimiter.</param>
    <param name="startIndex">The starting index.</param>
    <param name="endDelimiter">The ending delimiter.</param>
    <returns>The text between the delimiters.</returns>
    <example>
      <code>
        using LJCNetCommon;
        
        // Gets the string between the specified delimiters.
        private static void GetDelimitedString()
        {
          var source = "&lt;summary&gt;This is some text.&lt;/summary&gt;";
          var startIndex = 0;
          var beginDelimiter = "&lt;summary&gt;";
          var endDelimiter = "&lt;/summary&gt;";

          var text = NetString.GetDelimitedString(source, beginDelimiter, ref startIndex
            , endDelimiter);
          // text = "This is some text.";
          // startIndex = -1;
        }
      </code>
    </example>
  </GetDelimitedString>
  <GetStringWithDelimiters>
    <summary>
      Get the string including the specified delimiters.
    </summary>
    <param name="text">The text value.</param>
    <param name="beginDelimiter">The beginning delimiter.</param>
    <param name="startIndex">The starting index.</param>
    <param name="endDelimiter">The ending delimiter.</param>
    <returns>The text including the specified delimiters.</returns>
    <example>
      <code>
        using LJCNetCommon;

        // Get the string including the specified delimiters.
        private static void GetStringWithDelimiters()
        {
          var source = "&lt;summary&gt;This is some text.&lt;/summary&gt;";
          var startIndex = 0;
          var beginDelimiter = "&lt;summary&gt;";
          var endDelimiter = "&lt;/summary&gt;";
          var text = NetString.GetStringWithDelimiters(source, beginDelimiter
            , ref startIndex, endDelimiter);
          // text = "&lt;summary&gt;This is some text.&lt;/summary&gt;";
          // startIndex = -1;

          // Get text that has the same begin and end delimiter.
          // The endDelimiter is not specified or null.
          source = "|This is some text.|";
          startIndex = 0;
          beginDelimiter = "|";
          text = NetString.GetStringWithDelimiters(source, beginDelimiter
            , ref startIndex);
          // text = "|This is some text.|";
          // startIndex = -1;

          // Get text that has no end delimiter.
          source = "|This is some text.";
          startIndex = 0;
          beginDelimiter = "|";
          text = NetString.GetStringWithDelimiters(source, beginDelimiter
            , ref startIndex, "#NoDelimiter");
          // text = "|This is some text.";
          // startIndex = -1;

          // Get delimited text where the delimiters occur multiple times.
          source = "|This is some text.| |and some more here.|";
          startIndex = 0;
          beginDelimiter = "|";
          while (startIndex > -1)
          {
            text = NetString.GetStringWithDelimiters(source, beginDelimiter
              , ref startIndex);
            // First time: text = "|This is some text.|";
            // startIndex = 20;
            // Second time: text = "|and some more here.|";
            // startIndex = -1
          }
        }
      </code>
    </example>
  </GetStringWithDelimiters>

  <!-- Soundex Functions -->
   <CreateLSoundex>
    <summary>
      Creates a letter based soundex value. (D)
    </summary>
    <param name="text">The text value.</param>
    <returns>The Letter based soundex value.</returns>
    <remarks>
      Scatter = SCTR&lt;br /&gt;
      Aphrodisiac = APHRDSC&lt;br /&gt;
      Pharmacy = PHRMC&lt;br /&gt;
      Psychology = PSCHLG&lt;br /&gt;
      Cart = CRT&lt;br /&gt;
      Ceiling = CLNG&lt;br /&gt;
      Cyan = CN
    </remarks>
  </CreateLSoundex>
  <CreatePSoundex>
    <summary>
      Creates a Phonetic based soundex value. (D)
    </summary>
    <param name="text">The text value.</param>
    <returns>The Phonetic based soundex value.</returns>
    <remarks>
      Scatter = SCTR&lt;br /&gt;
      Aphrodisiac = AFRDSC&lt;br /&gt;
      Pharmacy = FRMS&lt;br /&gt;
      Psychology = SCHLG&lt;br /&gt;
      Cart = KRT&lt;br /&gt;
      Ceiling = SLNG&lt;br /&gt;
      Cyan = SN
    </remarks>
  </CreatePSoundex>
  <IsSoundexLetter>
    <summary>
      Checks if the letter is a soundex skipped letter. (R)
    </summary>
    <param name="letter">The text letter.</param>
    <param name="prevLetter">The text previous letter.</param>
    <returns>True if the letter should be skipped, otherwise false.</returns>
    <remarks>
      True if the letter is the first letter or not a vowel and not the same as
      the previous letter.
    </remarks>
  </IsSoundexLetter>
  <Phonetic>
    <summary>
      Creates a Phonetic character from the supplied text starting at the
      supplied index. (D)
    </summary>
    <param name="text">The text value.</param>
    <param name="index">The start index.</param>
    <param name="letter">The Phonetic letter.</param>
    <returns>True if a Phonetic was created, otherwise false.</returns>
    <remarks>
      <para>
        Sets the letter parameter to:&lt;br /&gt;  -
        "F" if the current and following letter are "PH"&lt;br /&gt;
        - "S" if the current letter is "P", the following letter is "S"
        and the third letter is a vowel or "Y".&lt;br /&gt;
        - "K" if the current letter is "C" and the following letter is "A", "O"
        or "U".&lt;br /&gt;
        - "S" if the current letter is "C" and the following letter is "E", "I"
        or "Y".&lt;br /&gt;
        - Otherwise, the same letter as at the current index.
      </para>
    </remarks>
  </Phonetic>
</items>