<?xml version="1.0" encoding="utf-8" ?>
<!-- Copyright(c) Lester J. Clark and Contributors. -->
<!-- Licensed under the MIT License. -->
<!-- NetCommon.xml -->
<items>
  <NetCommon>
    <summary>
      Contains common static functions. (RDE)
    </summary>
    <remarks>
      <para>
        The NetCommon class contains static helper functions for all .NET
        program types.
      </para>
    </remarks>
  </NetCommon>
  
  <!-- Other Functions -->
  <CheckArgument>
    <summary>
      Check for missing argument of type: string with no value, null,
      integer = 0, IList with no items, decimal = 0 or DataTable with no rows.
    </summary>
    <!--typeparam name="T">The argument type.</typeparam-->
    <param name="argument">The argument value.</param>
    <!--exception cref="ArgumentNullException">Argument Null Exception</exception-->
    <!--exception cref="ArgumentException">Argument Exception</exception-->
  </CheckArgument>
  <CompareNull>
    <summary>
      Compare null values. (DE)
    </summary>
    <param name="x">The compare object.</param>
    <param name="y">The compare to object.</param>
    <returns>
      The integer that indicates the order relationship of the objects.
    </returns>
    <remarks>
      -2    - Neither object is null.&lt;br /&gt;
      -1    - Null object x precedes object y.&lt;br /&gt;
      0     - Object x and object y are both null.&lt;br /&gt;
      1     - Object x follows null object y.
    </remarks>
    <example>
      <code>
        using System;
        using LJCNetCommon;
        
        /// &lt;summary&gt;Sort and search on Name value.&lt;/summary&gt;
        public class NameComparer : IComparer&lt;ClassName&gt;
        {
          // Compares two objects.
          /// &lt;include path='items/Compare/*' file='../../../CoreUtilities/LJCDocLib/Common/Data.xml'/&gt;
          public int Compare(ClassName x, ClassName y)
          {
            int retValue;

            retValue = NetCommon.CompareNull(x, y);
            if (-2 == retValue)
            {
              retValue = NetCommon.CompareNull(x.Name, y.Name);
              if (-2 == retValue)
              {
                // Case sensitive.
                //retValue = x.Name.CompareTo(y.Name);

                // Not case sensitive.
                retValue = string.Compare(x.Name, y.Name, true);
              }
            }
            return retValue;
          }
        }
      </code>
    </example>
  </CompareNull>
  <HasColumns>
    <summary>
      Checks a data table for columns definitions.
    </summary>
    <param name="dataTable">The data table object.</param>
    <returns>True if the data table contains Columns.</returns>
  </HasColumns>
  <HasData>
    <summary>
      Checks a data table for rows. (E)
    </summary>
    <param name="dataTable">The data table object.</param>
    <returns>True if the data table contains rows.</returns>
    <remarks>
      This allows a single if statement where the DataTable value may be null.
    </remarks>
    <example>
      <code>
        using System.Data;
        using LJCNetCommon;
        
        private static void HasData()
        {
          DataTable dataTable = new DataTable();
          
          // Returns false.
          bool result = NetCommon.HasData(dataTable);
        }
      </code>
    </example>
  </HasData>
  <HasItems>
    <summary>
      Checks an IList collection for items.
    </summary>
    <param name="list">The IList interface.</param>
    <returns>True if the collection contains items.</returns>
  </HasItems>
  <IsEqual>
    <summary>
      Checks if two values are equal.
    </summary>
    <param name="oldValue"> The previous value.</param>
    <param name="newValue"> The new value.</param>
    <returns>True if equal, otherwise false.</returns>
    <remarks>
      Performs a strongly-typed value check of two objects where those
      objects are built-in system types.
    </remarks>
  </IsEqual>
  
  <!-- Text Transform Functions -->
  <Base64BytesToText>
    <summary>
      Decodes a Base64 byte array to a Text value. (E)
    </summary>
    <param name="bytes">The Base64 byte array.</param>
    <returns>The Text value.</returns>
    <example>
      <code>
        using LJCNetCommon;
        
        // Decodes a Base64 byte array to a Text value.
        private static void Base64BytesToText()
        {
          // Setup
          byte[] base64Bytes = NetCommon.TextToBase64Bytes("Text");

          // Decodes a Base64 byte array to a Text value.
          string text = NetCommon.Base64BytesToText(base64Bytes);
        }
      </code>
    </example>
  </Base64BytesToText>
  <TextToBase64Bytes>
    <summary>
      Encodes a Text value to a Base64 byte array. (E)
    </summary>
    <param name="text">The Text value.</param>
    <returns>Tye Base64 byte array.</returns>
    <example>
      <code>
        using LJCNetCommon;
        
        // Encodes a Text value to a Base64 byte array.
        private static void TextToBase64Bytes()
        {
          // Create Text from Base64 byte array.
          byte[] base64Bytes = NetCommon.TextToBase64Bytes("Text");

          // Check the text.
          string text = NetCommon.Base64BytesToText(base64Bytes);
        }
      </code>
    </example>
  </TextToBase64Bytes> 

  <Base64BytesToTextBytes>
    <summary>
      Decodes a Base64 byte array to a Text byte array. (E)
    </summary>
    <param name="bytes">The base64 byte array.</param>
    <returns>The Text byte array.</returns>
    <example>
      <code>
        using LJCNetCommon;
        
        // Decodes a Base64 byte array to a Text byte array.
        private static void Base64BytesToTextBytes() 
        {
          // Setup
          byte[] base64Bytes = NetCommon.TextToBase64Bytes("Text");

          // Decodes a Base64 byte array to a Text byte array.
          byte[] textBytes = NetCommon.Base64BytesToTextBytes(base64Bytes);

          // Check the text.
          string text = NetCommon.BytesToText(textBytes); 
        }
      </code>
    </example>
  </Base64BytesToTextBytes>
  <TextBytesToBase64Bytes>
    <summary>
      Encodes a byte array to a Base64 byte array. (E)
    </summary>
    <param name="bytes">The byte array.</param>
    <returns>The Base64 byte array.</returns>
    <example>
      <code>
        using LJCNetCommon;
        
        // Encodes a Text byte array to a Base64 byte array.
        private static void TextBytesToBase64Bytes()
        {
          // Setup
          byte[] textBytes = NetCommon.TextToBytes("Text");

          // Encodes a byte array to a Base64 byte array.
          byte[] base64Bytes = NetCommon.TextBytesToBase64Bytes(textBytes);

          // Check the text.
          string text = NetCommon.Base64BytesToText(base64Bytes);
        }
      </code>
    </example>
  </TextBytesToBase64Bytes>
  
  <Base64ToText>
    <summary>
      Decodes a Base64 value to a Text value. (E)
    </summary>
    <param name="base64Text">The Base64 string.</param>
    <returns>The Text value.</returns>
    <example>
      <code>
        using LJCNetCommon;
        
        // Decodes a Base64 value to a Text value.
        private static void Base64ToText()
        {
          // Setup
          string base64 = NetCommon.TextToBase64("Text");

          // Decodes a Base64 string to Text.
          string text = NetCommon.Base64ToText(base64);
        }
      </code>
    </example>
  </Base64ToText>
  <TextToBase64>
    <summary>
      Encodes a Text value to a Base64 value. (E)
    </summary>
    <param name="text">The Text value.</param>
    <returns>The Base64 string.</returns>
    <example>
      <code>
        using LJCNetCommon;
        
        // Encodes a Text value to a Base64 value.
        private static void TextToBase64()
        {
          string text = "Text";

          // Encodes text to a Base64 string.
          string base64 = NetCommon.TextToBase64(text);

          // Check the text.
          text = NetCommon.Base64ToText(base64);
        }
      </code>
    </example>
  </TextToBase64>
  
  <Base64ToTextBytes>
    <summary>
      Decodes a Base64 value to a Text byte array. (E)
    </summary>
    <param name="base64">The Base64 value.</param>
    <returns>The Text byte array.</returns>
    <example>
      <code>
        using LJCNetCommon;
        
        // Decodes a Base64 value to a Text byte array.
        public static void Base64ToTextBytes()
        {
          // Setup
          string base64 = NetCommon.TextToBase64("Text");

          // Decodes a Base64 value to a Text byte array.
          byte[] textBytes = NetCommon.Base64ToTextBytes(base64);

          // Check the text.
          string text = NetCommon.BytesToText(textBytes);
        }
      </code>
    </example>
  </Base64ToTextBytes>
  <TextBytesToBase64>
    <summary>
      Encodes a Text byte array to a Base64 value. (E)
    </summary>
    <param name="bytes">The Text byte array.</param>
    <returns>The Base64 string.</returns>
    <example>
      <code>
        using LJCNetCommon;
        
        // Encodes a Text byte array to a Base64 value.
        public static void TextBytesToBase64()
        {
          // Setup
          byte[] TextBytes = NetCommon.TextToBytes("Text");

          // Encodes a Text byte array to a Base64 value.
          string base64 = NetCommon.TextBytesToBase64(TextBytes);

          // Check the text.
          string text = NetCommon.Base64ToText(base64);
        }
      </code>
    </example>
  </TextBytesToBase64>
  
  <BytesToText>
    <summary>
      Creates text from a byte array. (E)
    </summary>
    <param name="bytes">The byte array.</param>
    <returns>The Text value.</returns>
    <example>
      <code>
        using LJCNetCommon;
        
        // Creates text from a byte array.
        private static void BytesToText()
        {
          // Setup
          byte[] bytes = NetCommon.TextToBytes("Text");

          // Creates text from a byte array.
          string text = NetCommon.BytesToText(bytes);
        }
      </code>
    </example>
  </BytesToText>
  <TextToBytes>
    <summary>
      Creates a byte array from text. (E)
    </summary>
    <param name="text">The Text value.</param>
    <returns>The new byte array.</returns>
    <example>
      <code>
        using LJCNetCommon;
        
        // Creates a byte array from text.
        private static void TextToBytes()
        {
          // Setup
          string text = "Text";

          // Creates a byte array from text.
          byte[] bytes = NetCommon.TextToBytes(text);

          // Check the text.
          text = NetCommon.BytesToText(bytes);
        }
      </code>
    </example>
  </TextToBytes>
  
  <MemStreamToBytes>
    <summary>
      Copies a memory stream to a byte array. (E)
    </summary>
    <param name="stream">The stream object.</param>
    <returns>The byte array.</returns>
    <example>
      <code>
        using System.IO;
        using LJCNetCommon;
        
        // Copies a memory stream to a byte array.
        private static void MemStreamToBytes()
        {
          // Setup
          byte[] textBytes;
          using (Stream stream = NetCommon.StringToMemStream("Text"))
          {
            // Copies a memory stream to a byte array.
            textBytes = NetCommon.MemStreamToBytes(stream);
          }
          
          // Check the text.
          string text = NetCommon.BytesToText(textBytes);
        }
      </code>
    </example>
  </MemStreamToBytes>
  <BytesToMemStream>
    <summary>
      Copies a byte array to a memory stream. (E)
    </summary>
    <param name="bytes">The byte array.</param>
    <returns>The reference to the memory stream.</returns>
    <example>
      <code>
        using System.IO;
        using LJCNetCommon;
        
        // Copies a byte array to a memory stream.
        private static void BytesToMemStream()
        {
          // Setup
          byte[] bytes = NetCommon.TextToBytes("Text");

          // Copies a byte array to a memory stream.
          using (Stream stream = NetCommon.BytesToMemStream(bytes))
          {
            // Check the text.
            string text = NetCommon.MemStreamToString(stream);
          }
        }
      </code>
    </example>
  </BytesToMemStream>
  
  <MemStreamToString>
    <summary>
      Creates a string from a memory stream. (E)
    </summary>
    <param name="stream">The stream object.</param>
    <returns>The string value.</returns>
    <example>
      <code>
        using System.IO;
        using LJCNetCommon;

        // Creates a string from a memory stream.
        private static void MemStreamToString()
        {
          // Setup
          using (Stream stream = NetCommon.StringToMemStream("Text"))
          {
            // Creates a string from a memory stream.
            string text = NetCommon.MemStreamToString(stream);
          }
        }
      </code>
    </example>
  </MemStreamToString>
  <StringToMemStream>
    <summary>
      Creates a memory stream from a string. (E)
    </summary>
    <param name="text">The Text value.</param>
    <returns>The reference to the memory stream.</returns>
    <example>
      <code>
        using System.IO;
        using LJCNetCommon;
        
        // Creates a memory stream from a string.
        private static void StringToMemStream()
        {
          using (Stream stream = NetCommon.StringToMemStream("Text"))
          {
            // Check the text.
            string text = NetCommon.MemStreamToString(stream);
          }
        }
      </code>
    </example>
  </StringToMemStream>
  
  <XmlDecode>
    <summary>
      Decodes an encoded XML string. (E)
    </summary>
    <param name="text">The encoded text.</param>
    <returns>The decoded text.</returns>
    <example>
      <code>
        using LJCNetCommon;
        
        // Decodes an encoded XML string.
        private static void XmlDecode()
        {
          // Setup
          string xml = "&lt;text&gt;Here &amp; There&lt;/text&gt;";
          string encoded = NetCommon.XmlEncode(xml);

          // Decodes an encoded XML string.
          string text = NetCommon.XmlDecode(encoded);
        }
      </code>
    </example>
  </XmlDecode>
  <XmlEncode>
    <summary>
      Encodes a string with XML escape values. (E)
    </summary>
    <param name="text">The text to be encoded.</param>
    <returns>The encoded text.</returns>
    <example>
      <code>
        using LJCNetCommon;
        
        // Encodes a string with XML escape values.
        private static void XmlEncode()
        {
          // Setup
          string xml = "&lt;text&gt;Here &amp; There&lt;/text&gt;";

          // Encodes a string with XML escape values.
          string encoded = NetCommon.XmlEncode(xml);

          // Check the text.
          string text = NetCommon.XmlDecode(encoded);
        }
      </code>
    </example>
  </XmlEncode>

  <!-- Serialization Functions -->
  <XmlDeserialize>
    <summary>
      Deserialize an XML message file to an object. (E)
    </summary>
    <param name="type">The object type.</param>
    <param name="fileSpec">The input file spec.</param>
    <param name="rootName">The Root Name value.</param>
    <returns>The deserialized object.</returns>
    <example>
      <code>
        using LJCNetCommon;
      
        public class Person
        {
          public long Id { get; set; }
          public string Name { get; set; }
          public bool PrincipleFlag { get; set; }
        }
        
        // Deserialize an XML message file to an object.
        private static void XmlDeserialize()
        {
          // Setup
          var person = new Person()
          {
            Id = 1,
            Name = "Text",
            PrincipleFlag = true
          };
          string file = "Text.xml";
          NetCommon.XmlSerialize(person.GetType(), person, null, file);

          // Deserialize an XML message file to an object.
          Person newPerson;
          newPerson = NetCommon.XmlDeserialize(typeof(Person), file) as Person;
        }
      </code>
    </example>
  </XmlDeserialize>
  <XmlDeserializeMessage>
    <summary>
      Deserialize an XML message string to an object. (E)
    </summary>
    <param name="type">The object type.</param>
    <param name="message">The message string.</param>
    <returns>The deserialized object.</returns>
    <example>
      <code>
        using LJCNetCommon;
      
        public class Person
        {
          public long Id { get; set; }
          public string Name { get; set; }
          public bool PrincipleFlag { get; set; }
        }
        
        // Deserialize an XML message string to an object.
        private static void XmlDeserializeMessage()
        {
          // Setup
          var person = new Person()
          {
            Id = 2,
            Name = "Text",
            PrincipleFlag = true
          };
          string message = NetCommon.XmlSerializeToString(person.GetType(), person, null);

          // Deserialize an XML message string to an object.
          Person newPerson;
          newPerson = NetCommon.XmlDeserializeMessage(typeof(Person), message) as Person;
        }
      </code>
    </example>
  </XmlDeserializeMessage>
  <XmlSerialize>
    <summary>
      Serialize an object to an XML message file. (E)
    </summary>
    <param name="type">The object type.</param>
    <param name="data">The object reference.</param>
    <param name="namespaces">The XML namespaces.</param>
    <param name="fileSpec">The output file spec.</param>
    <param name="rootName">The Root Name value.</param>
    <example>
      <code>
        using LJCNetCommon
        
        public class Person
        {
          public long Id { get; set; }
          public string Name { get; set; }
          public bool PrincipleFlag { get; set; }
        }
        
        // Serialize an object to an XML message file.
        private static void XmlSerialize()
        {
          // Setup
          var person = new Person()
          {
            Id = 2,
            Name = "Text",
            PrincipleFlag = true
          };
          string file = "Text.xml";

          // Serialize an object to an XML message file.
          NetCommon.XmlSerialize(person.GetType(), person, null, file);

          // Check the object.
          Person newPerson;
          newPerson = NetCommon.XmlDeserialize(typeof(Person), file) as Person;
        }
      </code>
    </example>
  </XmlSerialize>
  <XmlSerializeToString>
    <summary>
      Serialize an object to an XML message string. (E)
    </summary>
    <param name="type">The object type.</param>
    <param name="data">The object reference.</param>
    <param name="namespaces">The XML namespaces.</param>
    <returns>The XML message string.</returns>
    <example>
      <code>
        using LJCNetCommon;
        
        public class Person
        {
          public long Id { get; set; }
          public string Name { get; set; }
          public bool PrincipleFlag { get; set; }
        }

        // Serialize an object to an XML message string.
        private static void XmlSerializeToString()
        {
          // Serialize an object to an XML message string.
          var person = new Person()
          {
            Id = 2,
            Name = "Text",
            PrincipleFlag = true
          };
          string message = NetCommon.XmlSerializeToString(person.GetType(), person, null);

          // Check the object.
          Person newPerson;
          newPerson = NetCommon.XmlDeserializeMessage(typeof(Person), message) as Person;
        }
      </code>
    </example>
  </XmlSerializeToString>

  <!-- Configuration Functions -->
  <ConfigBool>
    <summary>
      Retrieves the Config bool value. (RE)
    </summary>
    <param name="key">The key value.</param>
    <returns>The bool config value.</returns>
    <remarks>
      <para>
        This uses the program config file which is the name of the program plus
        the extension ".config".
      </para>
      <para>
        // An example config file.&lt;br /&gt;
        &lt;&lt;span class=&quot;ltgt&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;name&quot;&gt;xml&lt;/span&gt;&lt;span
        class=&quot;attrib&quot;&gt; version&lt;/span&gt;=&quot;&lt;span class=&quot;data&quot;&gt;1.0&lt;/span&gt;&quot;&lt;span
        class=&quot;attrib&quot;&gt; encoding&lt;/span&gt;=&quot;&lt;span class=&quot;data&quot;&gt;utf-8&lt;/span&gt;&quot;&lt;span
        class=&quot;ltgt&quot;&gt; ?&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class=&quot;pad1&quot;&gt;&lt;/span&gt;&lt;&lt;span class=&quot;name&quot;&gt;appSettings&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class=&quot;pad2&quot;&gt;&lt;/span&gt;&lt;&lt;span class=&quot;name&quot;&gt;add&lt;/span&gt;&lt;span
        class=&quot;attrib&quot;&gt; key&lt;/span&gt;=&quot;&lt;span class=&quot;data&quot;&gt;LocalDbDataAccess&lt;/span&gt;&quot;&lt;span
        class=&quot;attrib&quot;&gt; value&lt;/span&gt;=&quot;&lt;span class=&quot;data&quot;&gt;true&lt;/span&gt;&quot;&lt;span
        class=&quot;ltgt&quot;&gt; /&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class=&quot;pad1&quot;&gt;&lt;/span&gt;&lt;&lt;span class=&quot;ltgt&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;name&quot;&gt;appSettings&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;&lt;span class=&quot;ltgt&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&gt;
      </para>
    </remarks>
    <example>
      <code>
        using LJCNetCommon;
        
        // This returns true.
        bool localDbAccess = NetCommon.ConfigBool("LocalDbDataAccess");
      </code>
    </example>
  </ConfigBool>
  <ConfigColor>
    <summary>
      Retrieves the Config Color value. (RE)
    </summary>
    <param name="key">The key value.</param>
    <param name="color">The default color value.</param>
    <returns>The Color setting value.</returns>
    <remarks>
      <para>
        This uses the program config file which is the name of the program plus
        the extension ".config".&lt;br /&gt;
      </para>
      <para>
        // An example config file.&lt;br /&gt;
        &lt;&lt;span class=&quot;ltgt&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;name&quot;&gt;xml&lt;/span&gt;&lt;span
        class=&quot;attrib&quot;&gt; version&lt;/span&gt;=&quot;&lt;span class=&quot;data&quot;&gt;1.0&lt;/span&gt;&quot;&lt;span
        class=&quot;attrib&quot;&gt; encoding&lt;/span&gt;=&quot;&lt;span class=&quot;data&quot;&gt;utf-8&lt;/span&gt;&quot;&lt;span
        class=&quot;ltgt&quot;&gt; ?&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class=&quot;pad1&quot;&gt;&lt;/span&gt;&lt;&lt;span class=&quot;name&quot;&gt;appSettings&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class=&quot;pad2&quot;&gt;&lt;/span&gt;&lt;&lt;span class=&quot;name&quot;&gt;add&lt;/span&gt;&lt;span
        class=&quot;attrib&quot;&gt; key&lt;/span&gt;=&quot;&lt;span class=&quot;data&quot;&gt;BeginColor&lt;/span&gt;&quot;&lt;span
        class=&quot;attrib&quot;&gt; value&lt;/span&gt;=&quot;&lt;span class=&quot;data&quot;&gt;AliceBlue&lt;/span&gt;&quot;&lt;span
        class=&quot;ltgt&quot;&gt; /&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class=&quot;pad1&quot;&gt;&lt;/span&gt;&lt;&lt;span class=&quot;ltgt&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;name&quot;&gt;appSettings&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;&lt;span class=&quot;ltgt&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&gt;
      </para>
    </remarks>
    <example>
      <code>
        using LJCNetCommon;
        
        // This returns var beginColor that is Color.AliceBlue.
        // If the key is not found it returns Color.Black.
        NetCommon.ConfigColor("BeginColor", out Color beginColor);
      </code>
    </example>
  </ConfigColor>
  <ConfigString>
    <summary>
      Retrieves the Config string value. (RE)
    </summary>
    <param name="key">The key value.</param>
    <returns>The string config value.</returns>
    <remarks>
      <para>
        This uses the program config file which is the name of the program plus
        the extension ".config".
      </para>
      <para>
        // An example config file.&lt;br /&gt;
        &lt;&lt;span class=&quot;ltgt&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;name&quot;&gt;xml&lt;/span&gt;&lt;span
        class=&quot;attrib&quot;&gt; version&lt;/span&gt;=&quot;&lt;span class=&quot;data&quot;&gt;1.0&lt;/span&gt;&quot;&lt;span
        class=&quot;attrib&quot;&gt; encoding&lt;/span&gt;=&quot;&lt;span class=&quot;data&quot;&gt;utf-8&lt;/span&gt;&quot;&lt;span
        class=&quot;ltgt&quot;&gt; ?&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class=&quot;pad1&quot;&gt;&lt;/span&gt;&lt;&lt;span class=&quot;name&quot;&gt;appSettings&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class=&quot;pad2&quot;&gt;&lt;/span&gt;&lt;&lt;span class=&quot;name&quot;&gt;add&lt;/span&gt;&lt;span
        class=&quot;attrib&quot;&gt; key&lt;/span&gt;=&quot;&lt;span class=&quot;data&quot;&gt;ConnectionType&lt;/span&gt;&quot;&lt;span
        class=&quot;attrib&quot;&gt; value&lt;/span&gt;=&quot;&lt;span class=&quot;data&quot;&gt;MySql&lt;/span&gt;&quot;&lt;span
        class=&quot;ltgt&quot;&gt; /&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class=&quot;pad1&quot;&gt;&lt;/span&gt;&lt;&lt;span class=&quot;ltgt&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;name&quot;&gt;appSettings&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;&lt;span class=&quot;ltgt&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&gt;
      </para>
    </remarks>
    <example>
      <code>
        using LJCNetCommon;
        
        // This returns "MySql".
        string dbType = NetCommon.ConfigString("ConnectionType");
      </code>
    </example>
  </ConfigString>

  <!-- Object Data Functions -->
  <GetBoolean>
    <summary>
      Gets a boolean value from an object.
    </summary>
    <param name="value">The value object.</param>
    <returns>
      The boolean value or false if the object is null.
      Also returns false if the object is not type "bool".
    </returns>
  </GetBoolean>
  <GetByte>
    <summary>
      Gets a byte value from an object.
    </summary>
    <param name="value">The value object.</param>
    <returns>
      The byte value or the byte default if the object is null.
      Also returns false if the object is not type "byte".
    </returns>
  </GetByte>
  <GetChar>
    <summary>
      Gets a byte value from an object.
    </summary>
    <param name="value">The value object.</param>
    <returns>
      The char value or the char default if the object is null.
      Also returns false if the object is not type "char".
    </returns>
  </GetChar>
  <GetDateTime>
    <summary>
      Gets a DateTime value from an object.
    </summary>
    <param name="value">The value object.</param>
    <returns>
      The DateTime value or null if the object is null.
      Also returns null if the object is not type "DateTime".
    </returns>
  </GetDateTime>
  <GetDecimal>
    <summary>
      Gets a decimal value from an object. (E)
    </summary>
    <param name="value">The value object.</param>
    <returns>
      The decimal value or zero if the object is null.
      Also returns zero if the object is not type "decimal", "long", "int"
      or "short".
    </returns>
    <example>
      <code>
        using LJCNetCommon;
        
        // Gets a decimal value from an object.
        private static void GetDecimal()
        {
          // Simulates an Object value like that received from a DataTable.
          decimal setup = 3.14m;
          object obj = setup;

          // Gets a decimal value from an object.
          decimal value = NetCommon.GetDecimal(obj);
        }
      </code>
    </example>
  </GetDecimal>
  <GetDouble>
    <summary>
      Gets a double value from an object.
    </summary>
    <param name="value">The value object.</param>
    <returns>
      The double value or zero if the object is null.
      Also returns zero if the object is not type "double", "decimal", "long"
      , "int" or "short".
    </returns>
  </GetDouble>
  <GetInt16>
    <summary>
      Gets a short value from an object. (E)
    </summary>
    <param name="value">The value object.</param>
    <returns>
      The long value or zero if the object is null.
      Also returns zero if the object is not type "short".
    </returns>
    <example>
      <code>
        using LJCNetCommon;

        // Gets a short value from an object.
        private static void GetInt16()
        {
          // Simulates an Object value like that received from a DataTable.
          short setup = 3;
          object obj = setup;

          // Gets a short value from an object.
          short value = NetCommon.GetInt16(obj);
        }
      </code>
    </example>
  </GetInt16>
  <GetInt32>
    <summary>
      Gets an integer value from an object. (E)
    </summary>
    <param name="value">The value object.</param>
    <returns>
      The integer value or zero if the object is null.
      Also returns zero if the object is not type "int" or "short".
    </returns>
    <example>
      <code>
        using LJCNetCommon;
        
        // Gets an int value from an object.
        private static void GetInt32()
        {
          // Simulates an Object value like that received from a DataTable.
          int setup = 3;
          object obj = setup;

          // Gets an int value from an object.
          int value = NetCommon.GetInt32(obj);
        }
      </code>
    </example>
  </GetInt32>
  <GetInt64>
    <summary>
      Gets a long value from an object. (E)
    </summary>
    <param name="value">The value object.</param>
    <returns>
      The long value or zero if the object is null.
      Also returns zero if the object is not type "long", "int" or "short".
    </returns>
    <example>
      <code>
        using LJCNetCommon;
        
        // Gets a long value from an object.
        private static void GetInt64()
        {
          // Simulates an Object value like that received from a DataTable.
          long setup = 3;
          object obj = setup;

          // Gets a long value from an object.
          long value = NetCommon.GetInt64(obj);
        }
      </code>
    </example>
  </GetInt64>
  <GetObject>
    <summary>
      Gets an instantiated object value.
    </summary>
    <param name="value">The value object.</param>
    <returns>The instantiated object.</returns>
  </GetObject>
  <GetSingle>
    <summary>
      Gets a float value from an object.
    </summary>
    <param name="value">The value object.</param>
    <returns>
      The single value or zero if the object is null.
      Also returns zero if the object is not type "single", "long", "int"
      or "short".
    </returns>
  </GetSingle>
  <GetString>
    <summary>
      Gets a trimmed string value from an object. (E)
    </summary>
    <param name="value">The value object.</param>
    <returns>The trimmed string value or null if the object is null.</returns>
    <example>
      <code>
        using LJCNetCommon;
        
        // Gets a trimmed string value from an object.
        private static void GetString()
        {
          // Simulates an Object value like that received from a DataTable.
          string setup = "3";
          object obj = setup;

          // Gets a string value from an object.
          string value = NetCommon.GetString(obj);
        }
      </code>
    </example>
  </GetString>
</items>
