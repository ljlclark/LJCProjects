<?xml version="1.0" encoding="utf-8" ?>
<!-- Copyright(c) Lester J. Clark and Contributors. -->
<!-- Licensed under the MIT License. -->
<!-- HTMLBuilder.xml -->
<items>
  <HTMLBuilder>
    <summary>
      Provides methods for creating HTML text.
    </summary>
    <remarks>
      The HTMLBuilder class is designed for creating HTML text. It is similar
      in principle to the StringBuilder class which is designed for creating
      strings.&lt;br /&gt;
      &lt;br /&gt;
      The HTMLBuilder class - like the StringBuilder class - stores the text
      internally. The text is retrieved with the ToString() method.&lt;br /&gt;
      &lt;br /&gt;
      The following "Append" methods are similar to StringBuilder methods:
      &lt;br /&gt;
      AddLine() - StringBuilder.AppendLine()&lt;br /&gt;
      AddText() - StringBuilder.Append()&lt;br /&gt;
      Stores text unmodified except for AddLine() which appends a newline.
      &lt;br /&gt;
      &lt;br /&gt;
      Append Text Methods&lt;br /&gt;
      Line(), Text()&lt;br /&gt;
      Stores the potentially indented and wrapped text.&lt;br /&gt;
      All "Append" methods leave the added text without an ending newline
      except for the Line() method which appends a newline. This behavior is
      done for consistency and it allows the developer to append to the
      existing text.&lt;br /&gt;
      &lt;br /&gt;
      The AddIndent() method manually controls the current indent count.
      The indent string length is calculated with the properties
      (IndentCount * IndentCharCount) and can be retrieved with the
      IndentLength property.&lt;br /&gt;
      &lt;br /&gt;
      Get Text Methods&lt;br /&gt;
      GetLine(), GetText()&lt;br /&gt;
      All "GetText" methods create and return the potentialy indented and
      wrapped text but do not add it to the builder.&lt;br /&gt;
      &lt;br /&gt;
      Append Element Methods&lt;br /&gt;
      Begin(), Create(), End()&lt;br /&gt;
      These methods append element tags and content. Begin() automatically
      increments the IndentCount by 1. Create() also increments the IndentCount
      by 1 if the isEmpty parameter is false and the close parameter is false.
      End() automatically decrements the IndentCount by 1 if the IndentCount
      is currently greater than zero.&lt;br /&gt;
      &lt;br /&gt;
      Other Append Element Methods&lt;br /&gt;
      Link(), Meta(), Metas(), Script()&lt;br /&gt;
      These methods also append elements but do not change the IndentCount
      value.&lt;br /&gt;
      &lt;br /&gt;
      Get Element Methods&lt;br /&gt;
      GetBegin(), GetCreate(), GetEnd(), GetLink(), GetMeta(), GetMetas()
      , GetScript()&lt;br /&gt;
      All "GetText" methods create and return the potentialy indented and
      wrapped text but do not add it to the builder.
    </remarks>
  </HTMLBuilder>
  <!-- Data Class Methods -->
  <ToString>
    <summary>
      Retrieves the HTML text.
    </summary>
    <returns>The HTML text.</returns>
  </ToString>
  <!-- Methods -->
  <AddIndent>
    <summary>
      Changes the IndentCount by the provided value.
    </summary>
    <param name="increment">
      The amount to increment or decrement the indent count.
    </param>
    <returns>The current indent count.</returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder();

        // Example Method:
        // The builder keeps track of the current number of indents.
        // Adds 1 indent by default.
        hb.AddIndent();

        // Adds text without modification.
        hb.AddText("This text is not indented.");

        // Starts the text with a newline if the builder already has text
        // and param allowNewLine = true and builder text does not end with
        // a newline.
        // The text begins with the current indent string if param
        // addIndent = true.
        // Defaults: addIndent = true, allowNewLine = true.
        hb.Text("This text is indented.");

        // No Indent
        var NoIndent = false;
        hb.Text("Not indented.", NoIndent);

        // Do not start a newline.
        var NoNewLine = false;
        hb.Text(" No start with newline.", NoIndent, NoNewLine);
        var result = hb.ToString();

        // result:
        // This text is not indented.
        //   This text is indented.
        // Not indented. No start with newline.
      </code>
    </example>
  </AddIndent>
  <!-- Append Text Methods (4) -->
  <AddLine>
    <summary>
      Adds a text line without modification.
    </summary>
    <param name="text">The add text.</param>
    <returns>The added text line.</returns>
    <remarks>
      AddLine() is an "Append" method. It adds the unmodified text line to the
      builder.
    </remarks>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder();

        // Example Method:
        // Adds text that ends with a newline.
        hb.AddLine("This is an appended line.");

        hb.AddText(":");
        var result = hb.ToString();

        // result:
        // This is an appended line.
        // :
      </code>
    </example>
  </AddLine>
  <AddText>
    <summary>
      Adds text without modification.
    </summary>
    <param name="text">The add text.</param>
    <returns>The added text.</returns>
    <remarks>
      AddText() is an "Append" method. It adds the unmodified text to the builder.
    </remarks>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder();

        // Example Method:
        // Adds text without modification.
        hb.AddText("This is some appended text.");
        var result = hb.ToString();

        // result:
        // This is some appended text.
      </code>
    </example>
  </AddText>
  <Line>
    <summary>
      Adds a modified text line to the builder.
    </summary>
    <param name="text">The add text.</param>
    <param name="addIndent">Indicates if the element can be indented.</param>
    <param name="allowNewLine">Indicates if a new line can be added.</param>"
    <returns>The potentially indented and wrapped new text value.</returns>
    <remarks>
      Line() is an "Append" method. It creates the text with GetText() and adds
      a new line after the text. The text is then added to the builder.
      &lt;br /&gt;
      Line() works the same as Text() except it appends a new line.
    </remarks>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder();

        hb.Text("This is an appended line.");

        // The builder keeps track of the current number of indents.
        hb.AddIndent();

        // Example Method:
        // Starts the text with a newline if the builder already has text
        // and param allowNewLine = true and builder text does not end with
        // a newline.
        // The text begins with the current indent string if param
        // addIndent = true.
        // Ends the text with a newline.
        // Defaults: addIndent = true, allowNewLine = true.
        hb.Line();

        hb.Text("This is an indented line.");
        var result = hb.ToString();

        // result:
        // This is an appended line.
        //
        //   This is an indented line.
      </code>
    </example>
  </Line>
  <Text>
    <summary>
      Adds modified text to the builder.
    </summary>
    <param name="text">The add text.</param>
    <param name="addIndent">Indicates if the element can be indented.</param>
    <param name="allowNewLine">Indicates if a new line can be added.</param>"
    <returns>The potentially indented and wrapped new text value.</returns>
    <remarks>
      Text() is an "Append" method. It creates the text with GetText() and adds
      it to the builder.&lt;br /&gt;
      Note: One should set the "addIndent" parameter to false when adding text
      to the builder after getting the text with a "GetText" method. This is
      because the the indent has already been added with the "GetText"
      method.
    </remarks>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder();

        hb.Text("This is an appended line.");

        // The builder keeps track of the current number of indents.
        hb.AddIndent();

        // Example Method:
        // Starts the text with a newline if the builder already has text
        // and param allowNewLine = true and builder text does not end with
        // a newline.
        // The text begins with the current indent string if param
        // addIndent = true.
        // Defaults: addIndent = true, allowNewLine = true.
        hb.Text("This is an indented line.");
        var result = hb.ToString();

        // result:
        // This is an appended line.
        //   This is an indented line.
      </code>
    </example>
  </Text>
  <!-- Get Text Methods (8) -->
  <EndsWithNewLine>
    <summary>
      Indicates if the builder text ends with a newline.
    </summary>
    <returns>
      true if builder text ends with a newline; otherwise false.
    </returns>
    <example>
      <code>
        var hb = new HTMLBuilder();

        bool retValue = hb.EndsWithNewLine();
        var result = retValue.ToString();

        // result:
        // False
      </code>
    </example>
  </EndsWithNewLine>
  <StartWithNewLine>
    <summary>
      Allow text to start with a newline.
    </summary>
    <param name="allowNewLine">Indicates if a new line can be added.</param>
    <returns>true if allowed to start with a newline; otherwise false.</returns>
    <example>
      <code>
        var hb = new HTMLBuilder();

        bool retValue = hb.StartWithNewLine(true);
        var result = retValue.ToString();

        // result:
        // False
      </code>
    </example>
  </StartWithNewLine>
  <GetAttribs>
    <summary>
      Gets the attributes text.
    </summary>
    <param name="htmlAttribs">The attributes collection.</param>
    <param name="textState">The current text state values.</param>"
    <returns>The attributes text.</returns>
    <remarks>
      The returned text does not end with a new line. This allows for additions
      after the text.&lt;br /&gt;
      Begin, Create and End text will start with a new line if the builder text
      already has a value.&lt;br /&gt;
    </remarks>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder(textState);

        var attribs = new Attributes()
        {
          { "class", "Selector" },
        };
        hb.Begin("div", textState, attribs);
        hb.End("div", textState);
        var result = hb.ToString();

        // result:
        // &amp;lt;div class="Selector"&amp;gt;
        // &amp;lt;div&amp;gt;
      </code>
    </example>
  </GetAttribs>
  <GetIndented>
    <summary>
      Gets a new potentially indented line.
    </summary>
    <param name="text">The add text.</param>
    <returns>The potentially indented new text value.</returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder();

        // Example Method:
        var result = hb.GetIndented("This text is NOT indented.");
        hb.AddText(result);

        // The builder keeps track of the current number of indents.
        hb.AddIndent(2);
        hb.AddLine();
        result = hb.GetIndented("This text is indented.");
        hb.AddText(result);
        result = hb.ToString();

        // result:
        // This text is NOT indented.
        //     This text is indented.
      </code>
    </example>
  </GetIndented>
  <GetIndentString>
    <summary>
      Returns the current indent string.
    </summary>
    <returns>The current indent string.</returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder();

        hb.AddIndent(1);

        // Example Method:
        var result = hb.GetIndentString();
        hb.AddText(result);

        hb.AddText(":");
        result = hb.ToString();

        // result:
        //   :
      </code>
    </example>
  </GetIndentString>
  <GetLine>
    <summary>
      Gets a modified text line.
    </summary>
    <param name="text">The text value.</param>
    <param name="addIndent">Indicates if the element can be indented.</param>
    <param name="allowNewLine">Indicates if a new line can be added.</param>
    <returns>The potentially indented and wrapped new text value.</returns>
    <remarks>
      GetLine() is a "GetString" method. It creates and returns the potentially
      indented and wrapped text. It will start the returned text with a new line
      if the builder already has text.&lt;br /&gt;
      It appends a new line to the returned text.
      The applied indent is the product of the class properties IndentCount
      and IndentCharCount. (IndentCount * IndentCharCount).&lt;br /&gt;
      The "addIndent" parameter defaults to true. Set it to false to prevent
      indenting the line further.&lt;br /&gt;
      The "allowNewLine" parameter defaults to true. Set it to false to prevent
      starting with a new line.&lt;br /&gt;
      Wraps the text with a newline if the WrapEnabled parameter is true and the
      line length is greater than LineLimit.&lt;br /&gt;
      GetLine() works the same as GetText() except it appends a new line.
    </remarks>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder();

        hb.AddText("This is an appended line.");

        // The builder keeps track of the current number of indents.
        hb.AddIndent();

        // Example Method:
        // Starts the text with a newline if the builder already has text
        // and param allowNewLine = true and builder text does not end with
        // a newline.
        // The text begins with the current indent string if param
        // addIndent = true.
        // Ends the text with a newline.
        // Defaults: addIndent = true, allowNewLine = true.
        var text = hb.GetLine();
        hb.AddText(text);

        hb.Text(":");
        var result = hb.ToString();

        // result:
        // This is an appended line.
        //
        // :
      </code>
    </example>
  </GetLine>
  <GetText>
    <summary>
      Gets potentially indented and wrapped text.
    </summary>
    <param name="text">The text value.</param>
    <param name="addIndent">Indicates if the element can be indented.</param>
    <param name="allowNewLine">Indicates if a new line can be added.</param>
    <returns>The potentially indented and wrapped new text value.</returns>
    <remarks>
      GetText() is a "GetString" method. It creates and returns the potentially
      indented and wrapped text. It will start the returned text with a new line
      if the builder already has text.&lt;br /&gt;
      The applied indent is the product of the class properties IndentCount
      and IndentCharCount. (IndentCount * IndentCharCount).&lt;br /&gt;
      The "addIndent" parameter defaults to true. Set it to false to prevent
      indenting the line further.&lt;br /&gt;
      The "allowNewLine" parameter defaults to true. Set it to false to prevent
      starting with a new line.&lt;br /&gt;
      Wraps the text with a newline if the WrapEnabled parameter is true and the
      line length is greater than LineLimit.
    </remarks>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder();

        hb.Text("This is an appended line.");

        // The builder keeps track of the current number of indents.
        hb.AddIndent();

        // Example Method:
        // Starts the text with a newline if the builder already has text
        // and param allowNewLine = true and builder text does not end with
        // a newline.
        // The text begins with the current indent string if param
        // addIndent = true.
        // Defaults: addIndent = true, allowNewLine = true.
        var text = hb.GetText("This is an indented line.");
        hb.AddText(text);
        var result = hb.ToString();

        // result:
        // This is an appended line.
        //   This is an indented line.
      </code>
    </example>
  </GetText>
  <GetWrapped>
    <summary>
      Gets added text and new wrapped line if combined line > LineLimit.
    </summary>
    <param name="text">The text value.</param>
    <returns>The potentially wrapped and indented new text value.</returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder()
        {
          WrapEnabled = true
        };

        // Example Method:
        var b = new HTMLBuilder();
        b.AddText("Now is the time for all good men to come to the aid of their");
        b.AddText(" country.");
        b.AddText(" Now is the time for all good men to come to the aid of their");
        b.AddText(" country.");
        var text = b.ToString();
        var result = hb.GetWrapped(text);

        // result:
        // Now is the time for all good men to come to the aid of
        // their country.
      </code>
    </example>
  </GetWrapped>
  <!-- Append Element Methods (7) -->
  <Begin>
    <summary>
      Appends the element begin tag.
    </summary>
    <param name="name">The element name.</param>
    <param name="textState">The current text state values.</param>"
    <param name="attribs">The element attributes.</param>
    <param name="addIndent">
      Indicates if the element can be indented.
    </param>
    <param name="childIndent">
      Indicates if the child elements should be indented.
    </param>
    <returns>The added element begin tag.</returns>
    <remarks>
      Begin() is an "Append" method. It creates the element opening tag with
      GetCreate() and adds it to the builder.
      The appended text does not end with a new line. This allows for additions
      after the text.&lt;br /&gt;
      The added text will start with a new line if the builder text already has
      a value.
    </remarks>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder(textState);

        var attribs = hb.StartAttribs();

        // Example Method:
        // Starts the text with a newline if the builder already has text
        // and param allowNewLine = true and builder text does not end with
        // a newline.
        // The text begins with the current indent string if param
        // addIndent = true.
        // Defaults: addIndent = true, allowNewLine = true.
        hb.Begin("html", textState, attribs);

        hb.End("html", textState);
        var result = hb.ToString();

        // result:
        // &amp;lt;html lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\"&amp;gt;
        // &amp;lt;/html&amp;gt;
      </code>
    </example>
  </Begin>
  <Create>
    <summary>
      Appends an element.
    </summary>
    <param name="name">The element name.</param>
    <param name="text">The element content text.</param>
    <param name="textState">The current text state values.</param>"
    <param name="htmlAttribs">The element attributes.</param>
    <param name="addIndent">
      Indicates if the element can be indented.
    </param>
    <param name="childIndent">
      Indicates if the child elements should be indented.
    </param>
    <param name="isEmpty">Indicates if an empty element.</param>
    <param name="close">Indicates if the element will be closed.</param>
    <returns>The added HTML element.</returns>
    <remarks>
      Create() is an "Append" method. It creates the element text with
      GetCreate() and adds it to the builder.
      The appended text does not end with a new line. This allows for additions
      after the text.&lt;br /&gt;
      The added text will start with a new line if the builder text already has
      a value.
    </remarks>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder(textState);

        // Example Method:
        var attribs = hb.StartAttribs();
        // Defaults: close = true.
        hb.Create("html", null, textState, attribs);
        var result = hb.ToString();

        // result:
        // &amp;lt;html lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\"&amp;gt;&amp;lt;html&amp;gt;
      </code>
    </example>
  </Create>
  <End>
    <summary>
      Appends the element end tag.
    </summary>
    <param name="name">The element name.</param>
    <param name="textState">The current text state values.</param>"
    <param name="addIndent">
      Indicates if the element can be indented.
    </param>
    <returns>The added element end tag.</returns>
    <remarks>
      End() is an "Append" method. It creates the element text with GetEnd()
      and adds it to the builder.<br />
      The appended text does not end with a new line. This allows for additions
      after the text.<br />
      The added text will start with a new line if the builder text already has
      a value.
    </remarks>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder(textState);

        // Example Method:
        var result = hb.GetEnd("html", textState);

        // result:
        // &amp;lt;/html&amp;gt;
      </code>
    </example>
  </End>
  <Link>
    <summary>
      Appends a &amp;lt;link&amp;gt; element for a style sheet.
    </summary>
    <param name="fileName">The CSS file name.</param>
    <param name="textState">The current text state values.</param>"
    <returns>The added &lt;link&gt; element.</returns>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder(textState);

        // Example Method:
        hb.Link("File.css", textState);
        var result = hb.ToString();

        // result:
        // &amp;lt;link rel="stylesheet" type="text/css" href=File.css /&amp;gt;
      </code>
    </example>
  </Link>
  <Meta>
    <summary>
      Appends a &amp;lt;meta&amp;gt; element.
    </summary>
    <param name="name">The name value.</param>
    <param name="content">The content value.</param>
    <param name="textState">The current text state values.</param>"
    <returns>The added &amp;lt;meta&amp;gt; element.</returns>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder(textState);

        // Example Method:
        var content = "width=device-width initial-scale=1";
        hb.Meta("viewport", content, textState);
        var result = hb.ToString();

        // result:
        // &amp;lt;meta name="viewport" content="width=device-width initial-scale=1" /&amp;gt;
      </code>
    </example>
  </Meta>
  <Metas>
    <summary>
      Appends common &amp;lt;meta&amp;gt; elements.
    </summary>
    <param name="author">The author.</param>
    <param name="textState">The current text state values.</param>"
    <param name="description">The description.</param>
    <param name="keywords">The keywords.</param>
    <param name="charSet">The charset value.</param>
    <returns>The added &amp;lt;meta&amp;gt; elements.</returns>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder(textState);

        // Example Method:
        hb.Metas("Mr. Smith", textState, "The Description");
        var result = hb.ToString();

        // result:
        // &amp;lt;meta charset="utf-8" /&amp;gt;
        // &amp;lt;meta name="description" content="The Description" /&amp;gt;
        // &amp;lt;meta name="author" content="Mr. Smith" /&amp;gt;
        // &amp;lt;meta name="viewport" content="width=device-width initial-scale=1" /&amp;gt;
      </code>
    </example>
  </Metas>
  <Script>
    <summary>
      Appends a &amp;lt;script&amp;gt; element.
    </summary>
    <param name="fileName">The script file name.</param>
    <param name="textState">The current text state values.</param>"
    <returns>The added &amp;lt;script&amp;gt; element.</returns>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder(textState);

        // Example Method:
        hb.Script("File.js", textState);
        var result = hb.ToString();

        // result:
        // &amp;lt;script src="File.js"&amp;gt;&amp;lt;&amp;gt;
      </code>
    </example>
  </Script>
  <!-- Get Element Methods (9) -->
  <AddChildIndent>
    <summary>
      Adds the new (child) indents.
    </summary>
    <param name="createText">The previously created text.</param>"
    <param name="textState">The TextState object.</param>
    <remarks>
      Adds an indent for following child elements.&lt;br /&gt;
      The indent will only be added if the createText length > 0 and the
      textState.ChildIndentCount > 0.
    </remarks>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        var result = CustomBegin("body", textState);

        // result:
        // &amp;lt;body&amp;gt;

        private static string CustomBegin(string name, TextState textState
          , Attributes attribs = null, bool addIndent = true
          , bool childIndent = true)
        {
          // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
          var hb = new HTMLBuilder(textState);

          var createText = hb.GetBegin(name, textState, attribs, addIndent
            , childIndent);
          // Use NoIndent after a "GetText" method.
          hb.Text(createText, NoIndent);
          // Use AddChildIndent after beginning an element.
          hb.AddChildIndent(createText, textState);
          var result = hb.ToString();

          // Append Method
          //hb.UpdateState(textState);
          return result;
        }
      </code>
    </example>
  </AddChildIndent>
  <GetBegin>
    <summary>
      Gets the element begin tag.
    </summary>
    <param name="name">The element name.</param>
    <param name="textState">The current text state values.</param>"
    <param name="htmlAttribs">The element attributes.</param>
    <param name="addIndent">
      Indicates if the element can be indented.
    </param>
    <param name="childIndent">
      Indicates if the child indent should be applied.
    </param>"
    <returns>The HTML element begin tag.</returns>
    <remarks>
      GetBegin() is an "GetText" method which creates the element opening tag
      with GetCreate() and returns the text value.&lt;br /&gt;
      Note: One should set the "addIndent" parameter to false when adding text
      to the builder after getting the text with a "GetText" method. This is
      because the the indent has already been added with the "GetText"
      method.
    </remarks>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder();

        // Example Method:
        // Starts the text with a newline if the builder already has text
        // and param allowNewLine = true and builder text does not end with
        // a newline.
        // The text begins with the current indent string if param
        // addIndent = true.
        // Defaults: addIndent = true, allowNewLine = true.
        var result = hb.GetBegin("body", textState);

        // result:
        // &amp;lt;body&amp;gt;
      </code>
    </example>
  </GetBegin>
  <GetBeginSelector>
    <summary>
      Gets beginning of style selector.
    </summary>
    <param name="selectorName">The selector name.</param>
    <param name="textState">The current text state values.</param>
    <returns>The style selector beginning.</returns>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder();

        // Example Method:
        // Starts the text with a newline if the builder already has text
        // and param allowNewLine = true and builder text does not end with
        // a newline.
        // The text begins with the current indent string if param
        // addIndent = true.
        // Defaults: addIndent = true, allowNewLine = true.
        var result = hb.GetBeginSelector("tr", textState);

        // result:
        // tr {
      </code>
    </example>
  </GetBeginSelector>
  <GetCreate>
    <summary>
      Gets an element.
    </summary>
    <param name="name">The element name.</param>
    <param name="text">The element content text.</param>
    <param name="textState">The current text state values.</param>"
    <param name="htmlAttribs">The element attributes.</param>
    <param name="addIndent">
      Indicates if the element can be indented.
    </param>
    <param name="childIndent">
      Indicates if the child indent should be applied.
    </param>"
    <param name="isEmpty">Indicates if an empty element.</param>
    <param name="close">Indicates if the element will be closed.</param>
    <returns>The HTML element.</returns>
    <remarks>
      GetCreate() is a "GetText" method which creates the element or element
      opening tag and returns the text value. It is called from other element
      create methods.&lt;br /&gt;
      The addIndent parameter defaults to true, which starts the text with the
      current indent string.&lt;br /&gt;
      The isEmpty element defaults to false, which does not add the empty
      element slash.&lt;br /&gt;
      If isEmpty is true, the empty element slash is added and the close
      parameter is ignored. The element will not include the closing tag.
      &lt;br /&gt;
      The ChildIndentCount is incremented if the element is not empty and
      not closed.
    </remarks>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder(textState);

        // Example Method:
        // Defaults: close = true.
        hb.Create("head", null, textState);
        var result = hb.ToString();

        // result:
        // &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;
      </code>
    </example>
  </GetCreate>
  <GetEnd>
    <summary>
      Gets the element end tag.
    </summary>
    <param name="name">The element name.</param>
    <param name="textState">The current text state values.</param>"
    <param name="addIndent">
      Indicates if the element can be indented.
    </param>
    <returns>The element end tag.</returns>
    <remarks>
      GetEnd() is a "GetText" method which creates the element closing tag
      and returns the text value.
    </remarks>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder(textState);

        // Example Method:
        // Defaults: close = true.
        hb.End("head", textState);
        var result = hb.ToString();

        // result:
        // &amp;lt;/head&amp;gt;
      </code>
    </example>
  </GetEnd>
  <GetLink>
    <summary>
      Gets the link element for a style sheet.
    </summary>
    <param name="fileName">The CSS file name.</param>
    <param name="textState">The current text state values.</param>"
    <returns>The &lt;link&gt; element.</returns>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder(textState);

        // Example Method:
        var result = hb.Link("File.css", textState);

        // result:
        // &amp;lt;link rel="stylesheet" type="text/css" href="File.css" /&amp;gt;
      </code>
    </example>
  </GetLink>
  <GetMeta>
    <summary>
      Gets a meta element.
    </summary>
    <param name="name">The name value.</param>
    <param name="content">The content value.</param>
    <param name="textState">The current text state values.</param>"
    <returns>The &amp;lt;meta&amp;gt; element.</returns>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder(textState);

        // Example Method:
        var content = "width=device-width initial-scale=1";
        var result = hb.Meta("viewport", content, textState);

        // result:
        // &amp;lt;meta name="viewport" content="width=device-width initial-scale=1" /&amp;gt;
      </code>
    </example>
  </GetMeta>
  <GetMetas>
    <summary>
      Gets common meta elements.
    </summary>
    <param name="author">The author.</param>
    <param name="textState">The current text state values.</param>"
    <param name="description">The description.</param>
    <param name="keywords">The keywords.</param>
    <param name="charSet">The charset value.</param>
    <returns>The &amp;lt;meta&amp;gt; elements.</returns>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder(textState);

        // Example Method:
        var result = hb.GetMetas("Mr. Smith", textState, "The Description");

        // result:
        // &amp;lt;meta charset="utf-8" /&amp;gt;
        // &amp;lt;meta name="description" content="The Description" /&amp;gt;
        // &amp;lt;meta name="author" content="Mr. Smith" /&amp;gt;
        // &amp;lt;meta name="viewport" content="width=device-width initial-scale=1" /&amp;gt;
      </code>
    </example>
  </GetMetas>
  <GetScript>
    <summary>
      Gets a &amp;lt;script&amp;gt; element.
    </summary>
    <param name="fileName"></param>
    <param name="textState">The current text state values.</param>"
    <returns>The &amp;lt;script&amp;gt; element.</returns>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder(textState);

        // Example Method:
        var result = hb.Script("File.js", textState);

        // result:
        // &amp;lt;script src="File.js"&amp;gt;&amp;lt;&amp;gt;
      </code>
    </example>
  </GetScript>
  <!-- Append HTML Methods -->
  <HTMLBegin>
    <summary>
      Creates the HTML beginning up to and including head;.
    </summary>
    <param name="textState">The current text state values.</param>
    <param name="copyright">The copyright array.</param>
    <param name="fileName">The HTML file name.</param>
    <returns>The added HTML beginning text.</returns>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder(textState);

        // Example Method:
        var copyright = new string[]
        {
          "Copyright (c) First Line",
          "Second Line",
        };
        var fileName = "File.html";
        hb.HTMLBegin(textState, copyright, fileName);
        var result = hb.ToString();

        // result:

        // result:
        // &amp;lt;!DOCTYPE html&amp;gt;
        // &amp;lt;!-- Copyright (c) First Line --&amp;gt;
        // &amp;lt;!-- Second Line --&amp;gt;
        // &amp;lt;!-- File.html --&amp;gt;
        // &amp;lt;html lang="en" xmlns="http://www.w3.org/1999/xhtml"&amp;gt;
        // &amp;lt;head&amp;gt;
      </code>
    </example>
  </HTMLBegin>
  <!-- Get HTML Methods (3) -->
  <GetHTMLBegin>
    <summary>
      Gets the HTML beginning up to and including &amp;lt;head&amp;gt;.
    </summary>
    <param name="textState">The current text state values.</param>
    <param name="copyright">The copyright array.</param>
    <param name="fileName">The HTML file name.</param>
    <returns>The HTML beginning text.</returns>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder(textState);

        // Example Method:
        var copyright = new string[]
        {
          "Copyright (c) First Line",
          "Second Line",
        };
        var fileName = "File.html";
        var result = hb.GetHTMLBegin(textState, copyright, fileName);

        // result:
        // &amp;lt;!DOCTYPE html&amp;gt;
        // &amp;lt;!-- Copyright (c) First Line --&amp;gt;
        // &amp;lt;!-- Second Line --&amp;gt;
        // &amp;lt;!-- File.html --&amp;gt;
        // &amp;lt;html lang="en" xmlns="http://www.w3.org/1999/xhtml"&amp;gt;
        // &amp;lt;head&amp;gt;
      </code>
    </example>
  </GetHTMLBegin>
  <GetHTMLEnd>
    <summary>
      Gets the HTML end &amp;lt;body&amp;gt; and &amp;lt;html&amp;gt;.
    </summary>
    <param name="textState">The current text state values.</param>
    <returns>The HTML end tags.</returns>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder(textState);

        // Example Method:
        var result = hb.GetHTMLEnd(textState);

        // result:
        // &amp;lt;/body&amp;gt;
        // &amp;lt;/html&amp;gt;
      </code>
    </example>
  </GetHTMLEnd>
  <GetHTMLHead>
    <summary>
      Gets the common HTML Head elements.
    </summary>
    <param name="textState">The current text state values.</param>"
    <param name="title">The page title.</param>
    <param name="author">The author.</param>
    <param name="description">The description.</param>
    <returns>The common HTML head elements.</returns>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder(textState);

        // Example Method:
        var title = "The Title";
        var author = "Mr. Smith";
        var description = "The Description";
        // Defaults: title = null, author = null, description = null.
        var result = hb.GetHTMLHead(textState, title, author, description);

        // result:
        // &amp;lt;title&amp;gt;The Title&amp;lt;/title&amp;gt;r
        // &amp;lt;meta name="description" content="The Description" /&amp;gt;
        // &amp;lt;meta name="author" content="Mr. Smith" /&amp;gt;
        // &amp;lt;meta name="viewport" content="width=device-width initial-scale=1" /&amp;gt;
      </code>
    </example>
  </GetHTMLHead>
  <!-- Get Element Attribs Methods (3) -->
  <Attribs>
    <summary>
      Gets common element attributes.
    </summary>
    <param name="className">The class attribute.</param>
    <param name="id">The id attribute.</param>
    <returns>The common element attributes collection.</returns>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        var hb = new HTMLBuilder(textState);

        // Example Method:
        var className = "className";
        var id = "id";
        Attributes attribs = hb.Attribs(className, id);

        // result:
        // List&amp;lt;string&amp;gt;()
        // {
        //   { "className", "id" },
        // };
      </code>
    </example>
  </Attribs>
  <StartAttribs>
    <summary>
      Creates the HTML start attributes.
    </summary>
    <returns>The HTML start attributes.</returns>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        var hb = new HTMLBuilder(textState);

        // Example Method:
        var attribs = hb.StartAttribs();

        var result = hb.GetAttribs(attribs, textState);

        // result:
        // lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml"
      </code>
    </example>
  </StartAttribs>
  <TableAttribs>
    <summary>
      Gets common table attributes.
    </summary>
    <param name="border">The border attribute.</param>
    <param name="cellSpacing">The cellspacing attribute</param>
    <param name="cellPadding">The cellpadding attribute</param>
    <param name="className">The class attribute.</param>
    <param name="id">The id attribute.</param>
    <returns>The common table attributes.</returns>
    <example>
      <code>
        // Root Method Begin
        var textState = new TextState();

        var hb = new HTMLBuilder(textState);

        // Example Method:
        var border = 1;
        var cellspacing = 2;
        var cellpadding = 3;
        // Defaults: border = 1, cellspacing = 0, cellpadding = 2.
        var attribs = hb.TableAttribs(border, cellspacing, cellpadding);

        var result = hb.GetAttribs(attribs, textState);

        // result:
        // border="1" cellspacing="2" cellpadding="3"
      </code>
    </example>
  </TableAttribs>
</items>