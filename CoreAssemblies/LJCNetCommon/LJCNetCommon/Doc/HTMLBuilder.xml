<?xml version="1.0" encoding="utf-8" ?>
<!-- Copyright(c) Lester J. Clark and Contributors. -->
<!-- Licensed under the MIT License. -->
<!-- HTMLBuilder.xml -->
<items>
  <!-- Data Class Methods 1 -->
  <ToString>
    <summary>
      Retrieves the HTML text.
    </summary>
    <returns>The HTML text.</returns>
  </ToString>
  <!-- Methods 1 -->
  <AddIndent>
    <summary>
      Changes the IndentCount by the supplied value.
    </summary>
    <param name="increment">
      The amount to increment or decrement the count.
    </param>
    <returns>The current indent count.</returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder();

        // The builder keeps track of the current number of indents.
        // Adds 1 indent by default.
        hb.AddIndent();

        // Adds text without modification.
        hb.AddText("This text is not indented.");

        // Adds a new line before adding the text if the builder
        // already has text.
        // Starts with the current indent string.
        hb.Text("This text is indented.");

        // No Indent
        var addIndent = false;
        hb.Text("Not indented.", addIndent);

        // Do not start a new line.
        hb.Text("No New Line.", allowNewLine: false);
        var result = hb.ToString();

        // result:
        // This text is not indented.
        //   This text is indented.
        // Not Indented.  No New Line
      </code>
    </example>
  </AddIndent>
  <!-- Append Text Methods (3) -->
  <AddText>
    <summary>
      Adds text without modification.
    </summary>
    <param name="text">The add text.</param>
    <remarks>
      AddText() is an "Add" method. It adds the unmodified text to the builder.
    </remarks>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder();

        // Adds text without modification.
        hb.AddText("This is some appended text.");
        var result = hb.ToString();

        // result:
        // This is some appended text.
      </code>
    </example>
  </AddText>
  <AddLine>
    <summary>
      Adds a text line without modification.
    </summary>
    <param name="text">The add text.</param>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder();

        // Adds text with a new line.
        hb.AddLine("This is an appended line.");
        var result = hb.ToString();

        // result:
        // This is an appended line.
        // "\r\n"
      </code>
    </example>
  </AddLine>
  <Line>
    <summary>
      Adds a modified text line to the builder.
    </summary>
    <param name="text">The append text.</param>
    <returns>The added text line.</returns>
    <remarks>
      Line() is an "Append" method. It creates the text with GetText() and adds
      a new line after the text. The text is then added to the builder.
      &lt;br /&lt;
      Line() works the same as Text() except it appends a new line.
    </remarks>
  </Line>
  <Text>
    <summary>
      Adds modified text to the builder.
    </summary>
    <param name="text">The append text.</param>
    <param name="addIndent">
      Indicates if the element should be indented.
    </param>
    <param name="allowNewLine"></param>"
    <returns>The added text.</returns>
    <remarks>
      Text() is an "Append" method. It creates the text with GetText() and adds
      it to the builder.&lt;br /&lt;
      Note: One should set the "addIndent" parameter to false when adding text
      to the builder after getting the text with a "GetText" method. This is
      because the the indent has already been added with the "GetText"
      method.
    </remarks>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder();

        hb.Text("This is an appended line.");

        // The builder keeps track of the current number of indents.
        hb.AddIndent();
        hb.Text("This is an indented line.");
        var result = hb.ToString();

        // result:
        // This is an appended line.
        //   This is an indented line.
      </code>
    </example>
  </Text>
  <!-- Get Text Methods (6) -->
  <GetAttribs>
    <summary>
      Gets the attributes text.
    </summary>
    <param name="htmlAttribs">The attributes collection.</param>
    <param name="textState">The current text state values.</param>"
    <remarks>
      The returned text does not end with a new line. This allows for additions
      after the text.&lt;br /&lt;
      Begin, Create and End text will start with a new line if the builder text
      already has a value.&lt;br /&lt;
    </remarks>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();
        
        var attribs = new Attributes()
        {
          { "class", "Selector" },
        };
        hb.Begin("div", null, attribs);
        hb.End("div");
        var result = hb.ToString();

        // result:
        // &amp;lt;div class="Selector"&amp;gt;
        // &amp;lt;div&amp;gt;
      </code>
    </example>
  </GetAttribs>
  <GetIndented>
    <summary>
      Gets a new line with indent.
    </summary>
    <param name="text">The append text.</param>
    <returns>The potentially indented new text value.</returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        var result = hb.GetIndented("This text is NOT indented.");

        // The builder keeps track of the current number of indents.
        hb.AddIndent(2);
        result += hb.GetIndented("This text is indented.");

        // result:
        // This text is NOT indented.
        //     This text is indented.
      </code>
    </example>
  </GetIndented>
  <GetIndentString>
    <summary>
      Returns the current indent string.
    </summary>
    <returns>The current indent string.</returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        // The builder keeps track of the current number of indents.
        hb.AddIndent(2);
        result += hb.GetIndentedString();

        // result:
        // "    "
      </code>
    </example>
  </GetIndentString>
  <GetLine>
    <summary>
      Gets a modified text line.
    </summary>
    <param name="text">The text value.</param>
    <param name="addIndent">
      Indicates if the element should be indented.
    </param>
    <param name="allowNewLine"></param>"
    <returns>The modified text line.</returns>
    <remarks>
      GetLine() is a "GetString" method. It creates and returns the potentially
      indented and wrapped text. It will start the returned text with a new line
      if the builder already has text.&lt;br /&gt;
      It appends a new line to the returned text.
      The applied indent is the product of the class properties IndentCount
      and IndentCharCount. (IndentCount * IndentCharCount).&lt;br /&gt;
      The "addIndent" parameter defaults to true. Set it to false to prevent
      indenting the line further.&lt;br /&gt;
      The "allowNewLine" parameter defaults to true. Set it to false to prevent
      starting with a new line.&lt;br /&gt;
      Wraps the text with a newline if the WrapEnabled parameter is true and the
      line length is greater than LineLimit.&lt;br /&gt;
      GetLine() works the same as GetText() except it appends a new line.
    </remarks>
  </GetLine>
  <GetText>
    <summary>
      Gets potentially indented and wrapped text.
    </summary>
    <param name="text">The text value.</param>
    <param name="addIndent">
      Indicates if the element should be indented.
    </param>
    <param name="allowNewLine"></param>"
    <returns>The modified text.</returns>
    <remarks>
      GetText() is a "GetString" method. It creates and returns the potentially
      indented and wrapped text. It will start the returned text with a new line
      if the builder already has text.&lt;br /&gt;
      The applied indent is the product of the class properties IndentCount
      and IndentCharCount. (IndentCount * IndentCharCount).&lt;br /&gt;
      The "addIndent" parameter defaults to true. Set it to false to prevent
      indenting the line further.&lt;br /&gt;
      The "allowNewLine" parameter defaults to true. Set it to false to prevent
      starting with a new line.&lt;br /&gt;
      Wraps the text with a newline if the WrapEnabled parameter is true and the
      line length is greater than LineLimit.
    </remarks>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuilder();

        var result = hb.GetText("This is an appended line.");

        // The builder keeps track of the current number of indents.
        hb.AddIndent();
        var result += hb.GetText("This is an indented line.");
        var result = hb.ToString();

        // result:
        // This is an appended line.
        //   This is an indented line.
      </code>
    </example>
  </GetText>
  <GetWrapped>
    <summary>
      Appends added text and new wrapped line if combined line > LineLimit.
    </summary>
    <param name="text">The text value.</param>
    <returns>The modified text.</returns>
  </GetWrapped>
  <!-- Append Element Methods (7) -->
  <Begin>
    <summary>
      Appends the element begin tag.
    </summary>
    <param name="name">The element name.</param>
    <param name="textState">The current text state values.</param>"
    <param name="htmlAttribs">The element attributes.</param>
    <param name="addIndent">
      Indicates if the element should be indented.
    </param>
    <param name="childIndent">
      Indicates if the child elements should be indented.
    </param>
    <returns>The added element begin tag.</returns>
    <remarks>
      Begin() is an "Append" method. It creates the element opening tag with
      GetCreate() and adds it to the builder.
      The appended text does not end with a new line. This allows for additions
      after the text.&lt;br /&gt;
      The added text will start with a new line if the builder text already has
      a value.
    </remarks>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        var attribs = new Attributes()
        {
          { "class", "Selector" },
        };
        hb.Begin("div", null, attribs);
        var result = hb.ToString();

        // result:
        // &amp;lt;div class="Selector"&amp;gt;
      </code>
    </example>
  </Begin>
  <Create>
    <summary>
      Appends an element.
    </summary>
    <param name="name">The element name.</param>
    <param name="text">The element content text.</param>
    <param name="textState">The current text state values.</param>"
    <param name="htmlAttribs">The element attributes.</param>
    <param name="addIndent">
      Indicates if the element should be indented.
    </param>
    <param name="childIndent">
      Indicates if the child elements should be indented.
    </param>
    <param name="isEmpty">Indicates if an empty element.</param>
    <param name="close">Indicates if the element will be closed.</param>
    <returns>The added HTML element.</returns>
    <remarks>
      Create() is an "Append" method. It creates the element text with
      GetCreate() and adds it to the builder.
      The appended text does not end with a new line. This allows for additions
      after the text.&lt;br /&gt;
      The added text will start with a new line if the builder text already has
      a value.
    </remarks>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        var attribs = new Attributes()
        {
          { "src", "fileName.js" },
        };
        hb.Create("script", null, attribs);
        var result = hb.ToString();

        // result:
        // &amp;lt;script src="fileName.js"&amp;gt;&amp;lt;&amp;gt;
      </code>
    </example>
  </Create>
  <End>
    <summary>
      Appends the element end tag.
    </summary>
    <param name="name">The element name.</param>
    <param name="textState">The current text state values.</param>"
    <param name="addIndent">
      Indicates if the element should be indented.
    </param>
    <returns>The added element end tag.</returns>
    <remarks>
      End() is an "Append" method. It creates the element text with GetEnd()
      and adds it to the builder.<br />
      The appended text does not end with a new line. This allows for additions
      after the text.<br />
      The added text will start with a new line if the builder text already has
      a value.
    </remarks>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        var attribs = new Attributes()
        {
          { "class", "Selector" },
        };
        hb.Begin("div", null, attribs);
        hb.End("div");
        var result = hb.ToString();

        // result:
        // &amp;lt;div class="Selector"&amp;gt;
        // &amp;lt;/div&amp;gt;
      </code>
    </example>
  </End>
  <Link>
    <summary>
      Appends a &amp;lt;link&amp;gt; element for a style sheet.
    </summary>
    <param name="fileName"></param>
    <param name="textState">The current text state values.</param>"
    <returns></returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        hb.Link("fileName.css");
        var result = hb.ToString();

        // result:
        // &amp;lt;link rel="stylesheet" type="text/css" href=fileName.css /&amp;gt;
      </code>
    </example>
  </Link>
  <Meta>
    <summary>
      Appends a &amp;lt;meta&amp;gt; element.
    </summary>
    <param name="name"></param>
    <param name="content"></param>
    <param name="textState">The current text state values.</param>"
    <returns></returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        var attribs = new Attributes()
        {
          { "charset", "utf-8" }
        };
        hb.Create("meta", htmlAttribs: attribs, isEmpty: true); 
        hb.Meta("description", "Metas");
        hb.Meta("author", "Author");
        var result = hb.ToString();

        // result:
        // &amp;lt;meta charset="utf-8"  /&amp;gt;
        // &amp;lt;meta name="description" content="Metas"  /&amp;gt;
        // &amp;lt;meta name="author" content="Author"  /&amp;gt;
      </code>
    </example>
  </Meta>
  <Metas>
    <summary>
      Appends common &amp;lt;meta&amp;rt; elements.
    </summary>
    <param name="author"></param>
    <param name="textState">The current text state values.</param>"
    <param name="description"></param>
    <param name="keywords"></param>
    <param name="charSet"></param>
    <returns></returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        hb.Metas("Author", null, "Metas", );
        var result = hb.ToString();

        // result:
        // &amp;lt;meta charset="utf-8"  /&amp;gt;
        // &amp;lt;meta name="description" content="Metas"  /&amp;gt;
        // &amp;lt;meta name="author" content="Author"  /&amp;gt;
      </code>
    </example>
  </Metas>
  <Script>
    <summary>
      Appends a &amp;lt;script&amp;gt; element.
    </summary>
    <param name="fileName"></param>
    <param name="textState">The current text state values.</param>"
    <returns></returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        hb.Script("fileName.js");
        var result = hb.ToString();

        // result:
        // &amp;lt;script src="fileName.js"&amp;gt;&amp;lt;&amp;gt;
      </code>
    </example>
  </Script>
  <!-- Get Element Methods (6) -->
  <AddChildIndent>
    <summary>
      Adds the new (child) indents.
    </summary>
    <param name="createText"></param>"
    <param name="textState">The TextState object.</param>
  </AddChildIndent>
  <GetBegin>
    <summary>
      Gets the element begin tag.
    </summary>
    <param name="name">The element name.</param>
    <param name="textState">The current text state values.</param>"
    <param name="htmlAttribs">The element attributes.</param>
    <param name="addIndent">
      Indicates if the element should be indented.
    </param>
    <param name="childIndent"></param>"
    <returns>The HTML element begin tag.</returns>
    <remarks>
      GetBegin() is an "GetText" method which creates the element opening tag
      with GetCreate() and returns the text value.<br />
      Note: One should set the "addIndent" parameter to false when adding text
      to the builder after getting the text with a "GetText" method. This is
      because the the indent has already been added with the "GetText"
      method.
    </remarks>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        var result = hb.GetBegin("head");

        // result:
        // &amp;lt;head&amp;gt;
      </code>
    </example>
  </GetBegin>
  <GetBeginSelector>
    <summary>
      Gets beginning of style selector.
    </summary>
    <param name="selectorName">The selector name.</param>
    <param name="textState">The current text state values.</param>
    <returns>The style selector beginning.</returns>
  </GetBeginSelector>
  <GetCreate>
    <summary>
      Gets an element.
    </summary>
    <param name="name">The element name.</param>
    <param name="text">The element content text.</param>
    <param name="textState">The current text state values.</param>"
    <param name="htmlAttribs">The element attributes.</param>
    <param name="addIndent">
      Indicates if the element should be indented.
    </param>
    <param name="childIndent"></param>"
    <param name="isEmpty">Indicates if an empty element.</param>
    <param name="close">Indicates if the element will be closed.</param>
    <returns>The HTML element.</returns>
    <remarks>
      GetCreate() is a "GetText" method which creates the element or element
      opening tag and returns the text value. It is called from other element
      create methods.&lt;br /&gt;
      The addIndent parameter defaults to true, which starts the text with the
      current indent string.&lt;br /&gt;
      The isEmpty element defaults to false, which does not add the empty
      element slash.&lt;br /&gt;
      If isEmpty is true, the empty element slash is added and the close
      parameter is ignored. The element will not include the closing tag.
      &lt;br /&gt;
      The ChildIndentCount is incremented if the element is not empty and
      not closed.
    </remarks>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        var result = hb.GetCreate("head");
        result += hb.GetEnd("head");

        // result:
        // &amp;lt;head&amp;gt;
        // &amp;lt;/head&amp;gt;
      </code>
    </example>
  </GetCreate>
  <GetEnd>
    <summary>
      Gets the element end tag.
    </summary>
    <param name="name">The element name.</param>
    <param name="textState">The current text state values.</param>"
    <param name="addIndent">
      Indicates if the element should be indented.
    </param>
    <returns>The element end tag.</returns>
    <remarks>
      GetEnd() is a "GetText" method which creates the element closing tag
      and returns the text value.
    </remarks>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        var result = hb.GetCreate("head");
        result += hb.GetEnd("head");

        // result:
        // &amp;lt;head&amp;gt;
        // &amp;lt;/head&amp;gt;
      </code>
    </example>
  </GetEnd>
  <GetLink>
    <summary>
      Gets the link element for a style sheet.
    </summary>
    <param name="fileName"></param>
    <param name="textState">The current text state values.</param>"
    <returns></returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        var result = hb.GetLink("fileName.css");

        // result:
        // &amp;lt;link rel="stylesheet" type="text/css" href=fileName.css /&amp;gt;
      </code>
    </example>
  </GetLink>
  <GetMeta>
    <summary>
      Gets a meta element.
    </summary>
    <param name="name"></param>
    <param name="content"></param>
    <param name="textState">The current text state values.</param>"
    <returns></returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        var result = hb.GetMeta("description", "Metas");

        // result:
        // &amp;lt;meta name="description" content="Metas"  /&amp;gt;
      </code>
    </example>
  </GetMeta>
  <GetMetas>
    <summary>
      Gets common meta elements.
    </summary>
    <param name="author"></param>
    <param name="textState">The current text state values.</param>"
    <param name="description"></param>
    <param name="keywords"></param>
    <param name="charSet"></param>
    <returns></returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        var result = hb.GetMetas("Author", null, "Metas", );

        // result:
        // &amp;lt;meta name="description" content="Metas"  /&amp;gt;
        // &amp;lt;meta name="author" content="Author"  /&amp;gt;
      </code>
    </example>
  </GetMetas>
  <GetScript>
    <summary>
      Gets a &amp;lt;script&amp;gt; element.
    </summary>
    <param name="fileName"></param>
    <param name="textState">The current text state values.</param>"
    <returns></returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        var result = hb.GetScript("fileName.js");

        // result:
        // &amp;lt;script src="fileName.js"&amp;gt;&amp;lt;&amp;gt;
      </code>
    </example>
  </GetScript>
  <!-- Append HTML Methods -->
  <HTMLBegin>
    <summary>
      Creates the HTML beginning up to and including head;.
    </summary>
    <param name="textState"></param>"
    <param name="copyright"></param>
    <param name="fileName"></param>
    <returns></returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        var copyright = new string[]
        {
          "Copyright Line 1",
          "Copyright Line 2",
        };
        hb.HTMLBegin(null, copyright, "fileName.html");
        var result = hb.ToString();

        // result:
        // &amp;lt;!DOCTYPE html&amp;gt;
        // &amp;lt;!-- Copyright Line 1 --&amp;gt;
        // &amp;lt;!-- Copyright Line 1 --&amp;gt;
        // &amp;lt;!-- fileName.html --&amp;gt;
        // &amp;lt;html lang="en" xmlns="http://www.w3.org/1999/xhtml"&amp;gt;
        // &amp;lt;head&amp;gt;
      </code>
    </example>
  </HTMLBegin>
  <!-- Get HTML Methods (2) -->
  <GetHTMLBegin>
    <summary>
      Gets the HTML beginning up to and including &amp;lt;head&amp;gt;.
  </summary>
    <param name="textState"></param>"
    <param name="copyright"></param>
    <param name="fileName"></param>
    <returns></returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        var copyright = new string[]
        {
          "Copyright Line 1",
          "Copyright Line 2",
        };
        var result = hb.GetHTMLBegin(null, copyright, "fileName.html");

        // result:
        // &amp;lt;!DOCTYPE html&amp;gt;
        // &amp;lt;!-- Copyright Line 1 --&amp;gt;
        // &amp;lt;!-- Copyright Line 1 --&amp;gt;
        // &amp;lt;!-- fileName.html --&amp;gt;
        // &amp;lt;html lang="en" xmlns="http://www.w3.org/1999/xhtml"&amp;gt;
        // &amp;lt;head&amp;gt;
      </code>
    </example>
  </GetHTMLBegin>
  <GetHTMLEnd>
    <summary>
      Gets the HTML end &amp;lt;body&amp;gt; and &amp;lt;html&amp;gt;.
    </summary>
    <param name="textState"></param>
    <returns></returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        var result = hb.GetHTMLEnd();

        // result:
        // &amp;lt;/body&amp;gt;
        // &amp;lt;/html&amp;gt;
      </code>
    </example>
  </GetHTMLEnd>
  <!-- Get Element Attribs Methods (3) -->
  <Attribs>
    <summary>
      Gets common element attributes.
    </summary>
    <param name="className">The class attribute.</param>
    <param name="id">The id attribute.</param>
    <returns>The common element attributes collection.</returns>
  </Attribs>
  <StartAttribs>
    <summary>
      Creates the HTML start attributes.
    </summary>
    <returns>The HTML start attributes.</returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        var result = hb.StartAttribs();

        // result:
        var result = new Attributes()
        {
          { "lang", "en" },
          { "xmlns", "http://www.w3.org/1999/xhtml" },
        };
      </code>
    </example>
  </StartAttribs>
  <TableAttribs>
    <summary>
      Gets common table attributes.
    </summary>
    <param name="border">The border attribute.</param>
    <param name="cellSpacing">The cellspacing attribute</param>
    <param name="cellPadding">The cellpadding attribute</param>
    <param name="className">The class attribute.</param>
    <param name="id">The id attribute.</param>
    <returns>The common table attributes.</returns>
    <example>
      <code>
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        var hb = new HTMLBuider();

        var result = hb.TableAttribs();

        // result:
        var result = new Attributes()
        {
          { "border", "1" },
          { "cellspacing", "0" },
          { "cellpadding", "2" },
        };
      </code>
    </example>
  </TableAttribs>
</items>