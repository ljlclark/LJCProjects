<?xml version="1.0" encoding="utf-8" ?>
<!-- Copyright(c) Lester J. Clark and Contributors. -->
<!-- Licensed under the MIT License. -->
<!-- DbFilters.xml -->
<items>
  <DbFilters>
    <summary>
      Represents a collection of
      &lt;span class="userType"&gt;DbFilter&lt;/span&gt; objects.
      (E)
    </summary>
    <remarks>
      <para>
        The common collection static methods are: HasItems(),
        SQLSoundexFilters() and SoundexFilters().
        &lt;br /&gt;
        The collection contains a copy constructor.&lt;br /&gt;
        The common collection instance methods are: Add() + 1 overload
        and Clone().
      </para>
    </remarks>
    <example>
      <code>
        using LJCDBMessage;
      
        // Create the Conditions collection and Condition objects.
        DbConditions dbConditions = new DbConditions();
        DbCondition dbCondition = new DbCondition()
        {
          FirstValue = "Name",
          ComparisonOperator = "=",
          SecondValue = "John"
        };
        dbConditions.Add(dbCondition);
      
        // Create the ConditionSet and add the Conditions collection.
        DbConditionSet dbConditionSet = new DbConditionSet()
        {
          // The boolean operator is added before each condition except the first.
          BooleanOperator = "and",
          Conditions = dbConditions
        };
      
        // Create the Filter and add the ConditionSet.
        DbFilter dbFilter = new DbFilter()
        {
          Name = "Main Filter",
      
          // The boolean operator is added before each filter except the first.
          BooleanOperator = "and",
          ConditionSet = dbConditionSet
        };
      
        // Create the Filters collection and add the Filter.
        DbFilters dbFilters = new DbFilters();
        dbFilters.Add(dbFilter);
      
        // Shortcut using object initialization, only required values and defaults.
        DbFilter dbFilter = new DbFilter();
        DbConditions conditions = dbFilter.ConditionSet.Conditions;
        conditions.Add("FirstName", "'John'");
        conditions.Add("LastName", "'Smith'");
        DbFilters dbFilters = new DbFilters
        {
          dbFilter
        };
      
        // The Data Service creates the following SQL from this request which.
        // includes the DbFilters object.
        DbRequest dbRequest = new DbRequest("Select", "Person")
        {
          DataConfigName = "PersonData",
          Columns = new DbColumns() { {"Name" }},
          Filters = dbFilters
        };
      
        // select
        //  [Person].[Name]
        // from [Person]
        // where ((FirstName = 'John' and LastName = 'Smith'))
      
        // Adding an "or" filter.
        DbFilter secondFilter = new DbFilter
        {
          BooleanOperator = "or"
        };
        DbConditions secondConditions = secondFilter.ConditionSet.Conditions;
        secondConditions.Add("Street", "'Somewhere%'", "like");
        dbFilters.Add(secondFilter);
      
        // where ((FirstName = 'John' and LastName = 'Smith'))
        //  or ((Street like 'Somewhere%'))
      
        // If the second filter is incuded inside the first as in the following
        // example,then the second filter conditions are grouped with the first
        // filter conditions.
        dbFilter.Filters.Add(secondFilter);
      
        // where ((FirstName = 'John' and LastName = 'Smith')
        //  or (Street like 'Somewhere%'))
      </code>
    </example>
  </DbFilters>
  
  <!-- Static Ffunctions -->
  <SQLSoundexFilters>
    <summary>
      Creates the SQL Soundex filters from the supplied values.
    </summary>
    <param name="columnName">The Search column name.</param>
    <param name="searchValue">The Search value.</param>
    <param name="soundexColumn">The SQL Soundex column name.</param>
    <returns>The filters object.</returns>
  </SQLSoundexFilters>
  <SoundexFilters>
    <summary>
      Creates the Soundex filters from the supplied values.
    </summary>
    <param name="lColumnName">The Letter Soundex column name.</param>
    <param name="lSearchValue">The Letter Search value.</param>
    <param name="pColumnName">The Phonetic Soundex column name.</param>
    <param name="pSearchValue">The Phonetic Search value.</param>
    <returns>The filters object.</returns>
  </SoundexFilters>
  
  <!-- Constructors -->
  <DbFiltersC>
    <summary>
      Initializes an object instance.
    </summary>
  </DbFiltersC>
  
  <!-- Collection Methods -->
  <Add1>
    <summary>
      Creates and adds the element from the supplied values.
    </summary>
    <param name="filterBooleanOperator"> The filter boolean operator.</param>
    <param name="conditionSetBooleanOperator">The condition set boolean operator</param>
    <param name="name">The filter name.</param>
    <returns>The filter DbConditions object.</returns>
  </Add1>
  <Add2>
    <summary>
      Creates and adds the element from the supplied values.
    </summary>
    <param name="name">The filter name.</param>
    <param name="dbConditionSet">The filter conditions.</param>
    <param name="dbFilters">The contained filters</param>
    <param name="booleanOperator">The filter boolean operator.</param>
    <returns></returns>
  </Add2>
</items>
