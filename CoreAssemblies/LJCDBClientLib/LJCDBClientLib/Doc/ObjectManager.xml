<?xml version="1.0" encoding="utf-8" ?>
<!-- Copyright(c) Lester J. Clark and Contributors. -->
<!-- Licensed under the MIT License. -->
<!-- ObjectManager.xml -->
<items>
  <ObjectManager>
    <summary>
      Provides object specific data methods.
      (RE)
    </summary>
    <typeparam name="TData">The data object type.</typeparam>
    <typeparam name="TList">The collection type.</typeparam>
    <remarks>
      <para>
        The Object Manager is a generic class that is used by a client application
        to interface with the contained
        &lt;span class="userType"&gt;DataManager&lt;/span&gt;
        object.
      </para>
      <para>
        The Object Manager converts the Result XML message data into client Data
        objects. The Data object property names must match those in the Data
        Definition.
      </para>
      <para>
        The &lt;span class="commonType"&gt;Add()&lt;/span&gt;,
        &lt;span class="commonType"&gt;Delete()&lt;/span&gt;,
        &lt;span class="commonType"&gt;Load()&lt;/span&gt;,
        &lt;span class="commonType"&gt;Retrieve()&lt;/span&gt; and
        &lt;span class="commonType"&gt;Update()&lt;/span&gt;
        methods take a client Data object as a parameter. They access properties
        in the Data object using reflection.
      </para>
      <para>
        &lt;span class="commonType"&gt;The CreateCollection()&lt;/span&gt; and
        &lt;span class="commonType"&gt;CreateData()&lt;/span&gt;
        methods use reflection to populate client Data objects with the result
        data.
      </para>
      <para>
        The test code is found in project LJCDBClientLib\TestObjectManager and
        LJCDataManagerTest.
      </para>
    </remarks>
    <example>
      <code>
        IF NOT EXISTS(SELECT* FROM INFORMATION_SCHEMA.TABLES
         WHERE TABLE_NAME = N'PersonTest')
        BEGIN
        CREATE TABLE[dbo].[PersonTest]
        (
          [Id][int] IDENTITY(1,1) NOT NULL,
          [Name] [nvarchar] (60) NULL,
          [PrincipleFlag] [bit] NOT NULL,
          CONSTRAINT[PK_PersonTest]
          PRIMARY KEY CLUSTERED(
          [Id] ASC),
        )
        END
        GO

        using System;
        using System.Collections.Generic;
        using System.Data.Common;
        using System.Text;
        using LJCDBClientLib;
        using LJCDBMessage;
        using LJCDBDataAccessLib;
        using LJCDBServiceLib;

        // A Person Data Record class.
        public class Person
        {
          public Int32 ID { get; set; }
          public string Name { get; set; }
          public bool PrincipleFlag { get; set; }
        }

        // A collection of Person records.
        public class Persons : List&lt;Person&gt; { }

        // Test ObjectManager.
        public static void TestObjectDataAccess()
        {
          DbConnectionStringBuilder connectionBuilder;
          DbDataAccess dbDataAccess;

          string databaseName = "DatabaseName";
          connectionBuilder = new DbConnectionStringBuilder()
          {
            { "Data Source", "DataServiceName" },
            { "Initial Catalog", databaseName },
            { "Integrated Security", "True" }
          };
          string connectionString = connectionBuilder.ConnectionString;
          string providerName = "System.Data.SqlClient";
          dbDataAccess = new DbDataAccess(connectionString, providerName
            , databaseName);

          // Create the Data Access object for the desired communication type.
          //string endPointConfigurationName = "NetTcpBinding_IDbService";
          DbServiceRef dbServiceRef = new DbServiceRef()
          {
            // Direct Message Data Access communication.
            DbDataAccess = dbDataAccess,

            // Direct Database Service.
            //DbService = new DbService(),

            // Remote Database Service with Client Proxy.
            //DbServiceClient = new DbServiceClient(endPointConfigurationName)
          };
          
          // Create the ObjectManager.
          //  - Creates the DataDefinition object.
          //  - Creates the DbRequest object with all data and key columns.
          //  - Sets and returns the database assigned values.
          ObjectManager&lt;Person, Persons&gt; personManager;
          personManager = new ObjectManager&lt;Person, Persons&gt;(dbServiceRef, null
            , "PersonTest");
            
          if (personManager.IsSuccess)
          {
            // Map table names with property names or captions
            // that differ from the column names.
            personManager.MapNames("Id", "ID");

            // Create the list of database assigned columns.
            // And make sure the AutoIncrement value is set.
            personManager.DbAssignedColumnNames = new string[]
            {
              "Id"
            };

            // Create the list of lookup column names.
            // This list must include the database assigned columns.
            personManager.LookupColumnNames = new string[]
            {
              "Id",
              "Name"
            };

            Persons persons = Load(personManager);
            Add(personManager);
            Person person = Retrieve(personManager);
            persons = Load(personManager);
            Update(personManager);
            persons = Load(personManager);
            Delete(personManager);
            persons = Load(personManager);

            Add(personManager);
            person = RetrieveClientSql(personManager);
            persons = LoadClientSql(personManager);
            ExecuteClientSql(personManager);
            persons = LoadClientSql(personManager);
          }
        }
      </code>
    </example>
  </ObjectManager>
  <ObjectManagerC>
    <summary>
      Initializes an object instance.
    </summary>
    <param name="dbServiceRef">The database service reference object.</param>
    <param name="dataConfigName">The data configuration name.</param>
    <param name="tableName">The database table name.</param>
    <param name="schemaName">The schema name.</param>
  </ObjectManagerC>
  <!-- Public Data Methods -->
  <Add>
    <summary>
      Adds a record to the database.
      (E)
    </summary>
    <param name="dataObject">The record object.</param>
    <param name="propertyNames">The included column property names.</param>
    <returns>The object with the DB assigned key values.</returns>
    <example>
      <code>
        // Adds a Person record.
        private static void Add(ObjectManager&lt;Person, Persons&gt; personManager)
        {
          // The inserted columns must not include the DB assigned columns.
          Person dataObject = new Person()
          {
            Name = "TestName",
            PrincipleFlag = false
          };

          // Insert record and return the database assigned values.
          Person resultPerson = personManager.Add(dataObject);
          if (resultPerson != null)
          {
            dataObject.ID = resultPerson.ID;
          }
        }
      </code>
    </example>
  </Add>
  <CreateLoadRequest>
    <summary>
      Creates and returns the Load DbRequest object.
    </summary>
    <param name="keyColumns">The record containing the key field values.</param>
    <param name="propertyNames">The incuded column property names.</param>
    <param name="filters">The filter values.</param>
    <param name="joins">The join values.</param>
    <returns>The DbRequest object.</returns>
  </CreateLoadRequest>
  <Delete>
    <summary>
      Deletes the records with the specified key values.
      (E)
    </summary>
    <param name="keyColumns">The record containing the key field values.</param>
    <param name="filters">The filter values.</param>
    <example>
      <code>
        // Deletes a record.
        private static void Delete(ObjectManager&lt;Person, Persons&gt; personManager)
        {
          // Create Key Columns.
          var keyColumns = new DbColumns()
          {
            Name = "TestNameUpdated"
          };

          // Delete the record.
          personManager.Delete(keyColumns);
        }
      </code>
    </example>
  </Delete>
  <ExecuteClientSql>
    <summary>
      Executes a non-query client SQL statement.
      (E)
    </summary>
    <param name="sql">The client SQL statement.</param>
    <example>
      <code>
        // Executes a non-query SQL statement.
        private static void ExecuteClientSql(ObjectManager&lt;Person, Persons&gt; personManager)
        {
          StringBuilder builder = new StringBuilder(64);
          builder.AppendLine("update PersonTest");
          builder.AppendLine("set Name = 'TestNameUpdated'");
          builder.AppendLine("where Name = 'TestName'");
          string sql = builder.ToString();

          // Update the record.
          personManager.ExecuteClientSql(sql);
        }
      </code>
    </example>
  </ExecuteClientSql>
  <ExecuteRequest>
    <summary>
      Execute the supplied request.
    </summary>
    <param name="dbRequest">The request object.</param>
    <returns>The result object.</returns>
  </ExecuteRequest>
  <Load>
    <summary>
      Retrieves a collection of data records.
      (E)
    </summary>
    <param name="keyColumns">The record containing the key field values.</param>
    <param name="propertyNames">The incuded column property names.</param>
    <param name="filters">The filter values.</param>
    <param name="joins">The join values.</param>
    <returns>The data record collection.</returns>
    <example>
      <code>
        // Loads multiple Person objects.
        private static Persons Load(ObjectManager&lt;Person, Persons&gt; personManager)
        {
          Persons retValue;

          // Create Key Columns.
          var keyColumns = new DBColumns()
          {
            Name = "TestName"
          };

          // Load the records.
          retValue = personManager.Load(keyColumns);
          return retValue;
        }
      </code>
    </example>
  </Load>
  <LoadClientSql>
    <summary>
      Executes a "Load" client SQL statement.
      (E)
    </summary>
    <param name="sql">The client SQL statement.</param>
    <returns>The data record collection.</returns>
    <example>
      <code>
        // Selects multiple records with an SQL statement.
        private static void LoadClientSql(ObjectManager&lt;Person, Persons&gt; personManager)
        {
          Persons retValue = null;

          StringBuilder builder = new StringBuilder(64);
          builder.AppendLine("select * from PersonTest");
          string sql = builder.ToString();

          // Load the records.
          retValue = personManager.LoadClientSql(sql);
          return retValue;
        }
      </code>
    </example>
  </LoadClientSql>
  <LoadProcedure>
    <summary>
      Retrieves a collection of data records.
    </summary>
    <param name="procedureName">The Procedure name.</param>
    <param name="parameters">The Procedure Parameters.</param>
    <param name="joins">The join values.</param>
    <returns>The data object.</returns>
  </LoadProcedure>
  <Retrieve>
    <summary>
      Retrieves a record from the database.
      (E)
    </summary>
    <param name="keyColumns">The record containing the key field values.</param>
    <param name="propertyNames">The incuded column property names.</param>
    <param name="filters">The filter values.</param>
    <param name="joins">The join values.</param>
    <returns>The data object.</returns>
    <example>
      <code>
        // Retrieves a Person record.
        private static Person Retrieve(ObjectManager&lt;Person, Persons&gt; personManager)
        {
          Person retValue;

          // Create Key Columns.
          var keyColumns = new DbColumns()
          {
            Name = "TestName"
          };

          // Retrieve the record.
          retValue = personManager.Retrieve(keyColumns);
          return retValue;
        }
      </code>
    </example>
  </Retrieve>
  <RetrieveClientSql>
    <summary>
      Executes a "Retrieve" client SQL statement.
      (E)
    </summary>
    <param name="sql">The client SQL statement.</param>
    <returns>The data object.</returns>
    <example>
      <code>
        // Selects a record with an SQL statement.
        private static void RetrieveClientSql(ObjectManager&lt;Person, Persons&gt; personManager)
        {
          Person retValue = null;

          StringBuilder builder = new StringBuilder(64);
          builder.AppendLine("select * from PersonTest");
          builder.AppendLine("where Name = 'TestName'");
          string sql = builder.ToString();

          retValue = personManager.RetrieveClientSql(sql);
          return retValue;
        }
      </code>
    </example>
  </RetrieveClientSql>
  <Update>
    <summary>
      Updates the record.
      (E)
    </summary>
    <param name="dataObject">The record object.</param>
    <param name="keyColumns">The record containing the key field values.</param>
    <param name="propertyNames">The incuded column property names.</param>
    <param name="filters">The filter values.</param>
    <example>
      <code>
        // Updates a record.
        private static void Update(ObjectManager&lt;Person, Persons&gt; personManager)
        {
          // Create the list of included columns.
          // This list must not include the DB assigned columns
          // or the database assigned columns must have the AutoIncrement
          // value set to "true".
          List&lt;string&gt; columnNames = new List&lt;string&gt;() { "Name" };

          Person dataObject = new Person()
          {
            Name = "TestNameUpdated"
          };

          // Create Key Columns.
          var keyColumns = new DbColumns()
          {
            Name = "TestName"
          };

          // Update the record.
          personManager.Update(dataObject, keyColumns, columnNames);
        }
      </code>
    </example>
  </Update>
  <!-- Other Public Methods -->
  <GetColumns>
    <summary>
      Creates a set of columns that match the supplied list.
    </summary>
    <param name="propertyNames">The column property names.</param>
    <returns>The created object.</returns>
  </GetColumns>
  <MapNames>
    <summary>
      Maps the column property and rename values.
    </summary>
    <param name="columnName">The database column name.</param>
    <param name="propertyName">The Data Record property name.</param>
    <param name="renameAs">The SQL query rename value.</param>
    <param name="caption">The column caption.</param>
  </MapNames>
  <!-- Create Data Methods -->
  <CreateCollection>
    <summary>
      Creates a Data Object collection from the result records.
    </summary>
    <param name="dbResult">The result object.</param>
    <returns>The data object collection.</returns>
    <remarks>
      This method is available instead of using LJC.DBMessage.ResultConverter
      because it uses the TList and TData already defined in this object.
    </remarks>
  </CreateCollection>
  <CreateData>
    <summary>
      Creates a Data Object from the result record.
    </summary>
    <param name="dbValues">The DbValues object.</param>
    <returns>The Data Object.</returns>
    <remarks>
      This method is available instead of using LJC.DBMessage.ResultConverter
      because it uses the TData already defined in this object.
    </remarks>
  </CreateData>
</items>