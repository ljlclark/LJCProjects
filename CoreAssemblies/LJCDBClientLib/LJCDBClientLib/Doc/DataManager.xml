<?xml version="1.0" encoding="utf-8" ?>
<!-- Copyright(c) Lester J. Clark and Contributors. -->
<!-- Licensed under the MIT License. -->
<!-- DataManager.xml -->
<items>
  <DataManager>
    <summary>
      Provides standard message data manipulation methods.
      (DE)
    </summary>
    <remarks>
      <para>
        The Data Manager is the client code that creates a table specific
        &lt;span class="userType"&gt;LJCDBMessage.DbRequest&lt;/span&gt;
        object. It then serializes the
        &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
        object into a Request XML message to pass to the
        &lt;span class="commonType"&gt;DbService.Execute()&lt;/span&gt;
        method.
      </para>
      <para>
        The DataManager object creates the contained BaseDefinition collection
        when the DataManager is created. The BaseDefinition contains the column
        definitions for the base table. These column definitions are retrieved
        from the database.
      </para>
      <para>
        The BaseDefinition property
        is an &lt;span class="userType"&gt;LJCNetCommon.DbColumns&lt;/span&gt;
        object. Each element
        &lt;span class="userType"&gt;DbColumn&lt;/span&gt;
        contains the table ColumnName, PropertyName, Caption, DataTypeName
        and MaxLength.
      </para>
      <para>
        The &lt;span class="userType"&gt;DbColumn&lt;/span&gt;
        Caption is initially set to the same value as the ColumnName
        as that is how it is returned from ADO.NET. The PropertyName is initially
        set to the same value as the ColumnName which is what the
        &lt;span class="userType"&gt;DbColumn&lt;/span&gt;
        object does if it is initialized with a blank PropertyName value. These
        values can be modified later as required.
      </para>
      <para>
        The DataDefinition is used to create the
        &lt;span class="userType"&gt;DbColumn&lt;/span&gt;
        objects that are defined in a
        &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
        object. These objects are then used to create the SQL Statements that
        are executed to perform the requested data operation.
      </para>
      <para>
        The test code is found in project LJCDataManagerTest\PersonDALTest.
      </para>
    </remarks>
    <example>
      <para>
        This is sample supporting code for a Person Manager class. The
        additional code for the suggested Person manager methods Add(),
        Retrieve(), Load(), Update() and Delete() is listed under the
        DataManager methods with the same names.
      </para>
      <code>        using System;
        using System.Collections.Generic;
        using LJCNetCommon;
        using LJCDBClientLib;
        using LJCDBServiceLib;

        /// &lt;summary&gt;
        /// Represents a collection of Person objects.&lt;/summary&gt;
        public class Persons : List&lt;Person&gt; { }

        /// &lt;summary&gt;
        /// A Data Record class.
        /// &lt;/summary&gt;
        public class Person
        {
          /// &lt;summary&gt;Gets or sets the PersonId value.
          /// &lt;/summary&gt;
          public Int32 PersonId { get; set; }

          /// &lt;summary&gt;Gets or sets the Name value.&lt;/summary&gt;
          public String Name { get; set; }
        }

        /// &lt;summary&gt;Provides Person specific data manipulation methods.&lt;/summary&gt;
        public class PersonManager
        {
          /// &lt;summary&gt;Initializes an object instance.&lt;/summary&gt;
          /// &lt;param name="dbService"&gt;The database service object.&lt;/param&gt;
          public PersonManager()
          {
            DbServiceRef dbServiceRef = new DbServiceRef();
            {
              DbService = new DbService();
            };

            string dataConfigName = "PersonData";
            string tableName = "Person";
            mDataManager = new DataManager(dbServiceRef, dataConfigName, tableName);
            mDataManager.MapNames("Id", "PersonId");
          }

          // The Add(), Delete(), Load(), Retrieve() and Update() methods would go here.
          // These are listed under the DataManager methods with the same names.

          /// &lt;summary&gt;Gets or sets the non-select affected record count.&lt;/summary&gt;
          public int AffectedCount { get; set; }

          /// &lt;summary&gt;Gets a reference to the Data Definition columns collection.&lt;/summary&gt;
          public DbColumns DataDefinition
          {
            get { return mDataManager.DataDefinition; }
          }

          /// &lt;summary&gt;Gets or sets the last SQL statement.&lt;/summary&gt;
          public string SQLStatement { get; set; }

          private DataManager mDataManager;
        }

        // The DbService object retrieves the data configuration from a file named
        // "DataConfigs.xml". This file must be in the same folder as the application.
        // This is the XML file layout.
        &lt;? xml version="1.0"?&gt;
        &lt;DataConfigs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
          &lt;DataConfig&gt;
            &lt;Name&gt;PersonData&lt;/Name&gt;
            &lt;DbServer&gt;Machine_Name\SQL_Instance_Name&lt;/DbServer&gt;
            &lt;Database&gt;Database_Name&lt;/Database&gt;
            &lt;ConnectionType&gt;SQLServer&lt;/ConnectionType&gt;
          &lt;/DataConfig&gt;
        &lt;/DataConfigs&gt;
      </code>
    </example>
  </DataManager>
  
  <!-- Constructors -->
  <DataManagerC1>
    <summary>
      Initializes an object instance.
    </summary>
    <param name="dbServiceRef">The database service reference object.</param>
    <param name="dataConfigName">The data configuration name.</param>
    <param name="tableName">The database table name.</param>
    <param name="schemaName">The schema name.</param>
    <param name="useEncryption">The Encryption flag.</param>
  </DataManagerC1>
  <DataManagerC2>
    <summary>
      Initializes an object instance.
    </summary>
    <param name="dataConfigName">The data configuration name.</param>
    <param name="tableName">The database table name.</param>
    <param name="schemaName">The schema name.</param>
    <param name="useEncryption">The Encryption flag.</param>
  </DataManagerC2>
  <Reset>
    <summary>
      Resets the data access configuration.
      (R)
    </summary>
    <param name="dbServiceRef">The database service reference object.</param>
    <param name="dataConfigName">The data configuration name.</param>
    <param name="tableName">The database table name.</param>
    <param name="schemaName">The schema name.</param>
    <param name="useEncryption">The Encryption flag.</param>
    <remarks>
      <para>
        Creates the data configuration for the new table using the value from
        the DataConfigName property. The new definition is available in the
        DataDefinition property.
      </para>
    </remarks>
  </Reset>
  
  <!-- Public Data Methods -->
  <Add>
    <summary>
      Adds a record to the database.
      (RE)
    </summary>
    <param name="dataObject">The record object.</param>
    <param name="propertyNames">The included column property names.</param>
    <returns>The result object.</returns>
    <remarks>
      <para>&lt;b&gt;Parameters&lt;/b&gt;</para>
      <para>
        propertyNames&lt;br \&gt;
        This parameter defines the primary table column values that are to be
        added. If it is null, then all the primary table column values are
        added.&lt;br \&gt;
        It must not include Calculated or Join columns or it will cause an error.
      </para>
      <para>
        Creates an "Insert"
        &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
        object, which is available in the Request property. The request object is
        passed to the
        &lt;span class="commonType"&gt;ExecuteRequest()&lt;/span&gt;
        method.
      </para>
      <para>
        The Key Columns are assigned from the LookupColumnNames property.
      </para>
      <para>
        The Key Columns are those columns whose value will be used to find the
        added record. This is to return the DB Assigned column values to the
        calling program.
      </para>
      <para>
        The Key Columns must include the DB Assigned columns for the assigned
        values to be returned to the calling program. The value must be set to
        zero to prevent including it as a key value?
      </para>
      <para>
        The Lookup Retrieve call will not include keys with a value of "0".
      </para>
      <para>
        The Add Data Object property names must be the same as the Request Column
        property names to map the values into the Key Columns.
      </para>
      <para>&lt;b&gt;Method Graph&lt;/b&gt;</para>
      <para>
        All methods are in LJCDBMessage.DbCommon.
      </para>
      <para>
        RequestDataColumns(dataObject)
        &lt;div class='Text'&gt;RequestColumns(baseDefinition)&lt;/div&gt;
        &lt;div class='Text'&gt;DataColumns(dataObject)&lt;/div&gt;
        &lt;div class='Text2'&gt;CreateValueColumn(dbColumn)&lt;/div&gt;
        RequestLookupKeys(dataObject)
        &lt;div class='Text'&gt;RequestColumns(baseDefinition)&lt;/div&gt;
        &lt;div class='Text'&gt;LookupKeys(dataObject)&lt;/div&gt;
        &lt;div class='Text2'&gt;IsKeyColumn(dbColumn)&lt;/div&gt;
      </para>
    </remarks>
    <example>
      <code>
        // This is an example of the Person Manager code that would access the
        // DataManager Add() method. The supporting class code is listed at the
        // DataManager class level.
          
        using LJCNetCommon;
        using LJCDBMessage;
          
        /// &lt;summary&gt;Provides Person specific data manipulation methods.&lt;/summary&gt;
        public class PersonManager
        {
          /// &lt;summary&gt;Adds a person record to the database.&lt;/summary&gt;
          /// &lt;param name="dataObject"&gt;The data record.&lt;/param&gt;
          /// &lt;param name="propertyNames"&gt;The included column property names.&lt;/param&gt;
          /// &lt;returns&gt;A person object with the DB assigned key values.&lt;/returns&gt;
          public Person Add(Person dataObject, List&lt;string&gt; propertyNames = null)
          {
            Person retValue = null;
          
            // The database assigned column names.
            mDataManager.SetDbAssignedColumnNames(new string[]
            {
              "Id"
            });
          
            // The lookup column names to find the inserted record for
            // the Add() method to retrieve the DB assigned column values.
            mDataManager.AddLookupColumnNames(new string[]
            {
              "Name"
            });
          
            DbResult dbResult = mDataManager.Add(dataObject, propertyNames);
            AffectedCount = mDataManager.AffectedCount;
            SQLStatement = mDataManager.SQLStatement;
            if (dbResult != null &amp;&amp; dbResult.DbRecords.Count &gt; 0)
            {
              // Populate a data object with the result values.
              retValue = new Person();
              DbCommon.SetObjectValues(dbResult.DbRecords[0], retValue);
            }
          
            int personId = retValue.PersonId;
            return retValue;
          }
        }
      </code>
    </example>
  </Add>
  <Delete>
    <summary>
      Deletes the records with the specified key values.
      (DE)
    </summary>
    <param name="keyColumns">The record containing the key field values.</param>
    <param name="filters">The filter values.</param>
    <remarks>
      <para>&lt;b&gt;Parameters&lt;/b&gt;</para>
      <para>
        keyColumns&lt;br \&gt;
        This parameter defines the values to be used in the SQL where clause. It
        is only used if the 'filters' parameter is null.&lt;br \&gt;
        The values are separated with the 'AND' operator.
      </para>
      <para>
        filters&lt;br \&gt;
        This parameter defines the values to be used in the SQL where clause. If
        it is defined, then the keyColumns parameter is not used.&lt;br \&gt;
        The 'filters' object can define a complex where clause including
        combinations of 'AND' and 'OR' operators.
      </para>
      <para>
        Creates a "Delete"
        &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
        object, which is available in the Request property. The request object is
        passed to the ExecuteRequest() method.
      </para>
      <para>&lt;b&gt;Method Graph&lt;/b&gt;</para>
      <para>
        All methods are in LJCDBMessage.DbCommon.
      </para>
      <para>
        RequestKeys(keyColumns)
        &lt;div class='Text'&gt;CreateKeyColumn(keyColumn)&lt;/div&gt;
      </para>
    </remarks>
    <example>
      <code>
        // This is an example of the Person Manager code that would access the
        // DataManager Delete() method. The supporting class code is listed at
        // the DataManager class level.

        using LJCNetCommon;
        using LJCDBMessage;

        /// &lt;summary&gt;Provides Person specific data manipulation methods.&lt;/summary&gt;
        public class PersonManager
        {
          /// &lt;summary&gt;Deletes a record from the database.&lt;/summary&gt;
          /// &lt;param name="keyObject"&gt;The key record object.&lt;/param&gt;
          /// &lt;param name="filters"&gt;The filter values.&lt;/param&gt;
          public void Delete(Person keyObject, DbFilters filters = null)
          {
            mDataManager.Delete(keyObject, filters);
            AffectedCount = mDataManager.AffectedCount;
            SQLStatement = mDataManager.SQLStatement;
          }
        }
      </code>
    </example>
  </Delete>
  <ExecuteClientSql>
    <summary>
      Executes a non-query client SQL statement.
    </summary>
    <param name="requestType">The request type.</param>
    <param name="sql">The client SQL statement.</param>
    <param name="requestColumns">The request columns.</param>
    <returns>The result object.</returns>
  </ExecuteClientSql>
  <Load>
    <summary>
      Retrieves a collection of data records.
      (DE)
    </summary>
    <param name="keyColumns">The record containing the key field values.</param>
    <param name="propertyNames">The incuded column property names.</param>
    <param name="filters">The filter values.</param>
    <param name="joins">The join values.</param>
    <returns>The result object.</returns>
    <remarks>
      <para>&lt;b&gt;Parameters&lt;/b&gt;</para>
      <para>
        keyColumns&lt;br \&gt;
        This parameter defines the values to be used in the SQL where clause. It
        is only used if the 'filters' parameter is null.&lt;br \&gt;
        The values are separated with the 'AND' operator.
      </para>
      <para>
        propertyNames&lt;br \&gt;
        This parameter defines the primary table columns that are to be included
        in the request. If it is null, then all the primary table columns are
        included.&lt;br \&gt;
        It must not include Calculated or Join columns or it will cause an error.
      </para>
      <para>
        filters&lt;br \&gt;
        This parameter defines the values to be used in the SQL where clause. If
        it is defined, then the keyColumns parameter is not used.&lt;br \&gt;
        The 'filters' object can define a complex where clause including
        combinations of 'AND' and 'OR' operators.
      </para>
      <para>
        joins&lt;br \&gt;
        The 'joins' parameter defines the join tables, join on values and join
        column definitions.
      </para>
      <para>
        Creates a "Load"
        &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
        object, which is available in the Request property. The request object is
        passed to the
        &lt;span class="commonType"&gt;ExecuteRequest()&lt;/span&gt;
        method.
      </para>
      <para>
        Request Column property names and values are added to the Result Value columns.
      </para>
      <para>
        The Result Data Object property names must match the Result Value Column
        property names to map the values into the Result Data Object.
      </para>
      <para>
        Result Data Object property names that are different from the Request Column
        names can be handled by setting the Request Column Property name. The
        MapNames() method is a helper method for setting the Property name.
      </para>
      <para>&lt;b&gt;Method Graph&lt;/b&gt;</para>
      <para>
        All methods are in LJCDBMessage.DbCommon.
      </para>
      <para>
        RequestColumns(baseDefinition)&lt;br \&gt;
        RequestKeys(keyColumns)
        &lt;div class='Text'&gt;CreateKeyColumn(keyColumn)&lt;/div&gt;
      </para>
    </remarks>
    <example>
      <code>
        // This is an example of the Person Manager code that would access the
        // DataManager Load() method. The supporting class code is listed at the
        // DataManager class level.

        using LJCNetCommon;
        using LJCDBMessage;

        /// &lt;summary&gt;Provides Person specific data manipulation methods.&lt;/summary&gt;
        public class PersonManager
        {
        /// &lt;summary&gt;Retrieves a collection of Person records from the database.&lt;/summary&gt;
        /// &lt;param name="keyObject"&gt;The key record object.&lt;/param&gt;
        /// &lt;param name="propertyNames"&gt;The included column property names.&lt;/param&gt;
        /// &lt;param name="filters"&gt;The filter values.&lt;/param&gt;
        /// &lt;param name="dbJoins"&gt;The join values.&lt;/param&gt;
        /// &lt;returns&gt;The Persons collection.&lt;/returns&gt;
        public Persons Load(Person keyObject = null, List&lt;string&gt; propertyNames = null
        , DbFilters filters = null, DbJoins dbJoins = null)
        {
        Persons retValue = null;

        DbResult dbResult = mDataManager.Load(keyObject, propertyNames, filters, dbJoins);
        SQLStatement = mDataManager.SQLStatement;
        if (dbResult != null &amp;&amp; dbResult.DbRecords.Count &gt; 0)
        {
        // Populate a collection with the result records.
        retValue = CreateCollection(dbResult);
        }
        return retValue;
        }

        /// &lt;summary&gt;Creates a collection from the result object.&lt;/summary&gt;
        /// &lt;param name="dbResult"&gt;The result object.&lt;/param&gt;
        /// &lt;returns&gt;The collection.&lt;/returns&gt;
        private Persons CreateCollection(DbResult dbResult)
        {
        Persons retValue = new Persons();

        foreach (DbColumns dbColumns in dbResult.DbRecords)
        {
        Person person = new Person();
        DbCommon.SetObjectValues(dbColumns, person);
        retValue.Add(person);
        }
        return retValue;
        }
        }
      </code>
    </example>
  </Load>
  <LoadProcedure>
    <summary>
      Retrieves a collection of data records.
    </summary>
    <param name="procedureName">The Procedure name.</param>
    <param name="parameters">The Procedure Parameters.</param>
    <param name="joins">The join values.</param>
    <returns>The result object.</returns>
    <remarks>
      Creates a "SelectProcedure"
      &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
      object, which is available in the Request property. The request object is
      passed to the
      &lt;span class="commonType"&gt;ExecuteRequest()&lt;/span&gt;
      method.
    </remarks>
  </LoadProcedure>
  <Retrieve>
    <summary>
      Retrieves a record from the database.
      (DE)
    </summary>
    <param name="keyColumns">The record containing the key field values.</param>
    <param name="propertyNames">The incuded column property names.</param>
    <param name="filters">The filter values.</param>
    <param name="joins">The join values.</param>
    <returns>The result object.</returns>
    <remarks>
      <para>&lt;b&gt;Parameters&lt;/b&gt;</para>
      <para>
        keyColumns&lt;br \&gt;
        This parameter defines the values to be used in the SQL where clause. It
        is only used if the 'filters' parameter is null.&lt;br \&gt;
        The values are separated with the 'AND' operator.
      </para>
      <para>
        propertyNames&lt;br \&gt;
        This parameter defines the primary table columns that are to be included
        in the request. If it is null, then all the primary table columns are
        included.&lt;br \&gt;
        It must not include Calculated or Join columns or it will cause an error.
      </para>
      <para>
        filters&lt;br \&gt;
        This parameter defines the values to be used in the SQL where clause. If
        it is defined, then the keyColumns parameter is not used.&lt;br \&gt;
        The 'filters' object can define a complex where clause including
        combinations of 'AND' and 'OR' operators.
      </para>
      <para>
        joins&lt;br \&gt;
        The 'joins' parameter defines the join tables, join on values and join
        column definitions.
      </para>
      <para>
        Creates a "Select"
        &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
        object, which is available in the Request property. The request object is
        passed to the
        &lt;span class="commonType"&gt;ExecuteRequest()&lt;/span&gt;
        method.
      </para>
      <para>
        Request Column property names and values are added to the Result Value columns.
      </para>
      <para>
        The Result Data Object property names must match the Result Value Column
        property names to map the values into the Result Data Object.
      </para>
      <para>
        Result Data Object property names that are different from the Request Column
        names can be handled by setting the Request Column Property name. The
        MapNames() method is a helper method for setting the Property name.
      </para>
      <para>&lt;b&gt;Method Graph&lt;/b&gt;</para>
      <para>
        All methods are in LJCDBMessage.DbCommon.
      </para>
      <para>
        ResultColumns(baseDefinition)&lt;br \&gt;
        ResultKeys(keyColumns)
        &lt;div class='Text'&gt;CreateKeyColumn(keyColumn)&lt;/div&gt;
      </para>
    </remarks>
    <example>
      <code>
        // This is an example of the code to use the Person Manager Retrieve()
        // method.
        PersonManager personManager = new PersonManager();
        Person personKey = new Person()
        {
        PersonId = 1
        };
        Person person = personManager.Retrieve(personKey);

        // This is an example of the Person Manager code that would access the
        // DataManager Retrieve() method. The supporting class code is listed at
        // the DataManager class level.

        using LJCNetCommon;
        using LJCDBMessage;

        /// &lt;summary&gt;Provides Person specific data manipulation methods.&lt;/summary&gt;
        public class PersonManager
        {
        /// &lt;summary&gt;Retrieves a person record from the database.&lt;/summary&gt;
        /// &lt;param name="keyObject"&gt;The record containing the key field values.&lt;/param&gt;
        /// &lt;param name="propertyNames"&gt;The incuded column property names.&lt;/param&gt;
        /// &lt;param name="filters"&gt;The filter values.&lt;/param&gt;
        /// &lt;param name="dbJoins"&gt;The join values.&lt;/param&gt;
        /// &lt;returns&gt;A person object.&lt;/returns&gt;
        public Person Retrieve(Person keyObject, List&lt;string&gt; propertyNames = null
        , DbFilters filters = null, DbJoins dbJoins = null)
        {
        Person retValue = null;

        DbResult dbResult = mDataManager.Retrieve(keyObject, propertyNames, filters, dbJoins);
        SQLStatement = mDataManager.SQLStatement;
        if (dbResult != null &amp;&amp; dbResult.DbRecords.Count &gt; 0)
        {
        // Populate a data object with the result values.
        retValue = new Person();
        DbCommon.SetObjectValues(dbResult.DbRecords[0], retValue);
        }
        return retValue;
        }
        }
      </code>
    </example>
  </Retrieve>
  <Update>
    <summary>
      Updates the record.
      (DE)
    </summary>
    <param name="dataObject">The record object.</param>
    <param name="keyColumns">The record containing the key field values.</param>
    <param name="propertyNames">The incuded column property names.</param>
    <param name="filters">The filter values.</param>
    <remarks>
      <para>&lt;b&gt;Parameters&lt;/b&gt;</para>
      <para>
        keyColumns&lt;br \&gt;
        This parameter defines the values to be used in the SQL where clause. It
        is only used if the 'filters' parameter is null.&lt;br \&gt;
        The values are separated with the 'AND' operator.
      </para>
      <para>
        propertyNames&lt;br \&gt;
        This parameter defines the primary table columns that are to be updated.
        If it is null, then all the primary table columns are updated.&lt;br \&gt;
        It must not include Calculated or Join columns or it will cause an error.
      </para>
      <para>
        filters&lt;br \&gt;
        This parameter defines the values to be used in the SQL where clause. If
        it is defined, then the keyColumns parameter is not used.&lt;br \&gt;
        The 'filters' object can define a complex where clause including
        combinations of 'AND' and 'OR' operators.
      </para>
      <para>
        Creates an "Update"
        &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
        object, which is available in the Request property. The request object is
        passed to the
        &lt;span class="commonType"&gt;ExecuteRequest()&lt;/span&gt;
        method.
      </para>
      <para>&lt;b&gt;Method Graph&lt;/b&gt;</para>
      <para>
        All methods are in LJCDBMessage.DbCommon.
      </para>
      <para>
        RequestDataColumns(dataObject)
        &lt;div class='Text'&gt;RequestDataColumns(baseDefinition)&lt;/div&gt;
        &lt;div class='Text'&gt;RequestColumns(dataObject)&lt;/div&gt;
        &lt;div class='Text2'&gt;CreateValueColumn(dbColumn)&lt;/div&gt;
        RequestDataKeys(keyColumns)
        &lt;div class='Text'&gt;RequestKeys(keyColumns)&lt;/div&gt;
        &lt;div class='Text2'&gt;CreateKeyColumn(keyColumn)&lt;/div&gt;
      </para>
    </remarks>
    <example>
      <code>
        // This is an example of the Person Manager code that would access the
        // DataManager Update() method. The supporting class code is listed at
        // the DataManager class level.

        using LJCNetCommon;
        using LJCDBMessage;

        /// &lt;summary&gt;Provides Person specific data manipulation methods.&lt;/summary&gt;
        public class PersonManager
        {
        /// &lt;summary&gt;Updates a record in the database.&lt;/summary&gt;
        /// &lt;param name="dataObject"&gt;The data record.&lt;/param&gt;
        /// &lt;param name="keyObject"&gt;The record containing the key field values.&lt;/param&gt;
        /// &lt;param name="propertyNames"&gt;The incuded column property names.&lt;/param&gt;
        /// &lt;param name="filters"&gt;The filter values.&lt;/param&gt;
        public void Update(Person dataObject, Person keyObject, List&lt;string&gt; propertyNames = null
        , DbFilters filters = null)
        {
        mDataManager.Update(dataObject, keyObject, propertyNames, filters);
        AffectedCount = mDataManager.AffectedCount;
        SQLStatement = mDataManager.SQLStatement;
        }
        }
      </code>
    </example>
  </Update>

  <!-- Other Public Methods -->
  <CreateLoadRequest>
    <summary>
      Creates and returns the Load
      &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
      object.
    </summary>
    <param name="keyColumns">The record containing the key field values.</param>
    <param name="propertyNames">The incuded column property names.</param>
    <param name="filters">The filter values.</param>
    <param name="joins">The join values.</param>
    <returns>
      The &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
      object.
    </returns>
  </CreateLoadRequest>
  <ExecuteRequest>
    <summary>
      Executes the supplied request.
    </summary>
    <param name="dbRequest">The request object.</param>
    <returns>The result object.</returns>
    <remarks>
      <para>
        The DataManager can communicate with one of three different Data Access
        objects.
      </para>
      <para>
        It first checks the
        &lt;span class="userType"&gt;DbServiceRef&lt;/span&gt;.DbDataAccess
        property for an instance of the
        &lt;span class="userType"&gt;DbDataAccess&lt;/span&gt; object.
        If the DbDataAccess property is set, it uses this reference for data
        access.
      </para>
      <para>
        If the DbDataAccess property is null, then it checks the
        &lt;span class="userType"&gt;DbServiceRef&lt;/span&gt;.DbService
        property for an instance of the
        &lt;span class="userType"&gt;DbService&lt;/span&gt; object.
        If the DbService property is set, it uses this reference for data
        access.
      </para>
      <para>
        If the DbDataAccess and DbService properties are null, then it
        checks the
        &lt;span class="userType"&gt;DbServiceRef&lt;/span&gt;.DbServiceClient
        property for an instance of the
        &lt;span class="userType"&gt;DbServiceClient&lt;/span&gt; object.
        If the DbServiceClient property is set, it uses this reference for data
        access.
      </para>
    </remarks>
  </ExecuteRequest>
  <GetPropertyNames>
    <summary>
      Creates a PropertyNames list from the data definition.
    </summary>
    <returns>The full PropertyNames list.</returns>
  </GetPropertyNames>
  <GetSchemaOnly>
    <summary>
      Retrieves the column names for the specified table.
    </summary>
    <param name="dataConfigName">The data configuration name.</param>
    <param name="tableName">The table name.</param>
    <returns>The result with the column names.</returns>
    <remarks>
      <para>
        Creates a "SchemaOnly"
        &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
        object, which is available in the Request property. The request object is
        passed to the
        &lt;span class="commonType"&gt;ExecuteRequest()&lt;/span&gt;
        method.
      </para>
    </remarks>
  </GetSchemaOnly>
  <GetTableNames>
    <summary>
      Retrieves the table names for the data configuration database.
    </summary>
    <returns>The result with the table names.</returns>
    <remarks>
      Creates a "TableNames"
      &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
      object, which is available in the Request property. The request object is
      passed to the
      &lt;span class="commonType"&gt;ExecuteRequest()&lt;/span&gt;
      method.
    </remarks>
  </GetTableNames>
  <MapNames>
    <summary>
      Maps the column property and rename values.
    </summary>
    <param name="columnName">The database column name.</param>
    <param name="propertyName">The Data Record property name.</param>
    <param name="renameAs">The SQL query rename value.</param>
    <param name="caption">The column caption.</param>
  </MapNames>
  <Resequence>
    <summary>
      Resequence the sequence column values.
    </summary>
    <param name="idName">The table ID column name.</param>
    <param name="sequenceName">The sequence column name.</param>
    <param name="whereClause">The where clause.</param>
  </Resequence>
  <SetDbAssignedColumns>
    <summary>
      Sets the database assigned value columns.
    </summary>
    <param name="propertyNames">The property names.</param>
  </SetDbAssignedColumns>
  <SetLookupColumns>
    <summary>
      Adds the lookup column names.
    </summary>
    <param name="propertyNames">The property names.</param>
  </SetLookupColumns>

  <!-- Create Data Methods -->
  <CreateSchemaColumnsResult>
    <summary>
      Retrieves the schema result for the specified table and transforms
      it into a result of column names.
    </summary>
    <param name="dataConfigName">The data configuration name.</param>
    <param name="tableName">The table name.</param>
    <returns>The Column Names result object.</returns>
  </CreateSchemaColumnsResult>
  <CreateSchemaColumnsResult1>
    <summary>
      Takes a result object and transforms it into a result of column names.
    </summary>
    <param name="dbResult">The result object.</param>
    <returns>The Column Names result object.</returns>
  </CreateSchemaColumnsResult1>
  <DataDefinition>
    <summary>
      Gets or sets a reference to the Data Definition columns collection.
    </summary>
  </DataDefinition>
  
  <!-- Request -->
  <Request>
    <summary>
      Gets or sets the
      &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
      object reference.
    </summary>
  </Request>
</items>
