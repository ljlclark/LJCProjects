<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LJCNetCommon</name>
    </assembly>
    <members>
        <member name="T:LJCNetCommon.AppSettings">
            <summary>
      Represents the Configuration AppSettings. (RE)
    </summary><remarks>
      <para>
        The App.Config file layout with a sample setting value.
      </para>
      <para>
        &lt;&lt;span class="ltgt"&gt;?&lt;/span&gt;&lt;span class="name"&gt;xml&lt;/span&gt;&lt;span
        class="attrib"&gt; version&lt;/span&gt;="&lt;span class="data"&gt;1.0&lt;/span&gt;"&lt;span
        class="attrib"&gt; encoding&lt;/span&gt;="&lt;span class="data"&gt;utf-8&lt;/span&gt;"&lt;span
        class="ltgt"&gt; ?&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;&lt;span class="name"&gt;configuration&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class="pad1"&gt;&lt;/span&gt;&lt;&lt;span class="name"&gt;appSettings&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class="pad2"&gt;&lt;/span&gt;&lt;&lt;span class="name"&gt;add&lt;/span&gt;&lt;span
        class="attrib"&gt; key&lt;/span&gt;="&lt;span class="data"&gt;ConnectionType&lt;/span&gt;"&lt;span
        class="attrib"&gt; value&lt;/span&gt;="&lt;span class="data"&gt;MySql&lt;/span&gt;"&lt;span
        class="ltgt"&gt; /&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class="pad1"&gt;&lt;/span&gt;&lt;&lt;span class="ltgt"&gt;/&lt;/span&gt;&lt;span class="name"&gt;appSettings&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;&lt;span class="ltgt"&gt;/&lt;/span&gt;&lt;span class="name"&gt;configuration&lt;/span&gt;&gt;
      </para>
      <para>-- Project Level Remarks</para>
      <para>
        The .NET Common library contains classes that provide common functionality
        for all .NET program types.
      </para>
      <para>
        The most commonly used Static Function Classes are: NetCommon, NetFile and
        NetString.
      </para>
      <para>
        The most commonly used Collection and Object class pairs are:
        DbColumns/DbColumn and DbValues/DbValue.
      </para>
      <para>
        LJCReflect and LJCAssemblyReflect are commonly used reflection classes.
      </para>
    </remarks>
        </member>
        <member name="M:LJCNetCommon.AppSettings.#ctor(System.String)">
            <summary>
      Initializes an object instance.
    </summary><param name="fileSpec">The Configuration file specification.</param><example>
      <code>
        using LJCNetCommon;

        var appSettings = new AppSettings("AppName.exe.config");
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.AppSettings.GetBool(System.String)">
            <summary>
      Gets the bool value of the specified setting. (E)
    </summary><param name="keyName">The setting key name.</param><returns>The bool setting value.</returns><example>
      <code>
        // App.Config file.
        // &lt;configuration&gt;
        //   &lt;appSettings&gt;
        //     &lt;add key="UseLocal" value="true" /&gt;
        //   &lt;/appSettings&gt;
        // &lt;/configuration&gt;

        using LJCNetCommon;

        var appSettings = new AppSettings("AppName.exe.config");
        bool useLocal = appSettings.GetBool("UseLocal");
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.AppSettings.GetColor(System.String,System.Drawing.Color)">
            <summary>
      Gets the Color value of the specified setting. (E)
    </summary><param name="keyName">The setting key name.</param><param name="defaultColor">The default color.</param><returns>The Color setting value.</returns><example>
      <code>
        // App.Config file.
        // &lt;configuration&gt;
        //   &lt;appSettings&gt;
        //     &lt;add key="BeginColor" value="AliceBlue" /&gt;
        //   &lt;/appSettings&gt;
        // &lt;/configuration&gt;

        using System.Drawing;
        using LJCNetCommon;

        var appSettings = new AppSettings("AppName.exe.config");
        Color beginColor = appSettings.GetColor("BeginColor", Color.AliceBlue);
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.AppSettings.GetColorFromRGBString(System.String)">
            <summary>
      Gets a Color from an RGB string. (E)
    </summary><param name="rgbText">The RGB text.</param><returns>The Color value.</returns><example>
      <code>
        // App.Config file.
        // &lt;configuration&gt;
        //   &lt;appSettings&gt;
        //     &lt;add key="EndColor" value="255,255,255" /&gt;
        //   &lt;/appSettings&gt;
        // &lt;/configuration&gt;

        using System.Drawing;
        using LJCNetCommon;

        var appSettings = new AppSettings("AppName.exe.config");
        Color endColor;
        endColor = appSettings.GetColorFromRGBString("EndColor");
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.AppSettings.GetColorValue(System.String)">
            <summary>
      Gets an integer color value from a string. (E)
    </summary><param name="text">The color string text.</param><returns>The integer color value.</returns><example>
      <code>
        using System.Drawing;
        using LJCNetCommon;

        var appSettings = new AppSettings("AppName.exe.config");
        Color white = appSettings.GetColorValue("255,255,255");
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.AppSettings.GetString(System.String,System.Boolean)">
            <summary>
      Get the string value of the specified setting. (E)
    </summary><param name="keyName">The setting key name.</param><param name="allowMissingValue">
      Indicates if a missing value throws an exception.
    </param><example>
      <code>
        // App.Config file.
        // &lt;configuration&gt;
        //   &lt;appSettings&gt;
        //     &lt;add key="DataConfigName" value="AppTables" /&gt;
        //   &lt;/appSettings&gt;
        // &lt;/configuration&gt;

        using System.Drawing;
        using LJCNetCommon;

        var appSettings = new AppSettings("AppName.exe.config");
        string dataConfigName = appSettings.GetString("DataConfigName");
      </code>
    </example><returns>The string setting value.</returns>
        </member>
        <member name="P:LJCNetCommon.AppSettings.FileSpec">
            <summary>The Config File specification.</summary>
        </member>
        <member name="T:LJCNetCommon.CodeTokenizer">
            <summary>
      A C# Code Tokenizer class. (RE)
    </summary>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.#ctor">
            <summary>
      Initializes an object instance.
    </summary><remarks>
      A default constructor is required for a serializable object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.InitializeKeywords">
            <summary>
      Initializes the Keywords. (R)
    </summary><remarks>
      This is provided so the CodeTokens object can be created without
      initializing the Keywords. This is useful in a Parallel.For() loop.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.SetKeywords(LJCNetCommon.CodeTokenizer)">
            <summary>
      Sets the Keywords from the previously initialized CodeTokens. (R)
    </summary><param name="setup">The setup CodeTokens</param><remarks>
      This is provided to set the Keywords in a Parallel.For() loop.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.ClearRemainingTokens(System.Int32)">
            <summary>
      Clears all the remaining tokens; starting with the specified token index.
      (E)
    </summary><param name="tokenIndex">The token index.</param><example>
      <code>        using LJCNetCommon;
        
        var tokenizer = new CodeTokenizer();
        string text = " // This is a comment.";
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);
        if (tokenizer.IsComment(token))
        {
          // Remaining tokens are not processed.
          tokenizer.ClearRemainingTokens(tokenIndex + 1);
        }</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.CombineXmlCommentTokens(System.Int16)">
            <summary>
      Combines the tokens for an XMLComment. (E)
    </summary><param name="tokenIndex">The token index.</param><example>
      <code>        using LJCNetCommon;
        
        var tokenizer = new CodeTokenizer();
        string text = " /// &lt;summary&gt;This is an XML comment.&lt;/summary&gt;";
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);
        if (tokenizer.IsCodeXMLComment(token))
        {
          // All text is processed as one token.
          tokenizer.CombineXmlCommentTokens(tokenIndex);
        }</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.EndTokens(System.Int16@)">
            <summary>
      Sets the tokenIndex to the end of the tokens array. (E)
    </summary><param name="tokenIndex">The token index.</param><example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " string text = \"DataValue\"";
        tokenizer.SetTokens(text);
        short tokenIndex = 3;
        string token = tokenizer.GetToken(tokenIndex);
        if (tokenizer.IsDataValue(token)
          &amp;&amp; false = token.Contains("("))
        {
          // Value tokenIndex is set to the end of the tokens array.
          tokenizer.EndTokens(ref tokenIndex);
        }</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.GetNextToken(System.Int16@)">
            <summary>
      Gets the next token after the specified token index. (E)
    </summary><param name="tokenIndex">The token index.</param><returns>The next token value.</returns><example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " // This is a comment.";
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetNextToken(ref tokenIndex);
        // Value token = "This".
        // Value tokenIndex = 1.</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.GetToken(System.Int16)">
            <summary>
      Gets the token at the specified token index. (E)
    </summary><param name="tokenIndex">The token index.</param><returns>The token value.</returns><example>
      <code>        using LJCNetCommon;
        
        var tokenizer = new CodeTokenizer();
        string text = " // This is a comment.";
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);
        // Value token = "//".</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.HasBeginDelimiter(System.String,System.String)">
            <summary>
      Check if the text has the begin delimiter. (E)
    </summary><param name="text">The text value.</param><param name="beginDelimiter">The begin delimiter.</param><returns>True if the begin delimiter is found.</returns><example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " /// &lt;summary&gt;This is an XML comment.&lt;/summary&gt;";
        tokenizer.SetTokens(text);
        short tokenIndex = 1;
        string token = tokenizer.GetToken(tokenIndex);
        bool hasBegin = tokenizer.HasBeginDelimiter(token, "&lt;summary&gt;");
        // Value hasBegin is true.</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.HasBothDelimiters(System.String,System.String,System.String)">
            <summary>
      Check if the text is a Full summary comment. (E)
    </summary><param name="text">The text value.</param><param name="beginDelimiter">The begin delimiter.</param><param name="endDelimiter">The end delimiter.</param><returns>True if both delimiters are found.</returns><example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " &lt;summary&gt;This is an XML comment.&lt;/summary&gt;";
        tokenizer.SetTokens(text);
        short tokenIndex = 1;
        string token = tokenizer.GetToken(tokenIndex);
        bool hasBoth = tokenizer.HasBothDelimiter(token, "&lt;summary&gt;"
          , "&lt;/summary&gt;");
        // Value hasBoth is true.</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.HasEndDelimiter(System.String,System.String)">
            <summary>
      Check if the text has the end delimiter. (E)
    </summary><param name="text">The text value.</param><param name="endDelimiter">The end delimiter.</param><returns>True if the end delimiter is found.</returns><example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " /// &lt;summary&gt;This is an XML comment.&lt;/summary&gt;";
        tokenizer.SetTokens(text);
        short tokenIndex = 1;
        string token = tokenizer.GetToken(tokenIndex);
        bool hasEnd = tokenizer.HasEndDelimiter(token, "&lt;/summary&gt;");
        // Value hasEnd is true.</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.IsCodeXmlComment(System.String)">
            <summary>
      Check if a XML comment. (E)
    </summary><param name="text">The text value.</param><returns>True if an XML comment, otherwise false.</returns><example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " /// &lt;summary&gt;This is an XML comment.&lt;/summary&gt;";
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);
        bool isXMLComment = tokenizer.IsCodeXMLComment(token);
        // Value isXMLComment is true.</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.IsComment(System.String)">
            <summary>
      Check if a code comment. (E)
    </summary><param name="text">The text value.</param><returns>True if a comment, otherwise false.</returns><example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " // This is a comment.";
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);
        bool isComment = tokenizer.IsComment(token);
        // Value isComment is true.</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.IsDataType(System.String,System.Boolean)">
            <summary>
      Check if the text is a DataType. (E)
    </summary><param name="text">The text value.</param><param name="firstPass">The first pass for common values.</param><returns>True if a data type, otherwise false.</returns><example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " string text = \"DataValue\"";
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);

        int prefixCount = 0;
        string stripToken = tokenizer.StripQualifier(token, ref prefixCount);
        bool isDataType = tokenizer.IsDataType(stripToken);
        // Value isDataType = true.</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.IsDataValue(System.String)">
            <summary>
      Check if the text is a Data value. (E)
    </summary><param name="text">The text value.</param><returns>True if a data value, otherwise false.</returns><example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " string text = \"DataValue\"";
        tokenizer.SetTokens(text);
        short tokenIndex = 3;
        string token = tokenizer.GetToken(tokenIndex);

        int prefixCount = 0;
        string stripToken = tokenizer.StripQualifier(token, ref prefixCount);
        bool isDataValue = tokenizer.IsDataType(stripToken);
        // Value isDataValue = true.</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.IsDelimiters(System.String)">
            <summary>
      Check if the text contains a common delimiter. (E)
    </summary><param name="text">The text value.</param><returns>True if a common delimiter, otherwise false.</returns><example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " string text = \"DataValue\"";
        tokenizer.SetTokens(text);
        short tokenIndex = 2;
        string token = tokenizer.GetToken(tokenIndex);
        
        // Common Delimiters are: ':', '{', '}', '=' and '"'.
        bool isCommonDelimiter = tokenizer.IsDelimiters(token);
        // Value isCommonDelimiter = true.</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.IsKeyword(System.String,System.Boolean)">
            <summary>
      Check if the text is a Keyword. (E)
    </summary><param name="text">The text value.</param><param name="firstPass">The first pass for common values.</param><returns>True if a keyword, otherwise false.</returns><example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " if (text == \"DataValue\"");
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);

        int prefixCount = 0;
        string stripToken = tokenizer.StripQualifier(token, ref prefixCount);
        bool isKeyword = tokenizer.IsKeyword(stripToken);
        // Value isDataType = true.</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.IsLibType(System.String)">
            <summary>
      Check if the text is a LibType. (E)
    </summary><param name="text">The text value.</param><returns>True if a library type, otherwise false.</returns><example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " private List&lt;string&gt; list;"
        tokenizer.SetTokens(text);
        short tokenIndex = 1;
        string token = tokenizer.GetToken(tokenIndex);

        int prefixCount = 0;
        string stripToken = tokenizer.StripQualifier(token, ref prefixCount);
        bool isLibType = tokenizer.IsLibType(stripToken);
        // Value isLibType = true.</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.IsModifier(System.String,System.Boolean)">
            <summary>
      Check if the text is a Modifier. (E)
    </summary><param name="text">The text value.</param><param name="firstPass">The first pass for common values.</param><returns>True if a modifier, otherwise false.</returns><example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " private List&lt;string&gt; list;"
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);

        int prefixCount = 0;
        string stripToken = tokenizer.StripQualifier(token, ref prefixCount);
        bool isModifier = tokenizer.IsModifier(stripToken);
        // Value isModifier = true.</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.IsParam(System.String)">
            <summary>
      Check if the text is a param comment. (E)
    </summary><param name="text">The text value.</param><returns>True if a param item, otherwise false.</returns><example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " /// &lt;param name=\"id\"&gt;The ID value.&lt;/param&gt;";
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);
        if (tokenizer.IsCodeXMLComment(token))
        {
          bool isParam = tokenizer.IsParam(text);
          // Value isParam is true.
        }</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.IsRefType(System.String)">
            <summary>
      Check if the text is a RefType. (E)
    </summary><param name="text">The text value.</param><returns>True if a reference type, otherwise false.</returns><example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " public class ClassName()";
        tokenizer.SetTokens(text);
        short tokenIndex = 0;
        string token = tokenizer.GetToken(tokenIndex);
        bool isRefType = tokenizer.IsRefType(token);
        // Value isRefType = true.</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.SetTokens(System.String)">
            <summary>
      Sets the Tokens value, split on blanks. (E)
    </summary><param name="text">The text value.</param><example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " public class ClassName()";
        tokenizer.SetTokens(text);
        // Array tokenizer.Tokens has three elements.</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.CodeTokenizer.StripQualifier(System.String,System.Int32@)">
            <summary>
      Strips the leading qualifiers and from next qualifier to end of string.
      (E)
    </summary><param name="text">The text value.</param><param name="prefixCount">The recursive prefix count.</param><returns>The strip text value.</returns><example>
      <code>        using LJCNetCommon;

        var tokenizer = new CodeTokenizer();
        string text = " private List&lt;string&gt; list;"
        tokenizer.SetTokens(text);
        short tokenIndex = 1;
        string token = tokenizer.GetToken(tokenIndex);

        int prefixCount = 0;
        string stripToken = tokenizer.StripQualifier(token, ref prefixCount);
        // stripToken = "List".</code>
    </example>
        </member>
        <member name="P:LJCNetCommon.CodeTokenizer.CommonDataTypes">
            <summary>The most common Data Types.</summary>
        </member>
        <member name="P:LJCNetCommon.CodeTokenizer.CommonKeywords">
            <summary>The most common Keywords.</summary>
        </member>
        <member name="P:LJCNetCommon.CodeTokenizer.CommonModifiers">
            <summary>The most common Modifiers.</summary>
        </member>
        <member name="P:LJCNetCommon.CodeTokenizer.DataTypes">
            <summary>The additional Data Types.</summary>
        </member>
        <member name="P:LJCNetCommon.CodeTokenizer.Keywords">
            <summary>The additional Keywords.</summary>
        </member>
        <member name="P:LJCNetCommon.CodeTokenizer.LibTypes">
            <summary>The Library Types.</summary>
        </member>
        <member name="P:LJCNetCommon.CodeTokenizer.Modifiers">
            <summary>The additional Modifiers.</summary>
        </member>
        <member name="P:LJCNetCommon.CodeTokenizer.RefTypes">
            <summary>The Reference types.</summary>
        </member>
        <member name="P:LJCNetCommon.CodeTokenizer.Tokens">
            <summary>Gets or sets the Token values.</summary>
        </member>
        <member name="T:LJCNetCommon.CommonDataTypes">
            <summary>Represents a collection of Common Data Types.</summary>
        </member>
        <member name="M:LJCNetCommon.CommonDataTypes.Deserialize(System.String)">
            <summary>
      Deserializes from the specified XML file.
    </summary><param name="fileSpec">The file specification value.</param><returns>The deserialized object.</returns>
        </member>
        <member name="M:LJCNetCommon.CommonDataTypes.HasItems(LJCNetCommon.CommonDataTypes)">
            <summary>
      Checks if the collection has items.
    </summary><param name="collectionObject">The collection object.</param><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.CommonDataTypes.#ctor">
            <summary>
      Initializes an object instance.
    </summary><remarks>
      A default constructor is required for a serializable object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.CommonDataTypes.#ctor(LJCNetCommon.CommonDataTypes)">
            <summary>
      The Copy constructor.
    </summary><param name="items">The copy from items collection.</param>
        </member>
        <member name="M:LJCNetCommon.CommonDataTypes.Add(System.String)">
            <summary>
      Adds the specified object.
    </summary><param name="item">The item object.</param>
        </member>
        <member name="M:LJCNetCommon.CommonDataTypes.Clone">
            <summary>
      Clones the structure of the object.
    </summary><returns>A new object with the same structure as the current object.</returns>
        </member>
        <member name="M:LJCNetCommon.CommonDataTypes.HasItems">
            <summary>
      Checks if the collection has items.
    </summary><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.CommonDataTypes.Serialize(System.String)">
            <summary>
      Serializes the collection to a file.
    </summary><param name="fileSpec">The alternate file specification.</param><remarks>
      Uses the DefaultFileName value if the fileSpec parameter is null.
    </remarks>
        </member>
        <member name="P:LJCNetCommon.CommonDataTypes.Count">
            <summary>The Collection count.</summary>
        </member>
        <member name="M:LJCNetCommon.CommonDataTypes.GetEnumerator">
            <summary>
      Gets the Collection Enumerator.
    </summary><returns>The Collection Enumerator.</returns>
        </member>
        <member name="P:LJCNetCommon.CommonDataTypes.Items">
            <summary>The KeyItem items.</summary>
        </member>
        <member name="P:LJCNetCommon.CommonDataTypes.Item(System.Int32)">
            <summary>
      Gets the item by index value.
    </summary><param name="index">The index value.</param><returns>The element item object.</returns>
        </member>
        <member name="M:LJCNetCommon.CommonDataTypes.SearchName(System.String)">
            <summary>
      Retrieve the collection element with name.
    </summary><param name="name">The item name.</param><returns>A reference to the matching item.</returns>
        </member>
        <member name="M:LJCNetCommon.CommonDataTypes.SortName">
            <summary>
      Sort on Name.
    </summary>
        </member>
        <member name="P:LJCNetCommon.CommonDataTypes.DefaultFileName">
            <summary>Gets the Default File Name.</summary>
        </member>
        <member name="T:LJCNetCommon.CommonModifiers">
            <summary>Represents a collection of Common Modifiers.</summary>
        </member>
        <member name="M:LJCNetCommon.CommonModifiers.Deserialize(System.String)">
            <summary>
      Deserializes from the specified XML file.
    </summary><param name="fileSpec">The file specification value.</param><returns>The deserialized object.</returns>
        </member>
        <member name="M:LJCNetCommon.CommonModifiers.HasItems(LJCNetCommon.CommonModifiers)">
            <summary>
      Checks if the collection has items.
    </summary><param name="collectionObject">The collection object.</param><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.CommonModifiers.#ctor">
            <summary>
      Initializes an object instance.
    </summary><remarks>
      A default constructor is required for a serializable object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.CommonModifiers.#ctor(LJCNetCommon.CommonModifiers)">
            <summary>
      The Copy constructor.
    </summary><param name="items">The copy from items collection.</param>
        </member>
        <member name="M:LJCNetCommon.CommonModifiers.Add(System.String)">
            <summary>
      Adds the specified object.
    </summary><param name="item">The item object.</param>
        </member>
        <member name="M:LJCNetCommon.CommonModifiers.Clone">
            <summary>
      Clones the structure of the object.
    </summary><returns>A new object with the same structure as the current object.</returns>
        </member>
        <member name="M:LJCNetCommon.CommonModifiers.HasItems">
            <summary>
      Checks if the collection has items.
    </summary><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.CommonModifiers.Serialize(System.String)">
            <summary>
      Serializes the collection to a file.
    </summary><param name="fileSpec">The alternate file specification.</param><remarks>
      Uses the DefaultFileName value if the fileSpec parameter is null.
    </remarks>
        </member>
        <member name="P:LJCNetCommon.CommonModifiers.Count">
            <summary>The Collection count.</summary>
        </member>
        <member name="M:LJCNetCommon.CommonModifiers.GetEnumerator">
            <summary>
      Gets the Collection Enumerator.
    </summary><returns>The Collection Enumerator.</returns>
        </member>
        <member name="P:LJCNetCommon.CommonModifiers.Items">
            <summary>The KeyItem items.</summary>
        </member>
        <member name="P:LJCNetCommon.CommonModifiers.Item(System.Int32)">
            <summary>
      Gets the item by index value.
    </summary><param name="index">The index value.</param><returns>The element item object.</returns>
        </member>
        <member name="M:LJCNetCommon.CommonModifiers.SearchName(System.String)">
            <summary>
      Retrieve the collection element with name.
    </summary><param name="name">The item name.</param><returns>A reference to the matching item.</returns>
        </member>
        <member name="M:LJCNetCommon.CommonModifiers.SortName">
            <summary>
      Sort on Name.
    </summary>
        </member>
        <member name="P:LJCNetCommon.CommonModifiers.DefaultFileName">
            <summary>Gets the Default File Name.</summary>
        </member>
        <member name="T:LJCNetCommon.DataTypes">
            <summary>Represents a collection of Data Types.</summary>
        </member>
        <member name="M:LJCNetCommon.DataTypes.Deserialize(System.String)">
            <summary>
      Deserializes from the specified XML file.
    </summary><param name="fileSpec">The file specification value.</param><returns>The deserialized object.</returns>
        </member>
        <member name="M:LJCNetCommon.DataTypes.HasItems(LJCNetCommon.DataTypes)">
            <summary>
      Checks if the collection has items.
    </summary><param name="collectionObject">The collection object.</param><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.DataTypes.#ctor">
            <summary>
      Initializes an object instance.
    </summary><remarks>
      A default constructor is required for a serializable object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.DataTypes.#ctor(LJCNetCommon.DataTypes)">
            <summary>
      The Copy constructor.
    </summary><param name="items">The copy from items collection.</param>
        </member>
        <member name="M:LJCNetCommon.DataTypes.Add(System.String)">
            <summary>
      Adds the specified object.
    </summary><param name="item">The item object.</param>
        </member>
        <member name="M:LJCNetCommon.DataTypes.Clone">
            <summary>
      Clones the structure of the object.
    </summary><returns>A new object with the same structure as the current object.</returns>
        </member>
        <member name="M:LJCNetCommon.DataTypes.HasItems">
            <summary>
      Checks if the collection has items.
    </summary><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.DataTypes.Serialize(System.String)">
            <summary>
      Serializes the collection to a file.
    </summary><param name="fileSpec">The alternate file specification.</param><remarks>
      Uses the DefaultFileName value if the fileSpec parameter is null.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.DataTypes.SearchName(System.String)">
            <summary>
      Retrieve the collection element with name.
    </summary><param name="name">The item name.</param><returns>A reference to the matching item.</returns>
        </member>
        <member name="M:LJCNetCommon.DataTypes.SortName">
            <summary>
      Sort on Name.
    </summary>
        </member>
        <member name="M:LJCNetCommon.DataTypes.GetEnumerator">
            <summary>
      Gets the Collection Enumerator.
    </summary><returns>The Collection Enumerator.</returns>
        </member>
        <member name="P:LJCNetCommon.DataTypes.Count">
            <summary>The Collection count.</summary>
        </member>
        <member name="P:LJCNetCommon.DataTypes.Items">
            <summary>The KeyItem items.</summary>
        </member>
        <member name="P:LJCNetCommon.DataTypes.Item(System.Int32)">
            <summary>
      Gets the item by index value.
    </summary><param name="index">The index value.</param><returns>The element item object.</returns>
        </member>
        <member name="P:LJCNetCommon.DataTypes.DefaultFileName">
            <summary>Gets the Default File Name.</summary>
        </member>
        <member name="T:LJCNetCommon.Keywords">
            <summary>Represents a collection of Keywords.</summary>
        </member>
        <member name="M:LJCNetCommon.Keywords.Deserialize(System.String)">
            <summary>
      Deserializes from the specified XML file.
    </summary><param name="fileSpec">The file specification value.</param><returns>The deserialized object.</returns>
        </member>
        <member name="M:LJCNetCommon.Keywords.HasItems(LJCNetCommon.Keywords)">
            <summary>
      Checks if the collection has items.
    </summary><param name="collectionObject">The collection object.</param><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.Keywords.#ctor">
            <summary>
      Initializes an object instance.
    </summary><remarks>
      A default constructor is required for a serializable object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.Keywords.#ctor(LJCNetCommon.Keywords)">
            <summary>
      The Copy constructor.
    </summary><param name="items">The copy from items collection.</param>
        </member>
        <member name="M:LJCNetCommon.Keywords.Add(System.String)">
            <summary>
      Adds the specified object.
    </summary><param name="item">The item object.</param>
        </member>
        <member name="M:LJCNetCommon.Keywords.Clone">
            <summary>
      Clones the structure of the object.
    </summary><returns>A new object with the same structure as the current object.</returns>
        </member>
        <member name="M:LJCNetCommon.Keywords.HasItems">
            <summary>
      Checks if the collection has items.
    </summary><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.Keywords.Serialize(System.String)">
            <summary>
      Serializes the collection to a file.
    </summary><param name="fileSpec">The alternate file specification.</param><remarks>
      Uses the DefaultFileName value if the fileSpec parameter is null.
    </remarks>
        </member>
        <member name="P:LJCNetCommon.Keywords.Count">
            <summary>The Collection count.</summary>
        </member>
        <member name="M:LJCNetCommon.Keywords.GetEnumerator">
            <summary>
      Gets the Collection Enumerator.
    </summary><returns>The Collection Enumerator.</returns>
        </member>
        <member name="P:LJCNetCommon.Keywords.Items">
            <summary>The KeyItem items.</summary>
        </member>
        <member name="P:LJCNetCommon.Keywords.Item(System.Int32)">
            <summary>
      Gets the item by index value.
    </summary><param name="index">The index value.</param><returns>The element item object.</returns>
        </member>
        <member name="M:LJCNetCommon.Keywords.SearchName(System.String)">
            <summary>
      Retrieve the collection element with name.
    </summary><param name="name">The item name.</param><returns>A reference to the matching item.</returns>
        </member>
        <member name="M:LJCNetCommon.Keywords.SortName">
            <summary>
      Sort on Name.
    </summary>
        </member>
        <member name="P:LJCNetCommon.Keywords.DefaultFileName">
            <summary>Gets the Default File Name.</summary>
        </member>
        <member name="T:LJCNetCommon.LibTypes">
            <summary>Represents a collection of Library Types.</summary>
        </member>
        <member name="M:LJCNetCommon.LibTypes.Deserialize(System.String)">
            <summary>
      Deserializes from the specified XML file.
    </summary><param name="fileSpec">The file specification value.</param><returns>The deserialized object.</returns>
        </member>
        <member name="M:LJCNetCommon.LibTypes.HasItems(LJCNetCommon.LibTypes)">
            <summary>
      Checks if the collection has items.
    </summary><param name="collectionObject">The collection object.</param><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.LibTypes.#ctor">
            <summary>
      Initializes an object instance.
    </summary><remarks>
      A default constructor is required for a serializable object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.LibTypes.#ctor(LJCNetCommon.LibTypes)">
            <summary>
      The Copy constructor.
    </summary><param name="items">The copy from items collection.</param>
        </member>
        <member name="M:LJCNetCommon.LibTypes.Add(System.String)">
            <summary>
      Adds the specified object.
    </summary><param name="item">The item object.</param>
        </member>
        <member name="M:LJCNetCommon.LibTypes.Clone">
            <summary>
      Clones the structure of the object.
    </summary><returns>A new object with the same structure as the current object.</returns>
        </member>
        <member name="M:LJCNetCommon.LibTypes.HasItems">
            <summary>
      Checks if the collection has items.
    </summary><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.LibTypes.Serialize(System.String)">
            <summary>
      Serializes the collection to a file.
    </summary><param name="fileSpec">The alternate file specification.</param><remarks>
      Uses the DefaultFileName value if the fileSpec parameter is null.
    </remarks>
        </member>
        <member name="P:LJCNetCommon.LibTypes.Count">
            <summary>The Collection count.</summary>
        </member>
        <member name="M:LJCNetCommon.LibTypes.GetEnumerator">
            <summary>
      Gets the Collection Enumerator.
    </summary><returns>The Collection Enumerator.</returns>
        </member>
        <member name="P:LJCNetCommon.LibTypes.Items">
            <summary>The KeyItem items.</summary>
        </member>
        <member name="P:LJCNetCommon.LibTypes.Item(System.Int32)">
            <summary>
      Gets the item by index value.
    </summary><param name="index">The index value.</param><returns>The element item object.</returns>
        </member>
        <member name="M:LJCNetCommon.LibTypes.SearchName(System.String)">
            <summary>
      Retrieve the collection element with name.
    </summary><param name="name">The item name.</param><returns>A reference to the matching item.</returns>
        </member>
        <member name="M:LJCNetCommon.LibTypes.SortName">
            <summary>
      Sort on Name.
    </summary>
        </member>
        <member name="P:LJCNetCommon.LibTypes.DefaultFileName">
            <summary>Gets the Default File Name.</summary>
        </member>
        <member name="T:LJCNetCommon.Modifiers">
            <summary>Represents a collection of Modifiers.</summary>
        </member>
        <member name="M:LJCNetCommon.Modifiers.Deserialize(System.String)">
            <summary>
      Deserializes from the specified XML file.
    </summary><param name="fileSpec">The file specification value.</param><returns>The deserialized object.</returns>
        </member>
        <member name="M:LJCNetCommon.Modifiers.HasItems(LJCNetCommon.Modifiers)">
            <summary>
      Checks if the collection has items.
    </summary><param name="collectionObject">The collection object.</param><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.Modifiers.#ctor">
            <summary>
      Initializes an object instance.
    </summary><remarks>
      A default constructor is required for a serializable object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.Modifiers.#ctor(LJCNetCommon.Modifiers)">
            <summary>
      The Copy constructor.
    </summary><param name="items">The copy from items collection.</param>
        </member>
        <member name="M:LJCNetCommon.Modifiers.Add(System.String)">
            <summary>
      Adds the specified object.
    </summary><param name="item">The item object.</param>
        </member>
        <member name="M:LJCNetCommon.Modifiers.Clone">
            <summary>
      Clones the structure of the object.
    </summary><returns>A new object with the same structure as the current object.</returns>
        </member>
        <member name="M:LJCNetCommon.Modifiers.HasItems">
            <summary>
      Checks if the collection has items.
    </summary><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.Modifiers.Serialize(System.String)">
            <summary>
      Serializes the collection to a file.
    </summary><param name="fileSpec">The alternate file specification.</param><remarks>
      Uses the DefaultFileName value if the fileSpec parameter is null.
    </remarks>
        </member>
        <member name="P:LJCNetCommon.Modifiers.Count">
            <summary>The Collection count.</summary>
        </member>
        <member name="M:LJCNetCommon.Modifiers.GetEnumerator">
            <summary>
      Gets the Collection Enumerator.
    </summary><returns>The Collection Enumerator.</returns>
        </member>
        <member name="P:LJCNetCommon.Modifiers.Items">
            <summary>The KeyItem items.</summary>
        </member>
        <member name="P:LJCNetCommon.Modifiers.Item(System.Int32)">
            <summary>
      Gets the item by index value.
    </summary><param name="index">The index value.</param><returns>The element item object.</returns>
        </member>
        <member name="M:LJCNetCommon.Modifiers.SearchName(System.String)">
            <summary>
      Retrieve the collection element with name.
    </summary><param name="name">The item name.</param><returns>A reference to the matching item.</returns>
        </member>
        <member name="M:LJCNetCommon.Modifiers.SortName">
            <summary>
      Sort on Name.
    </summary>
        </member>
        <member name="P:LJCNetCommon.Modifiers.DefaultFileName">
            <summary>Gets the Default File Name.</summary>
        </member>
        <member name="T:LJCNetCommon.RefTypes">
            <summary>Represents a collection of Reference Types.</summary>
        </member>
        <member name="M:LJCNetCommon.RefTypes.Deserialize(System.String)">
            <summary>
      Deserializes from the specified XML file.
    </summary><param name="fileSpec">The file specification value.</param><returns>The deserialized object.</returns>
        </member>
        <member name="M:LJCNetCommon.RefTypes.HasItems(LJCNetCommon.RefTypes)">
            <summary>
      Checks if the collection has items.
    </summary><param name="collectionObject">The collection object.</param><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.RefTypes.#ctor">
            <summary>
      Initializes an object instance.
    </summary><remarks>
      A default constructor is required for a serializable object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.RefTypes.#ctor(LJCNetCommon.RefTypes)">
            <summary>
      The Copy constructor.
    </summary><param name="items">The copy from items collection.</param>
        </member>
        <member name="M:LJCNetCommon.RefTypes.Add(System.String)">
            <summary>
      Adds the specified object.
    </summary><param name="item">The item object.</param>
        </member>
        <member name="M:LJCNetCommon.RefTypes.Clone">
            <summary>
      Clones the structure of the object.
    </summary><returns>A new object with the same structure as the current object.</returns>
        </member>
        <member name="M:LJCNetCommon.RefTypes.HasItems">
            <summary>
      Checks if the collection has items.
    </summary><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.RefTypes.Serialize(System.String)">
            <summary>
      Serializes the collection to a file.
    </summary><param name="fileSpec">The alternate file specification.</param><remarks>
      Uses the DefaultFileName value if the fileSpec parameter is null.
    </remarks>
        </member>
        <member name="P:LJCNetCommon.RefTypes.Count">
            <summary>The Collection count.</summary>
        </member>
        <member name="M:LJCNetCommon.RefTypes.GetEnumerator">
            <summary>
      Gets the Collection Enumerator.
    </summary><returns>The Collection Enumerator.</returns>
        </member>
        <member name="P:LJCNetCommon.RefTypes.Items">
            <summary>The KeyItem items.</summary>
        </member>
        <member name="P:LJCNetCommon.RefTypes.Item(System.Int32)">
            <summary>
      Gets the item by index value.
    </summary><param name="index">The index value.</param><returns>The element item object.</returns>
        </member>
        <member name="M:LJCNetCommon.RefTypes.SearchName(System.String)">
            <summary>
      Retrieve the collection element with name.
    </summary><param name="name">The item name.</param><returns>A reference to the matching item.</returns>
        </member>
        <member name="M:LJCNetCommon.RefTypes.SortName">
            <summary>
      Sort on Name.
    </summary>
        </member>
        <member name="P:LJCNetCommon.RefTypes.DefaultFileName">
            <summary>Gets the Default File Name.</summary>
        </member>
        <member name="T:LJCNetCommon.DbColumn">
            <summary>
      Represents a Data Column definition. (D)
    </summary><remarks>
      <para>
        The &lt;span class="userType"&gt;DbColumn&lt;/span&gt;
        object is used extensively throughout the LJC libraries, utilities and
        applications; wherever data elements need to be dynamically defined or
        manipulated. It is commonly used to define database table columns, grid
        control columns and text file columns and is often used to facilitate
        moving data between a database table column, grid control column, text
        file column or other data source and a data object.
      </para>
      <para>
        A Data Object is an instance of a class that contains properties for
        each data element in a data source row. It is a strongly typed, object
        oriented representation of the data source row for use in code. It may
        contain common methods to assist with cloning, sorting and displaying
        an object string identifier.
      </para>
      <para>
        When the ColumnName property is set, it will set the PropertyName
        property to the same value if PropertyName is null. This is the most
        common scenario where the data object property name is the same as the
        data source column name.
      </para>
      <para>
        If a data object property name is different than the data source column
        name, then the PropertyName value must be set to the data object
        property name. For join columns, it may be the case that a different
        PropertyName needs to be chosen as there is already a property with that
        name. This often means that a RenameAs value must be assigned as there is
        most likely also a table column name conflict with the primary table.
      </para>
      <para>
      </para>
    </remarks>
        </member>
        <member name="M:LJCNetCommon.DbColumn.#ctor">
            <summary>
      Initializes an object instance.
    </summary><remarks>
      A default constructor is required for a serializable object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.DbColumn.#ctor(LJCNetCommon.DbColumn)">
            <summary>
      The Copy constructor.
    </summary><param name="item">The copy from item object.</param>
        </member>
        <member name="M:LJCNetCommon.DbColumn.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
      Initializes an object instance with the supplied values.
    </summary><param name="columnName">The column name.</param><param name="value">The data string value.</param><param name="dataTypeName">The data type name.</param><param name="propertyName">the property name.</param><param name="assignedKey">The assigned key indicator.</param><param name="renameValue">The RenameAs value.</param><example>
      <code>
        using LJCNetCommon;

        // Must use (object) with a string value to execute this constructor.
        var dbColumn = new DbColumn("ColumnName", (object)"Value");
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.DbColumn.Clone">
            <summary>
      Clones the structure of the object.
    </summary><returns>A new object with the same structure as the current object.</returns>
        </member>
        <member name="M:LJCNetCommon.DbColumn.CompareTo(LJCNetCommon.DbColumn)">
            <summary>
      Provides the default Sort functionality.
    </summary><param name="other">The compare-to object.</param><returns>
      The integer that indicates the order relationship of the objects.
    </returns><remarks>
      A negative integer - This instance precedes the compare-to object.&lt;br /&gt;
      Zero               - This instance and the compare-to object have the same position.&lt;br /&gt;
      A postive integer  - This instance follows the compare-to object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.DbColumn.SQLFormatValue">
            <summary>
      Formats the column value for the SQL string. (D)
    </summary><returns>The formatted value.</returns><remarks>
      <para>
        Returns the string formatted value from the Value property based
        on the DataTypeName property.
      </para>
      <para>
        If the DataType is Boolean, returns "1" or "0".&lt;br /&gt;
        If the DataType is DateTime, returns a string Date or Minimum Date
        value.&lt;br  /&gt;
        If the DataType is string, returns a string with doubled single quotes.
      </para>
    </remarks><example>
      <code>
        using LJCNetCommon;

        var dbColumnBool = new DbColumn("TestBool", "1", NetCommon.TypeBoolean);
        var dbColumnDate = new DbColumn("TestDate", DateTime.Now()
          , NetCommon.TypeDateTime);
        var dbColumnString = new DbColumn("TestString", "string");
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.DbColumn.ToString">
            <summary>
      The object string identifier.
    </summary><returns>The identifier value.</returns>
        </member>
        <member name="M:LJCNetCommon.DbColumn.op_Implicit(LJCNetCommon.DbColumn)~LJCNetCommon.DbValue">
            <summary>
      Creates a
      &lt;span class="userType"&gt;DbValue&lt;/span&gt;
      object from a
      &lt;span class="userType"&gt;DbColumn&lt;/span&gt;
      object. (E)
    </summary><param name="dbColumn">
      The &lt;span class="userType"&gt;DbColumn&lt;/span&gt;
      object.
    </param><example>
      <code>
        using LJCNetCommon;
        
        var dbColumn = new DbColumn()
        {
          ColumnName = "Test",
          DataTypeName = "int",
          Value = 1
        };
        var dbValue = dbColumn;</code>
    </example>
        </member>
        <member name="P:LJCNetCommon.DbColumn.AllowDBNull">
            <summary>Gets or sets the AllowDBNull value.</summary>
        </member>
        <member name="P:LJCNetCommon.DbColumn.AutoIncrement">
            <summary>Gets or sets the AutoIncrement value.</summary>
        </member>
        <member name="P:LJCNetCommon.DbColumn.Caption">
            <summary>
      Gets or sets the Caption value. (R)
    </summary><remarks>
      This is the value that is used for the Grid column header.
    </remarks>
        </member>
        <member name="P:LJCNetCommon.DbColumn.ColumnName">
            <summary>
      Gets or sets the ColumnName value. (R)
    </summary><remarks>
      This is the Table Column name for the SQL statement. The result value is
      retrieved using this name. The Table Name comes from
      &lt;span class="userType"&gt;DBMessage.DbQuery.TableName&lt;/span&gt;.
      &lt;pre&gt;
      select
        TableName.ColumnName
        
      update TableName set
        TableName.ColumnName = value
      &lt;/pre&gt;
    </remarks>
        </member>
        <member name="P:LJCNetCommon.DbColumn.DataTypeName">
            <summary>Gets or sets the DataTypeName value.</summary>
        </member>
        <member name="P:LJCNetCommon.DbColumn.DefaultValue">
            <summary>Gets or sets the DefaultValue value.</summary>
        </member>
        <member name="P:LJCNetCommon.DbColumn.IsChanged">
            <summary>Indicates that the value has changed.</summary>
        </member>
        <member name="P:LJCNetCommon.DbColumn.IsPrimaryKey">
            <summary>Gets or sets the IsPrimaryKey value.</summary>
        </member>
        <member name="P:LJCNetCommon.DbColumn.KeyType">
            <summary>Gets or sets the KeyType value.</summary>
        </member>
        <member name="P:LJCNetCommon.DbColumn.MaxLength">
            <summary>Gets or sets the MaxLength value.</summary>
        </member>
        <member name="P:LJCNetCommon.DbColumn.Position">
            <summary>
      Gets or sets the Position value. (R)
    </summary><remarks>
      This property is useful for data sources that require a column position
      value. An example would be a text file that does not contain column
      headings.
    </remarks>
        </member>
        <member name="P:LJCNetCommon.DbColumn.PropertyName">
            <summary>
      Gets or sets the PropertyName value. (R)
    </summary><remarks>
      This is the Data Object Property name. The result value is mapped into
      the Property with this name.
    </remarks>
        </member>
        <member name="P:LJCNetCommon.DbColumn.RenameAs">
            <summary>
      Gets or sets the RenameAs value.
    </summary><remarks>
      This result name is usually the same as the Table Column name. The
      RenameAs value changes the result name. The result value is retrieved
      using this name. The Table Name comes from
      &lt;span class="userType"&gt;DBMessage.DbQuery.TableName&lt;/span&gt;.
      &lt;pre&gt;
      select
        TableName.ColumnName as RenameAs
      &lt;/pre&gt;
    </remarks>
        </member>
        <member name="P:LJCNetCommon.DbColumn.SQLTypeName">
            <summary>Gets or sets the SQLTypeName value.</summary>
        </member>
        <member name="P:LJCNetCommon.DbColumn.Unique">
            <summary>Gets or sets the Unique value.</summary>
        </member>
        <member name="P:LJCNetCommon.DbColumn.Value">
            <summary>Gets or sets the Value object.</summary>
        </member>
        <member name="P:LJCNetCommon.DbColumn.ID">
            <summary>
      Gets or sets the ID value. (R)
    </summary><remarks>
      Added to accomodate the ViewColumn and ViewJoinColumn tables.
    </remarks>
        </member>
        <member name="P:LJCNetCommon.DbColumn.Sequence">
            <summary>
      Gets or sets the Sequence value. (R)
    </summary><remarks>Added to accomodate the ViewGridColumn table.</remarks>
        </member>
        <member name="P:LJCNetCommon.DbColumn.ViewDataID">
            <summary>
      Gets or sets the ViewData ID value. (R)
    </summary><remarks>Added to accomodate the ViewColumn table.</remarks>
        </member>
        <member name="P:LJCNetCommon.DbColumn.ViewJoinID">
            <summary>
      Gets or sets the ViewJoin ID value. (R)
    </summary><remarks>Added to accomodate the ViewJoinColumn table.</remarks>
        </member>
        <member name="P:LJCNetCommon.DbColumn.Width">
            <summary>
      Gets or sets the Width value. (R)
    </summary><remarks>Added to accomodate the ViewGridColumn table.</remarks>
        </member>
        <member name="P:LJCNetCommon.DbColumn.AddOrderIndex">
            <summary></summary> 
        </member>
        <member name="T:LJCNetCommon.DbColumnNameComparer">
            <summary>Sort and search on column name.</summary>
        </member>
        <member name="M:LJCNetCommon.DbColumnNameComparer.Compare(LJCNetCommon.DbColumn,LJCNetCommon.DbColumn)">
            <summary>
      Compares two objects.
    </summary><param name="x">The compare object.</param><param name="y">The compare-to object</param><returns>An integer value indicating the order relationship.</returns>
        </member>
        <member name="T:LJCNetCommon.DbColumnPropertyComparer">
            <summary>
      Sort and search on PropertyName.
    </summary>
        </member>
        <member name="M:LJCNetCommon.DbColumnPropertyComparer.Compare(LJCNetCommon.DbColumn,LJCNetCommon.DbColumn)">
            <summary>
      Compares two objects.
    </summary><param name="x">The compare object.</param><param name="y">The compare-to object</param><returns>An integer value indicating the order relationship.</returns>
        </member>
        <member name="T:LJCNetCommon.DbColumnRenameAsComparer">
            <summary>
      Sort and search on RenameAs value.
    </summary>
        </member>
        <member name="M:LJCNetCommon.DbColumnRenameAsComparer.Compare(LJCNetCommon.DbColumn,LJCNetCommon.DbColumn)">
            <summary>
      Compares two objects.
    </summary><param name="x">The compare object.</param><param name="y">The compare-to object</param><returns>An integer value indicating the order relationship.</returns>
        </member>
        <member name="T:LJCNetCommon.DbColumns">
            <summary>
      Represents a collection of
      &lt;span class="userType"&gt;DbColumn&lt;/span&gt; objects.
    </summary><remarks>
      A DbColumn collection element can also be retrieved by name using
      the collection object: columns["ColumnName"];
    </remarks>
        </member>
        <member name="M:LJCNetCommon.DbColumns.HasItems(LJCNetCommon.DbColumns)">
            <summary>
      Checks if the collection has items.
    </summary><param name="collectionObject">The collection object.</param><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCCreateObjectColumns(System.Object,LJCNetCommon.DbColumns)">
            <summary>
      Creates DbColumns from a Data Object.
    </summary><param name="dataObject">The Data Object value.</param><param name="dataDefinition">The data definitions.</param><returns>The DbColumns collection.</returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCDeserialize(System.String)">
            <summary>
      Deserializes from the specified XML file.
    </summary><param name="fileSpec">The file specification value.</param><returns>The deserialized object.</returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.op_Implicit(LJCNetCommon.DbColumns)~LJCNetCommon.DbValues">
            <summary>
      Creates a
      &lt;span class="userType"&gt;DbValues&lt;/span&gt;
      object from a
      &lt;span class="userType"&gt;DbColumns&lt;/span&gt; object.
      (E)
    </summary><param name="dbColumns">
      The &lt;span class="userType"&gt;DbColumns&lt;/span&gt;
      object.
    </param><example>
      <code>
        using LJCNetCommon;

        DbColumns dbColumns = new DbColumns();
        dbColumns.Add("Column1");
        dbColumns.Add("Column2");
        
        DbValues dbValues = DbColumns;
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.DbColumns.#ctor">
            <summary>
      Initializes an object instance.
    </summary><remarks>
      A default constructor is required for a serializable object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.DbColumns.#ctor(LJCNetCommon.DbColumns)">
            <summary>
      The Copy constructor.
    </summary><param name="items">The copy from items collection.</param>
        </member>
        <member name="M:LJCNetCommon.DbColumns.Add(LJCNetCommon.DbColumn)">
            <summary>
      Adds the object element to the collection
    </summary><param name="dbColumn">The object element.</param><remarks>Overrides the base Add method.</remarks>
        </member>
        <member name="M:LJCNetCommon.DbColumns.Add(System.String,System.Int32,System.Int32)">
            <summary>
      Creates the Object from the arguments and adds it to the collection.
      (R)
    </summary><param name="columnName">The column name.</param><param name="position">The column layout position.</param><param name="maxLength">The column length.</param><returns>
      The created
      &lt;span class="userType"&gt;DbColumn&lt;/span&gt; object.
    </returns><remarks>
      This method is useful for data sources that require a column position value.
      An example would be a text file that uses fixed length fields.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.DbColumns.Add(System.String,System.String,System.String,System.String,System.String)">
            <summary>
      Creates the Object from the arguments and adds it to the collection.
    </summary><param name="columnName">The column name.</param><param name="propertyName">The property name.</param><param name="renameAs">The rename value.</param><param name="dataTypeName">The data type name.</param><param name="caption">The caption value.</param><returns>
      The created
      &lt;span class="userType"&gt;DbColumn&lt;/span&gt;
      object.
    </returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.Add(System.String,System.Object,System.String)">
            <summary>
      Creates the Object from the arguments and adds it to the collection.
    </summary><param name="columnName">The column name.</param><param name="value">The value object.</param><param name="dataTypeName">The data type name.</param><returns>The created DbColumn object.</returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.Clone">
            <summary>
      Clones the structure of the object.
    </summary><returns>A new object with the same structure as the current object.</returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.HasItems">
            <summary>
      Checks if the collection has items.
    </summary><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCAddPropertyAs(System.String,System.String,System.String,System.String)">
            <summary>
      Creates the
      &lt;span class="userType"&gt;DbColumn&lt;/span&gt;
      object from the supplied values and adds the element to the collection
      list.
      (R)
    </summary><param name="propertyName">The property name.</param><param name="caption">The caption value.</param><param name="renameAs">The rename value.</param><param name="dataTypeName">The data type name.</param><returns>
      The created
      &lt;span class="userType"&gt;DbColumn&lt;/span&gt; object.
    </returns><remarks>
      Accepts the property name and sets the column name the same as the
      property name. If the renameAs value is null, then it is also set the
      same as the property name.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCSerialize(System.String)">
            <summary>
      Serializes the collection to a file.
    </summary><param name="fileSpec">The alternate file specification.</param><remarks>
      Uses the DefaultFileName value if the fileSpec parameter is null.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCClearChanged">
            <summary>
      Sets the IsChanged value to false for all elements in the collection.
    </summary>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCGetChanged">
            <summary>
      Gets a collection of changed columns.
    </summary><returns>The changed columns list.</returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCGetColumns(System.Collections.Generic.List{System.String})">
            <summary>
      Returns a set of columns that match the supplied list.
    </summary><param name="propertyNames">The column property names.</param><returns>The created object.</returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCSetColumnCaptions(LJCNetCommon.DbColumns)">
            <summary>
      Sets the caption properties.
    </summary><param name="dbColumns">The target object.</param>
        </member>
        <member name="M:LJCNetCommon.DbColumns.MapNames(System.String,System.String,System.String,System.String)">
            <summary>
      Maps the column property and rename values.
    </summary><param name="columnName">The Column name.</param><param name="propertyName">The Property name.</param><param name="renameAs">The Rename value.</param><param name="caption">The Caption value.</param>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCSearchName(System.String)">
            <summary>
      Retrieve the collection element with name.
    </summary><param name="name">The item name.</param><returns>A reference to the matching item.</returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCSearchPropertyName(System.String)">
            <summary>
      Finds and returns the column that contains the supplied property name.
    </summary><param name="propertyName">The property name.</param><returns>A reference to the column object.</returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCSearchRenameAs(System.String)">
            <summary>
      Finds and returns the column that contains the supplied RenameAs value.
    </summary><param name="renameAs">The RenameAs value.</param><returns>A reference to the column object.</returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCSortAddOrderIndex">
            <summary>Sort on AddOrderIndex.</summary>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCSortName(LJCNetCommon.DbColumnNameComparer)">
            <summary>Sort on ColumnName.</summary>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCSortProperty(LJCNetCommon.DbColumnPropertyComparer)">
            <summary>Sort on RenameAs.</summary>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCSortRenameAs(LJCNetCommon.DbColumnRenameAsComparer)">
            <summary>Sort on RenameAs.</summary>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCGetBoolean(System.String)">
            <summary>
      Gets the column object value as a bool.
    </summary><param name="name">The column name.</param><returns>The bool value.</returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCGetDbDateTime(System.String)">
            <summary>
      Gets the column object value as a
      &lt;span class="userType"&gt;DateTime&lt;/span&gt;.
    </summary><param name="name">The column name.</param><returns>The DataTime value.</returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCGetDecimal(System.String)">
            <summary>
      Gets the column object value as a
      &lt;span class="userType"&gt;decimal&lt;/span&gt;
      value.
    </summary><param name="name">The column name.</param><returns>
      The &lt;span class="userType"&gt;Decimal&lt;/span&gt; value.
    </returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCGetInt16(System.String)">
            <summary>
      Gets the column object value as a
      &lt;span class="userType"&gt;short&lt;/span&gt; int.
    </summary><param name="name">The column name.</param><returns>
      The
      &lt;span class="userType"&gt;short&lt;/span&gt;
      int value.
    </returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCGetInt32(System.String)">
            <summary>
      Gets the column object value as an
      &lt;span class="userType"&gt;int&lt;/span&gt;.
    </summary><param name="name">The column name.</param><returns>
      The &lt;span class="userType"&gt;int&lt;/span&gt;
      value.
    </returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCGetInt64(System.String)">
            <summary>
      Gets the column object value as a
      &lt;span class="userType"&gt;long&lt;/span&gt; int.
    </summary><param name="name">The column name.</param><returns>
      The &lt;span class="userType"&gt;long&lt;/span&gt;
      int value.
    </returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCGetMinSqlDate">
            <summary>
      Get the minimum date value.
    </summary><returns>The minimum value in database format.</returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCGetValue(System.String)">
            <summary>
      Gets the string value for the column with the specified name.
    </summary><param name="name">The column name.</param><returns>The column value.</returns>
        </member>
        <member name="M:LJCNetCommon.DbColumns.LJCSetValue(System.String,System.Object)">
            <summary>
      Sets the value for the column with the specified name.
    </summary><param name="name">The column name.</param><param name="value">The column value.</param>
        </member>
        <member name="P:LJCNetCommon.DbColumns.LJCDefaultFileName">
            <summary>Gets the Default File Name.</summary>
        </member>
        <member name="P:LJCNetCommon.DbColumns.Item(System.String)">
            <summary>
      The column for the specified name.
    </summary><param name="name">The column name.</param><returns>The selected DbColumn object.</returns>
        </member>
        <member name="T:LJCNetCommon.DbValue">
            <summary>Represents a data source value.</summary>
        </member>
        <member name="M:LJCNetCommon.DbValue.#ctor">
            <summary>
      Initializes an object instance.
    </summary><remarks>
      A default constructor is required for a serializable object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.DbValue.#ctor(LJCNetCommon.DbValue)">
            <summary>
      The Copy constructor.
    </summary><param name="item">The copy from item object.</param>
        </member>
        <member name="M:LJCNetCommon.DbValue.#ctor(System.String,System.Object,System.String)">
            <summary>
      Initializes an object instance with the supplied values.
    </summary><param name="propertyName">The PropertyName value.</param><param name="value">The item value.</param><param name="dataTypeName">The DataType name.</param>
        </member>
        <member name="M:LJCNetCommon.DbValue.Clone">
            <summary>
      Clones the structure of the object.
    </summary><returns>A new object with the same structure as the current object.</returns>
        </member>
        <member name="M:LJCNetCommon.DbValue.CompareTo(LJCNetCommon.DbValue)">
            <summary>
      Provides the default Sort functionality.
    </summary><param name="other">The compare-to object.</param><returns>
      The integer that indicates the order relationship of the objects.
    </returns><remarks>
      A negative integer - This instance precedes the compare-to object.&lt;br /&gt;
      Zero               - This instance and the compare-to object have the same position.&lt;br /&gt;
      A postive integer  - This instance follows the compare-to object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.DbValue.FormatValue">
            <summary>
      Formats the column value for the SQL string. (D)
    </summary><returns>The formatted value.</returns><remarks>
      <para>
        Returns the string formatted value from the Value property based
        on the DataTypeName property.
      </para>
      <para>
        If the DataType is Boolean, returns "1" or "0".&lt;br /&gt;
        If the DataType is DateTime, returns a string Date or Minimum Date
        value.&lt;br  /&gt;
        If the DataType is string, returns a string with doubled single quotes.
      </para>
    </remarks><example>
      <code>
        using LJCNetCommon;

        var dbValueBool = new DbValue("TestBool", "1", NetCommon.TypeBoolean);
        var dbValueDate = new DbValue("TestDate", DateTime.Now()
        , NetCommon.TypeDateTime);
        var dbValueString = new DbValue("TestString", "string");
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.DbValue.ToString">
            <summary>
      The object string identifier.
    </summary><returns>The identifier value.</returns>
        </member>
        <member name="M:LJCNetCommon.DbValue.CreateColumn(LJCNetCommon.DbColumn)">
            <summary>
      Creates a combined
      &lt;span class="userType"&gt;DbColumn&lt;/span&gt; from a
      &lt;span class="userType"&gt;DbValue&lt;/span&gt; and
      &lt;span class="userType"&gt;DbColumn&lt;/span&gt;.
    </summary><param name="definitionColumn">
      The &lt;span class="userType"&gt;DbColumn&lt;/span&gt;
      object.
    </param><returns>
      The combined
      &lt;span class="userType"&gt;DbColumn&lt;/span&gt;
      object.
    </returns>
        </member>
        <member name="P:LJCNetCommon.DbValue.DataTypeName">
            <summary>Gets or sets the DataTypeName value.</summary>
        </member>
        <member name="P:LJCNetCommon.DbValue.IsChanged">
            <summary>Indicates that the value has changed.</summary>
        </member>
        <member name="P:LJCNetCommon.DbValue.PropertyName">
            <summary>Gets or sets the PropertyName value.</summary>
        </member>
        <member name="P:LJCNetCommon.DbValue.Value">
            <summary>Gets or sets the Value object.</summary>
        </member>
        <member name="T:LJCNetCommon.DbValues">
            <summary>
      Represents a collection of
      &lt;span class="userType"&gt;DbValue&lt;/span&gt; objects.
    </summary><remarks>
      A DbValue collection element can also be retrieved by name using
      the collection object: values["PropertyName"];
    </remarks>
        </member>
        <member name="M:LJCNetCommon.DbValues.HasItems(LJCNetCommon.DbValues)">
            <summary>
      Checks if the collection has items.
    </summary><param name="collectionObject">The collection object.</param><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.DbValues.LJCDeserialize(System.String)">
            <summary>
      Deserializes from the specified XML file.
    </summary><param name="fileSpec">The file specification value.</param><returns>The deserialized object.</returns>
        </member>
        <member name="M:LJCNetCommon.DbValues.#ctor">
            <summary>
      Initializes an object instance.
    </summary><remarks>
      A default constructor is required for a serializable object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.DbValues.#ctor(LJCNetCommon.DbValues)">
            <summary>
      The Copy constructor.
    </summary><param name="items">The copy from items collection.</param>
        </member>
        <member name="M:LJCNetCommon.DbValues.Add(System.String,System.Object,System.String)">
            <summary>
      Creates the Object from the arguments and adds it to the collection.
    </summary><param name="propertyName">The PropertyName value.</param><param name="value">The item value.</param><param name="dataTypeName">The DataType name.</param><returns>A reference to the added item.</returns>
        </member>
        <member name="M:LJCNetCommon.DbValues.Clone">
            <summary>
      Clones the structure of the object.
    </summary><returns>A new object with the same structure as the current object.</returns>
        </member>
        <member name="M:LJCNetCommon.DbValues.HasItems">
            <summary>
      Checks if the collection has items.
    </summary><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.DbValues.LJCSerialize(System.String)">
            <summary>
      Serializes the collection to a file.
    </summary><param name="fileSpec">The alternate file specification.</param><remarks>
      Uses the DefaultFileName value if the fileSpec parameter is null.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.DbValues.LJCCreateColumns(LJCNetCommon.DbColumns)">
            <summary>
      Creates combined
      &lt;span class="userType"&gt;DbColumns&lt;/span&gt; from
      &lt;span class="userType"&gt;DbColumns&lt;/span&gt; and
      &lt;span class="userType"&gt;DbValues&lt;/span&gt;.
    </summary><param name="dataDefinition">The column definitions.</param><returns>
      The combined
      &lt;span class="userType"&gt;DbColumns&lt;/span&gt; object.
    </returns>
        </member>
        <member name="M:LJCNetCommon.DbValues.LJCClearChanged">
            <summary>
      Sets the IsChanged value to false for all elements in the collection.
    </summary>
        </member>
        <member name="M:LJCNetCommon.DbValues.LJCGetChanged">
            <summary>
      Gets a collection of changed columns.
    </summary><returns>The changed columns list.</returns>
        </member>
        <member name="M:LJCNetCommon.DbValues.LJCSearchName(System.String)">
            <summary>
      Retrieve the collection element with name.
    </summary><param name="name">The item name.</param><returns>A reference to the matching item.</returns>
        </member>
        <member name="M:LJCNetCommon.DbValues.LJCGetBoolean(System.String)">
            <summary>
      Gets the column object value as a bool.
    </summary><param name="name">The column name.</param><returns>The bool value.</returns>
        </member>
        <member name="M:LJCNetCommon.DbValues.LJCGetDbDateTime(System.String)">
            <summary>
      Gets the column object value as a
      &lt;span class="userType"&gt;DateTime&lt;/span&gt;.
    </summary><param name="name">The column name.</param><returns>The DataTime value.</returns>
        </member>
        <member name="M:LJCNetCommon.DbValues.LJCGetDecimal(System.String)">
            <summary>
      Gets the column object value as a
      &lt;span class="userType"&gt;decimal&lt;/span&gt;
      value.
    </summary><param name="name">The column name.</param><returns>
      The &lt;span class="userType"&gt;Decimal&lt;/span&gt; value.
    </returns>
        </member>
        <member name="M:LJCNetCommon.DbValues.LJCGetInt16(System.String)">
            <summary>
      Gets the column object value as a
      &lt;span class="userType"&gt;short&lt;/span&gt; int.
    </summary><param name="name">The column name.</param><returns>
      The
      &lt;span class="userType"&gt;short&lt;/span&gt;
      int value.
    </returns>
        </member>
        <member name="M:LJCNetCommon.DbValues.LJCGetInt32(System.String)">
            <summary>
      Gets the column object value as an
      &lt;span class="userType"&gt;int&lt;/span&gt;.
    </summary><param name="name">The column name.</param><returns>
      The &lt;span class="userType"&gt;int&lt;/span&gt;
      value.
    </returns>
        </member>
        <member name="M:LJCNetCommon.DbValues.LJCGetInt64(System.String)">
            <summary>
      Gets the column object value as a
      &lt;span class="userType"&gt;long&lt;/span&gt; int.
    </summary><param name="name">The column name.</param><returns>
      The &lt;span class="userType"&gt;long&lt;/span&gt;
      int value.
    </returns>
        </member>
        <member name="M:LJCNetCommon.DbValues.LJCGetMinSqlDate">
            <summary>
      Get the minimum date value.
    </summary><returns>The minimum value in database format.</returns>
        </member>
        <member name="M:LJCNetCommon.DbValues.LJCGetValue(System.String)">
            <summary>
      Gets the string value for the column with the specified name.
    </summary><param name="name">The column name.</param><returns>The column value.</returns>
        </member>
        <member name="M:LJCNetCommon.DbValues.LJCSetValue(System.String,System.String)">
            <summary>
      Sets the object value for the column with the specified name.
    </summary><param name="name">The column name.</param><param name="value">The string value.</param><returns>The column value.</returns>
        </member>
        <member name="P:LJCNetCommon.DbValues.LJCDefaultFileName">
            <summary>Gets the Default File Name.</summary>
        </member>
        <member name="P:LJCNetCommon.DbValues.Item(System.String)">
            <summary>
      The column for the specified property name.
    </summary><param name="name">The property name.</param><returns>The selected DbValue object.</returns>
        </member>
        <member name="T:LJCNetCommon.KeyItem">
            <summary>Represents Key item values.</summary>
        </member>
        <member name="M:LJCNetCommon.KeyItem.#ctor">
            <summary>
      Initializes an object instance.
    </summary><remarks>
      A default constructor is required for a serializable object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.KeyItem.#ctor(LJCNetCommon.KeyItem)">
            <summary>
      The Copy constructor.
    </summary><param name="item">The copy from item object.</param>
        </member>
        <member name="M:LJCNetCommon.KeyItem.#ctor(System.String,System.Int64,System.String)">
            <summary>
      Initializes an object instance.
    </summary><param name="propertyName">The Property name.</param><param name="id">The ID value.</param><param name="description">The Description value.</param>
        </member>
        <member name="M:LJCNetCommon.KeyItem.Clone">
            <summary>
      Clones the structure of the object.
    </summary><returns>A new object with the same structure as the current object.</returns>
        </member>
        <member name="M:LJCNetCommon.KeyItem.CompareTo(LJCNetCommon.KeyItem)">
            <summary>
      Provides the default Sort functionality.
    </summary><param name="other">The compare-to object.</param><returns>
      The integer that indicates the order relationship of the objects.
    </returns><remarks>
      A negative integer - This instance precedes the compare-to object.&lt;br /&gt;
      Zero               - This instance and the compare-to object have the same position.&lt;br /&gt;
      A postive integer  - This instance follows the compare-to object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.KeyItem.ToString">
            <summary>
      The object string identifier.
    </summary><returns>The identifier value.</returns>
        </member>
        <member name="P:LJCNetCommon.KeyItem.DataConfigName">
            <summary>Gets or sets the DataConfig name.</summary>
        </member>
        <member name="P:LJCNetCommon.KeyItem.Description">
            <summary>The Description value.</summary>
        </member>
        <member name="P:LJCNetCommon.KeyItem.ID">
            <summary>The ID value.</summary>
        </member>
        <member name="P:LJCNetCommon.KeyItem.MaxLength">
            <summary>Gets or sets the MaxLength value.</summary>
        </member>
        <member name="P:LJCNetCommon.KeyItem.PrimaryKeyName">
            <summary>Gets or sets the Primary Key name.</summary>
        </member>
        <member name="P:LJCNetCommon.KeyItem.PropertyName">
            <summary>The Property name.</summary>
        </member>
        <member name="P:LJCNetCommon.KeyItem.TableName">
            <summary>Gets or sets the Table name.</summary>
        </member>
        <member name="T:LJCNetCommon.KeyItems">
            <summary>
      Represents a collection of
      &lt;span class="userType"&gt;KeyItem&lt;/span&gt; objects.
    </summary><remarks>
      <para>
        The common collection static method is: HasItems().&lt;br /&gt;
        The collection contains a copy constructor.&lt;br /&gt;
        The common collection instance methods are: Add() + 1 overload,
        Append(), Clone(), GetCollection() and HasItems().
      </para>
      <para>
        Public methods are: GetDescription(), GetIndex(), GetItem() and
        GetItems().
      </para>
      <para>
        The Search and Sort methods are: SearchPropertName() and
        SortPropertyName().&lt;br /&gt;
      </para>
    </remarks>
        </member>
        <member name="M:LJCNetCommon.KeyItems.HasItems(LJCNetCommon.KeyItems)">
            <summary>
      Checks if the collection has items.
    </summary><param name="collectionObject">The collection object.</param><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.KeyItems.#ctor">
            <summary>
      Initializes an object instance.
    </summary><remarks>
      A default constructor is required for a serializable object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.KeyItems.#ctor(LJCNetCommon.KeyItems)">
            <summary>
      The Copy constructor.
    </summary><param name="items">The copy from items collection.</param>
        </member>
        <member name="M:LJCNetCommon.KeyItems.Add(LJCNetCommon.KeyItem)">
            <summary>
      Adds the specified object.
    </summary><param name="item">The item object.</param>
        </member>
        <member name="M:LJCNetCommon.KeyItems.Add(System.String,System.Int64,System.String,System.Int32)">
            <summary>
      Creates and adds the object with the provided values.
    </summary><param name="propertyName">The Property Name.</param><param name="id">The ID value.</param><param name="description">The Description.</param><param name="maxLength">The MaxLength value.</param>
        </member>
        <member name="M:LJCNetCommon.KeyItems.Append(LJCNetCommon.KeyItems)">
            <summary>
      Appends the supplied objects to the collection.
    </summary><param name="items">The collection to be appended.</param>
        </member>
        <member name="M:LJCNetCommon.KeyItems.Clone">
            <summary>
      Clones the structure of the object.
    </summary><returns>A new object with the same structure as the current object.</returns>
        </member>
        <member name="M:LJCNetCommon.KeyItems.GetCollection(System.Collections.Generic.List{LJCNetCommon.KeyItem})">
            <summary>
      Get custom collection from List&lt;T&gt;.
    </summary><param name="items">The Items collection.</param><returns>The collection object reference.</returns>
        </member>
        <member name="M:LJCNetCommon.KeyItems.HasItems">
            <summary>
      Checks if the collection has items.
    </summary><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.KeyItems.GetDescription(LJCNetCommon.DbColumn)">
            <summary>
      Gets the Item Description with Value as index within PropertyName.
    </summary><param name="dataColumn">The DataColumn object.</param><returns>The Item Description.</returns>
        </member>
        <member name="M:LJCNetCommon.KeyItems.GetIndex(LJCNetCommon.DbColumn)">
            <summary>
      Get index from Value.
    </summary><param name="dataColumn">The DataColumn object.</param><returns>The item index.</returns>
        </member>
        <member name="M:LJCNetCommon.KeyItems.GetItem(LJCNetCommon.DbColumn)">
            <summary>
      Gets the KeyItem with Value as index within PropertyName.
    </summary><param name="dataColumn">The DataColumn object.</param><returns>The selected ControlItem.</returns>
        </member>
        <member name="M:LJCNetCommon.KeyItems.GetItems(LJCNetCommon.DbColumn)">
            <summary>
      Gets the Items with the PropertyName.
    </summary><param name="dataColumn">The DataColumn object.</param><returns>The valid ControlItems.</returns>
        </member>
        <member name="M:LJCNetCommon.KeyItems.SearchPropertyName(System.String)">
            <summary>
      Retrieve the collection element with name.
    </summary><param name="name">The item name.</param><returns>A reference to the matching item.</returns>
        </member>
        <member name="M:LJCNetCommon.KeyItems.SortPropertyName">
            <summary>
      Sort on Name.
    </summary>
        </member>
        <member name="M:LJCNetCommon.KeyItems.GetEnumerator">
            <summary>
      Gets the Collection Enumerator.
    </summary><returns>The Collection Enumerator.</returns>
        </member>
        <member name="P:LJCNetCommon.KeyItems.Count">
            <summary>The Collection count.</summary>
        </member>
        <member name="P:LJCNetCommon.KeyItems.Item(System.Int32)">
            <summary>
      Gets the item by index value.
    </summary><param name="index">The index value.</param><returns>The element item object.</returns>
        </member>
        <member name="P:LJCNetCommon.KeyItems.Items">
            <summary>The KeyItem items.</summary>
        </member>
        <member name="T:LJCNetCommon.CommonKeywords">
            <summary>Represents a collection of Common Key Words.</summary>
        </member>
        <member name="M:LJCNetCommon.CommonKeywords.Deserialize(System.String)">
            <summary>
      Deserializes from the specified XML file.
    </summary><param name="fileSpec">The file specification value.</param><returns>The deserialized object.</returns>
        </member>
        <member name="M:LJCNetCommon.CommonKeywords.HasItems(LJCNetCommon.CommonKeywords)">
            <summary>
      Checks if the collection has items.
    </summary><param name="collectionObject">The collection object.</param><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.CommonKeywords.#ctor">
            <summary>
      Initializes an object instance.
    </summary><remarks>
      A default constructor is required for a serializable object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.CommonKeywords.#ctor(LJCNetCommon.CommonKeywords)">
            <summary>
      The Copy constructor.
    </summary><param name="items">The copy from items collection.</param>
        </member>
        <member name="M:LJCNetCommon.CommonKeywords.Add(System.String)">
            <summary>
      Adds the specified object.
    </summary><param name="item">The item object.</param>
        </member>
        <member name="M:LJCNetCommon.CommonKeywords.Clone">
            <summary>
      Clones the structure of the object.
    </summary><returns>A new object with the same structure as the current object.</returns>
        </member>
        <member name="M:LJCNetCommon.CommonKeywords.HasItems">
            <summary>
      Checks if the collection has items.
    </summary><returns>True if there are items, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.CommonKeywords.Serialize(System.String)">
            <summary>
      Serializes the collection to a file.
    </summary><param name="fileSpec">The alternate file specification.</param><remarks>
      Uses the DefaultFileName value if the fileSpec parameter is null.
    </remarks>
        </member>
        <member name="P:LJCNetCommon.CommonKeywords.Count">
            <summary>The Collection count.</summary>
        </member>
        <member name="M:LJCNetCommon.CommonKeywords.GetEnumerator">
            <summary>
      Gets the Collection Enumerator.
    </summary><returns>The Collection Enumerator.</returns>
        </member>
        <member name="P:LJCNetCommon.CommonKeywords.Items">
            <summary>The KeyItem items.</summary>
        </member>
        <member name="P:LJCNetCommon.CommonKeywords.Item(System.Int32)">
            <summary>
      Gets the item by index value.
    </summary><param name="index">The index value.</param><returns>The element item object.</returns>
        </member>
        <member name="M:LJCNetCommon.CommonKeywords.SearchName(System.String)">
            <summary>
      Retrieve the collection element with name.
    </summary><param name="name">The item name.</param><returns>A reference to the matching item.</returns>
        </member>
        <member name="M:LJCNetCommon.CommonKeywords.SortName">
            <summary>
      Sort on Name.
    </summary>
        </member>
        <member name="P:LJCNetCommon.CommonKeywords.DefaultFileName">
            <summary>Gets the Default File Name.</summary>
        </member>
        <member name="T:LJCNetCommon.LJCAssemblyReflect">
            <summary>
      Provides Assembly Reflection methods.
      (DE)
    </summary><remarks>
      <para>
        Provides information for Constructors, Types, Methods, Properties and Fields.
      </para>
      <para>
        The object reflection properties are set using the methods: SetAssembly(),
        SetConstructorInfo(), SetFieldInfo(), SetMethodInfo(), SetPropertyInfo()
        and SetTypeReference().
      </para>
      <para>
        Once the reflection properties are set, the Syntax strings can be retrieved
        with the syntax methods: Get*Syntax();
      </para>
    </remarks>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.#ctor">
            <summary>
      Initializes an object instance.
    </summary><remarks>
      A default constructor is required for a serializable object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.SetAssembly(System.String)">
            <summary>
      Retrieves the Assembly reference. (R)
    </summary><param name="fileSpec">The file specification.</param><returns>The Assembly reference.</returns><remarks>
      Sets the FileSpec property value and attempts to set the Assembly property
      value if the assembly exists.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.SetConstructorInfo(System.String,System.String[])">
            <summary>
      Set the ConstructorInfo reference. (RE)
    </summary><param name="methodName">The Method name.</param><param name="parameterNames">The parameter types.</param><returns>The ConstructorInfo value.</returns><remarks>
      Sets the MethodName property value and attempts to set the ConstructorInfo
      property value if the type reference and constructor with the correct
      parameters exist.
    </remarks><example>
      <code>        using System;
        using System.Reflection;
        using LJC.Net.Common;

        public ConstructorInfo RetrieveConstructorInfo(string assemblyFileSpec, string fullTypeName
          , string constructorName, string[] parameterNames)
        {
          ConstructorInfo retValue = null;

          // These calls are not required if an LJCAssemblyReflect reference is
          // used and the the following set methods have already been executed.
          LJCAssemblyReflect assemblyReflect = new LJCAssemblyReflect();
          Assembly assembly = assemblyReflect.SetAssembly(assemblyFileSpec);
          Type typeReference = assemblyReflect.SetTypeReference(fullTypeName);

          retValue = assemblyReflect.SetConstructorInfo(constructorName, parameterNames);
          return retValue;
        }</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.SetFieldInfo(System.String)">
            <summary>
      Set the FieldInfo reference. (RE)
    </summary><param name="fieldName">The Field name.</param><returns>The FieldInfo value.</returns><remarks>
      Sets the FieldName property value and attempts to set the FieldInfo
      property value if the type reference and the field exist.
    </remarks><example>
      <code>        using System;
        using System.Reflection;
        using LJC.Net.Common;

        public FieldInfo RetrieveFieldInfo(string assemblyFileSpec, string fullTypeName
          , string fieldName)
        {
          FieldInfo retValue = null;

          // These calls are not required if an LJCAssemblyReflect reference is
          // used and the the following set methods have already been executed.
          LJCAssemblyReflect assemblyReflect = new LJCAssemblyReflect();
          Assembly assembly = assemblyReflect.SetAssembly(assemblyFileSpec);
          Type typeReference = assemblyReflect.SetTypeReference(fullTypeName);
          
          retValue = assemblyReflect.SetFieldInfo(fieldName);
          return retValue;
        }</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.GetIndexerInfo(System.String)">
            <summary>
      Gets the Indexer Property info.
    </summary><returns>The XMLDoc full name.</returns>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.SetMethodInfo(System.String,System.String[])">
            <summary>
      Set the MethodInfo reference. (RE)
    </summary><param name="methodName">The Method name.</param><param name="parameterNames">The parameter types.</param><returns>The MethodInfo value.</returns><remarks>
      Sets the MethodName property value and attempts to set the MethodInfo
      property value if the type reference and method with the correct
      parameters exist.
    </remarks><example>
      <code>        using System;
        using System.Reflection;
        using LJC.Net.Common;

        public MethodInfo RetrieveMethodInfo(string assemblyFileSpec, string fullTypeName
          , string methodName, string[] parameterNames)
        {
          MethodInfo retValue = null;

          // These calls are not required if an LJCAssemblyReflect reference is
          // used and the the following set methods have already been executed.
          LJCAssemblyReflect assemblyReflect = new LJCAssemblyReflect();
          Assembly assembly = assemblyReflect.SetAssembly(assemblyFileSpec);
          Type typeReference = assemblyReflect.SetTypeReference(fullTypeName);
          
          retValue = assemblyReflect.SetMethodInfo(methodName, parameterNames);
          return retValue;
        }</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.SetPropertyInfo(System.String,System.String)">
            <summary>
      Set the PropertyInfo reference. (RE)
    </summary><param name="propertyName">The Property name.</param><param name="fullName">The XMLDoc full name.</param><returns>The PropertyInfo value.</returns><remarks>
      Sets the PropertyName property value and attempts to set the PropertyInfo
      property value if the type reference and the property exist.
    </remarks><example>
      <code>        using System;
        using System.Reflection;
        using LJC.Net.Common;

        public PropertyInfo RetrievePropertyInfo(string assemblyFileSpec, string fullTypeName
          , string propertyName, string fullName)
        {
          PropertyInfo retValue = null;

          // These calls are not required if an LJCAssemblyReflect reference is
          // used and the the following set methods have already been executed.
          LJCAssemblyReflect assemblyReflect = new LJCAssemblyReflect();
          Assembly assembly = assemblyReflect.SetAssembly(assemblyFileSpec);
          Type typeReference = assemblyReflect.SetTypeReference(fullTypeName);
          
          retValue = assemblyReflect.SetPropertyInfo(propertyName, fullName);
          return retValue;
        }</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.SetTypeReference(System.String)">
            <summary>
      Set the Type reference. (RE)
    </summary><param name="typeName">The fully qualified Type name.</param><returns>The Type reference.</returns><remarks>
      Sets the TypeName property value and attempts to set the TypeReference
      property value if the assembly reference and type name exist.
    </remarks><example>
      <code>        using System;
        using System.Reflection;
        using LJC.Net.Common;

        public Type RetrieveTypeReference(string assemblyFileSpec, string fullTypeName)
        {
          Type retValue = null;

          // These calls are not required if an LJCAssemblyReflect reference is
          // used and the the following set methods have already been executed.
          LJCAssemblyReflect assemblyReflect = new LJCAssemblyReflect();
          Assembly assembly = assemblyReflect.SetAssembly(assemblyFileSpec);

          retValue = assemblyReflect.SetTypeReference(fullTypeName);
          return retValue;
        }</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.GetConstructorSyntax(System.Reflection.ConstructorInfo)">
            <summary>
      Creates and returns the Constructor syntax. (E)
    </summary><param name="constructorInfo">The ConstructorInfo object.</param><returns>The Constructor syntax.</returns><example>
      <code>        using System;
        using System.Reflection;
        using LJC.Net.Common;

        public string RetrieveConstructorSyntax(string assemblyFileSpec, string fullTypeName
          , string constructorName, string[] parameterNames)
        {
          string retValue = null;

          // These calls are not required if an LJCAssemblyReflect reference is
          // used and the the following set methods have already been executed.
          LJCAssemblyReflect assemblyReflect = new LJCAssemblyReflect();
          assemblyReflect.SetAssembly(assemblyFileSpec);
          assemblyReflect.SetTypeReference(fullTypeName);
          assemblyReflect.SetConstructorInfo(constructorName, parameterNames);
          
          retValue = assemblyReflect.GetConstructorSyntax();
          return retValue;
        }</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.GetFieldSyntax(System.Reflection.FieldInfo)">
            <summary>
      Creates and returns the Field syntax string. (E)
    </summary><param name="fieldInfo">The FieldInfo object.</param><returns /><example>
      <code>        using System;
        using System.Reflection;
        using LJC.Net.Common;

        public string RetrieveFieldSyntax(string assemblyFileSpec, string fullTypeName
          , string fieldName)
        {
          string retValue = null;

          // These calls are not required if an LJCAssemblyReflect reference is
          // used and the the following set methods have already been executed.
          LJCAssemblyReflect assemblyReflect = new LJCAssemblyReflect();
          assemblyReflect.SetAssembly(assemblyFileSpec);
          assemblyReflect.SetTypeReference(fullTypeName);
          assemblyReflect.SetFieldInfo(fieldName);
          
          retValue = assemblyReflect.GetFieldSyntax();
          return retValue;
        }</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.GetGenericTypeSyntax(System.Type)">
            <summary>
      Creates and returns the Generic Type syntax.
    </summary><param name="typeReference">The Type object.</param><returns>The Generic Type syntax.</returns>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.GetMethodSyntax(System.Reflection.MethodInfo)">
            <summary>
      Creates and returns the Method syntax. (E)
    </summary><param name="methodInfo">The MethodInfo object.</param><returns>The Method syntax.</returns><example>
      <code>        using System;
        using System.Reflection;
        using LJC.Net.Common;

        public string RetrieveMethodSyntax(string assemblyFileSpec, string fullTypeName
          , string methodName, string[] parameterNames)
        {
          string retValue = null;

          // These calls are not required if an LJCAssemblyReflect reference is
          // used and the the following set methods have already been executed.
          LJCAssemblyReflect assemblyReflect = new LJCAssemblyReflect();
          assemblyReflect.SetAssembly(assemblyFileSpec);
          assemblyReflect.SetTypeReference(fullTypeName);
          assemblyReflect.SetMethodInfo(methodName, parameterNames);
          
          retValue = assemblyReflect.GetMethodSyntax();
          return retValue;
        }</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.GetPropertySyntax(System.Reflection.PropertyInfo)">
            <summary>
      Creates and returns the Property syntax string. (E)
    </summary><param name="propertyInfo">The PropertyInfo object.</param><returns>The syntax string.</returns><example>
      <code>        using System;
        using System.Reflection;
        using LJC.Net.Common;

        public string RetrievePropertySyntax(string assemblyFileSpec, string fullTypeName
          , string propertyName, string fullName)
        {
          string retValue = null;

          // These calls are not required if an LJCAssemblyReflect reference is
          // used and the the following set methods have already been executed.
          LJCAssemblyReflect assemblyReflect = new LJCAssemblyReflect();
          assemblyReflect.SetAssembly(assemblyFileSpec);
          assemblyReflect.SetTypeReference(fullTypeName);
          assemblyReflect.SetPropertyInfo(propertyName, fullName);
          
          retValue = assemblyReflect.GetPropertySyntax();
          return retValue;
        }</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.GetTypeSyntax(System.Type)">
            <summary>
      Creates and returns the Type syntax. (E)
    </summary><param name="typeReference">The Type object.</param><returns>The Type syntax.</returns><example>
      <code>        using System;
        using System.Reflection;
        using LJC.Net.Common;
        
        public string RetrieveTypeSyntax(string assemblyFileSpec, string fullTypeName)
        {
          string retValue = null;
          
          // These calls are not required if an LJCAssemblyReflect reference is
          // used and the the following set methods have already been executed.
          LJCAssemblyReflect assemblyReflect = new LJCAssemblyReflect();
          assemblyReflect.SetAssembly(assemblyFileSpec);
          assemblyReflect.SetTypeReference(fullTypeName);
          
          retValue = assemblyReflect.GetTypeSyntax();
          return retValue;
        }</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.IsNotCommonClassification(System.Type)">
            <summary>
      Indicates if the Type is not a common type.
    </summary><param name="type">The Type object.</param><returns>True if not a common type, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.IsNotCommonInterface(System.Type)">
            <summary>
      Indicates if the Interface is not a common type.
    </summary><param name="type">The Type object.</param><returns>True if not a common interface, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.IsNotProperty(System.Reflection.MethodInfo)">
            <summary>
      Indicates if the Method is not a property getter or setter.
    </summary><param name="methodInfo">The MethodInfo object.</param><returns>True if not a Property, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.IsOverride(System.Reflection.MethodInfo)">
            <summary>
      Indicates if the method is "override".
    </summary><param name="methodInfo">The MethodInfo object.</param><returns>True if "override", otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.LJCAssemblyReflect.IsPublic(System.Reflection.MethodInfo)">
            <summary>
      Indicates if the method is "public".
    </summary><param name="methodInfo">The MethodInfo object.</param><returns>True if "public", otherwise false.</returns>
        </member>
        <member name="P:LJCNetCommon.LJCAssemblyReflect.Assembly">
            <summary>The Assembly reference.</summary>
        </member>
        <member name="P:LJCNetCommon.LJCAssemblyReflect.ConstructorInfo">
            <summary>The constructor information.</summary>
        </member>
        <member name="P:LJCNetCommon.LJCAssemblyReflect.FieldInfo">
            <summary>The Field information.</summary>
        </member>
        <member name="P:LJCNetCommon.LJCAssemblyReflect.FieldName">
            <summary>The Field name.</summary>
        </member>
        <member name="P:LJCNetCommon.LJCAssemblyReflect.FileSpec">
            <summary>The Assembly file name.</summary>
        </member>
        <member name="P:LJCNetCommon.LJCAssemblyReflect.MethodInfo">
            <summary>The Method information.</summary>
        </member>
        <member name="P:LJCNetCommon.LJCAssemblyReflect.MethodName">
            <summary>The Method name.</summary>
        </member>
        <member name="P:LJCNetCommon.LJCAssemblyReflect.PropertyInfo">
            <summary>The Property information.</summary>
        </member>
        <member name="P:LJCNetCommon.LJCAssemblyReflect.PropertyName">
            <summary>The Property name.</summary>
        </member>
        <member name="P:LJCNetCommon.LJCAssemblyReflect.TypeName">
            <summary>The Type name.</summary>
        </member>
        <member name="P:LJCNetCommon.LJCAssemblyReflect.TypeReference">
            <summary>The Type reference.</summary>
        </member>
        <member name="T:LJCNetCommon.LJCCryptography">
            <summary>Provides methods to encrypt and decrypt data in memory.</summary>
        </member>
        <member name="M:LJCNetCommon.LJCCryptography.#ctor">
            <summary>
      Initializes an object instance.
    </summary><remarks>
      A default constructor is required for a serializable object.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.LJCCryptography.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
      Returns a decrypted string from a cipher byte array. (E)
    </summary><param name="cipher">The cipher byte array.</param><param name="key">The encryption key.</param><param name="initializationVector">The IV value.</param><returns>The decrypted text value.</returns><example>
      <code>        MemoryCrypto crypto = new MemoryCrypto();
        string text = null;
        byte[] key = {230, 191, 149, 1, 207, 136, 112, 200
                       , 7, 192, 109, 130, 188, 192, 27, 183
                       , 238, 1, 248, 74, 35, 47, 1, 144
                       , 90, 91, 5, 167, 87, 170, 11, 141};
        byte[] iv = {94, 9, 42, 5, 218, 86, 120, 94
                     , 209, 208, 216, 111, 24, 4, 255, 67};
        byte[] cipher;
        
        // Retrieve value.
        text = GetEncryptedValue();
        
        // Convert from Base64 and decrypt to text.
        cipher = Convert.FromBase64String(text);
        crypto.CryptoType = Crypto_Type.Crypto_Rijndael;
        text = crypto.Decrypt(cipher, key, iv);</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.LJCCryptography.DecryptBytes(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
      Returns a decrypted byte array from a cipher byte array.
    </summary><param name="cipher">The cipher byte array.</param><param name="key">The encryption key.</param><param name="initializationVector">The IV value.</param><returns>The decrypted byte array.</returns>
        </member>
        <member name="M:LJCNetCommon.LJCCryptography.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
      Returns an encrypted byte array from a byte array.
    </summary><param name="bytes">The byte array.</param><param name="key">The encryption key.</param><param name="initializationVector">The IV value.</param><returns>The encrypted byte array.</returns>
        </member>
        <member name="M:LJCNetCommon.LJCCryptography.Encrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
      Returns an encrypted byte array from a string value. (E)
    </summary><param name="plainText">The text value.</param><param name="key">The encryption key.</param><param name="initializationVector">The IV value.</param><returns>The encrypted byte array.</returns><example>
      <code>        MemoryCrypto crypto = new MemoryCrypto();
        byte[] key;
        byte[] iv;
        byte[] cipher;
        string text;
        
        // Generate the key and initialization vector.
        crypto.CryptoType = Crypto_Type.Crypto_Rijndael;
        key = crypto.GenerateKey();
        iv = crypto.GenerateIV();
        
        // Encrypt and convert to Base64.
        cipher = crypto.Encrypt(GetPlainText(), key, iv);
        text = StringHelper.ByteArrayToBase64(cipher);</code>
    </example>
        </member>
        <member name="M:LJCNetCommon.LJCCryptography.GenerateIV">
            <summary>
      Generates a random initialization vector based on the encryption type.
    </summary><returns>The initialization vector.</returns>
        </member>
        <member name="M:LJCNetCommon.LJCCryptography.GenerateKey">
            <summary>
      Generates a random encryption key based on the encryption type.
    </summary><returns>The encryption key.</returns>
        </member>
        <member name="M:LJCNetCommon.LJCCryptography.IsValidKeySize(System.Int32)">
            <summary>
      Returns true if the key size is valid otherwise returns false.
    </summary><param name="sizeValue">The size value.</param><returns>True if valid, otherwise false.</returns>
        </member>
        <member name="P:LJCNetCommon.LJCCryptography.KeySize">
            <summary>Gets or sets the secret key size in bits.</summary>
        </member>
        <member name="P:LJCNetCommon.LJCCryptography.LegalKeySizes">
            <summary>
      Gets the supported key sizes.
    </summary><returns />
        </member>
        <member name="P:LJCNetCommon.LJCCryptography.Type">
            <summary>Gets or sets the encryption type.</summary>
        </member>
        <member name="T:LJCNetCommon.Cryptography_Type">
            <summary>The encryption types.</summary>
        </member>
        <member name="F:LJCNetCommon.Cryptography_Type.Crypto_DES">
            <summary>Use DES encryption.</summary>
        </member>
        <member name="F:LJCNetCommon.Cryptography_Type.Crypto_3DES">
            <summary>Use triple DES encryption.</summary>
        </member>
        <member name="F:LJCNetCommon.Cryptography_Type.Crypto_RC2">
            <summary>Use RC2 encryption.</summary>
        </member>
        <member name="F:LJCNetCommon.Cryptography_Type.Crypto_Rijndael">
            <summary>Use Rijndael (AES) encryption.</summary>
        </member>
        <member name="T:LJCNetCommon.NetCommon">
            <summary>
      Contains common static functions. (RDE)
    </summary><remarks>
      <para>
        The NetCommon class contains static helper functions for all .NET
        program types.
      </para>
      <para>
        There are three groups of static functions:
      </para>
      <para>
        &lt;b&gt;Text Transform Functions&lt;/b&gt; &lt;br /&gt;
        These are useful for transforming text between different formats.
        &lt;br /&gt;
        These include: &lt;br /&gt;
        Base64BytesToText(), TextToBase64Bytes(),&lt;br /&gt;
        Base64BytesToTextBytes(), TextBytesToBase64Bytes(),&lt;br /&gt;
        Base64ToText(), TextToBase64(),&lt;br /&gt;
        Base64ToTextBytes(), TextBytesToBase64(),&lt;br /&gt;
        BytesToText(), TextToBytes(),&lt;br /&gt;
        MemStreamToBytes(), BytesToMemStream(),&lt;br /&gt;
        MemStreamToString(), StringToMemSream(),&lt;br /&gt;
        XmlDecode(), XmlEncode().
      </para>
      <para>
        &lt;b&gt;Object Data Functions&lt;/b&gt; &lt;br /&gt;
        These are useful for taking object values such as those in
        a DataTable and converting them to their correct types.&lt;br /&gt;
        These include: GetDecimal(), GetInt16(), GetInt32(), GetInt64(),
        GetObject() and GetString().
      </para>
      <para>
        &lt;b&gt;Serialization Functions&lt;/b&gt; &lt;br /&gt;
        These are helper functions for serializing and deserializing strings.
        &lt;br /&gt;
        These include: XmlDeserialize, XmlDeserializeMessage(), XmlSerialize()
        and XmlSerializeToString().
      </para>
    </remarks>
        </member>
        <member name="M:LJCNetCommon.NetCommon.CompareNull(System.Object,System.Object)">
            <summary>
      Compare null values. (DE)
    </summary><param name="x">The compare object.</param><param name="y">The compare to object.</param><returns>
      The integer that indicates the order relationship of the objects.
    </returns><remarks>
      -2    - Neither object is null.&lt;br /&gt;
      -1    - Null object x precedes object y.&lt;br /&gt;
      0     - Object x and object y are both null.&lt;br /&gt;
      1     - Object x follows null object y.
    </remarks><example>
      <code>
        using System;
        using LJCNetCommon;
        
        /// &lt;summary&gt;Sort and search on Name value.&lt;/summary&gt;
        public class NameComparer : IComparer&lt;ClassName&gt;
        {
          // Compares two objects.
          /// &lt;include path='items/Compare/*' file='../../LJCDocLib/Common/Data.xml'/&gt;
          public int Compare(ClassName x, ClassName y)
          {
            int retValue;

            retValue = NetCommon.CompareNull(x, y);
            if (-2 == retValue)
            {
              retValue = NetCommon.CompareNull(x.Name, y.Name);
              if (-2 == retValue)
              {
                // Case sensitive.
                //retValue = x.Name_.CompareTo(y.Name);

                // Not case sensitive.
                retValue = string.Compare(x.Name, y.Name, true);
              }
            }
            return retValue;
          }
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.HasData(System.Data.DataTable)">
            <summary>
      Checks a data table and returns true if it contains any rows. (E)
    </summary><param name="dataTable">The data table object.</param><returns>True if the data table contains any rows.</returns><example>
      <code>
        using System.Data;
        using LJCNetCommon;
        
        private static void HasData()
        {
          DataTable dataTable = new DataTable();
          
          // Returns false.
          bool result = NetCommon.HasData(dataTable);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.IsEqual(System.Object,System.Object)">
            <summary>
      Checks if two values are equal.
    </summary><param name="oldValue"> The previous value.</param><param name="newValue"> The new value.</param><returns>True if equal, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.NetCommon.Base64BytesToText(System.Byte[])">
            <summary>
      Decodes a Base64 byte array to a Text value. (E)
    </summary><param name="bytes">The Base64 byte array.</param><returns>The Text value.</returns><example>
      <code>
        using LJCNetCommon;
        
        // Decodes a Base64 byte array to a Text value.
        private static void Base64BytesToText()
        {
          // Setup
          byte[] base64Bytes = NetCommon.TextToBase64Bytes("Text");

          // Decodes a Base64 byte array to a Text value.
          string text = NetCommon.Base64BytesToText(base64Bytes);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.TextToBase64Bytes(System.String)">
            <summary>
      Encodes a Text value to a Base64 byte array. (E)
    </summary><param name="text">The Text value.</param><returns>Tye Base64 byte array.</returns><example>
      <code>
        using LJCNetCommon;
        
        // Encodes a Text value to a Base64 byte array.
        private static void TextToBase64Bytes()
        {
          // Create Text from Base64 byte array.
          byte[] base64Bytes = NetCommon.TextToBase64Bytes("Text");

          // Check the text.
          string text = NetCommon.Base64BytesToText(base64Bytes);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.Base64BytesToTextBytes(System.Byte[])">
            <summary>
      Decodes a Base64 byte array to a Text byte array. (E)
    </summary><param name="bytes">The base64 byte array.</param><returns>The Text byte array.</returns><example>
      <code>
        using LJCNetCommon;
        
        // Decodes a Base64 byte array to a Text byte array.
        private static void Base64BytesToTextBytes() 
        {
          // Setup
          byte[] base64Bytes = NetCommon.TextToBase64Bytes("Text");

          // Decodes a Base64 byte array to a Text byte array.
          byte[] textBytes = NetCommon.Base64BytesToTextBytes(base64Bytes);

          // Check the text.
          string text = NetCommon.BytesToText(textBytes); 
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.TextBytesToBase64Bytes(System.Byte[])">
            <summary>
      Encodes a byte array to a Base64 byte array. (E)
    </summary><param name="bytes">The byte array.</param><returns>The Base64 byte array.</returns><example>
      <code>
        using LJCNetCommon;
        
        // Encodes a Text byte array to a Base64 byte array.
        private static void TextBytesToBase64Bytes()
        {
          // Setup
          byte[] textBytes = NetCommon.TextToBytes("Text");

          // Encodes a byte array to a Base64 byte array.
          byte[] base64Bytes = NetCommon.TextBytesToBase64Bytes(textBytes);

          // Check the text.
          string text = NetCommon.Base64BytesToText(base64Bytes);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.Base64ToText(System.String)">
            <summary>
      Decodes a Base64 value to a Text value. (E)
    </summary><param name="base64Text">The Base64 string.</param><returns>The Text value.</returns><example>
      <code>
        using LJCNetCommon;
        
        // Decodes a Base64 value to a Text value.
        private static void Base64ToText()
        {
          // Setup
          string base64 = NetCommon.TextToBase64("Text");

          // Decodes a Base64 string to Text.
          string text = NetCommon.Base64ToText(base64);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.TextToBase64(System.String)">
            <summary>
      Encodes a Text value to a Base64 value. (E)
    </summary><param name="text">The Text value.</param><returns>The Base64 string.</returns><example>
      <code>
        using LJCNetCommon;
        
        // Encodes a Text value to a Base64 value.
        private static void TextToBase64()
        {
          string text = "Text";

          // Encodes text to a Base64 string.
          string base64 = NetCommon.TextToBase64(text);

          // Check the text.
          text = NetCommon.Base64ToText(base64);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.Base64ToTextBytes(System.String)">
            <summary>
      Decodes a Base64 value to a Text byte array. (E)
    </summary><param name="base64">The Base64 value.</param><returns>The Text byte array.</returns><example>
      <code>
        using LJCNetCommon;
        
        // Decodes a Base64 value to a Text byte array.
        public static void Base64ToTextBytes()
        {
          // Setup
          string base64 = NetCommon.TextToBase64("Text");

          // Decodes a Base64 value to a Text byte array.
          byte[] textBytes = NetCommon.Base64ToTextBytes(base64);

          // Check the text.
          string text = NetCommon.BytesToText(textBytes);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.TextBytesToBase64(System.Byte[])">
            <summary>
      Encodes a Text byte array to a Base64 value. (E)
    </summary><param name="bytes">The Text byte array.</param><returns>The Base64 string.</returns><example>
      <code>
        using LJCNetCommon;
        
        // Encodes a Text byte array to a Base64 value.
        public static void TextBytesToBase64()
        {
          // Setup
          byte[] TextBytes = NetCommon.TextToBytes("Text");

          // Encodes a Text byte array to a Base64 value.
          string base64 = NetCommon.TextBytesToBase64(TextBytes);

          // Check the text.
          string text = NetCommon.Base64ToText(base64);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.BytesToText(System.Byte[])">
            <summary>
      Creates text from a byte array. (E)
    </summary><param name="bytes">The byte array.</param><returns>The Text value.</returns><example>
      <code>
        using LJCNetCommon;
        
        // Creates text from a byte array.
        private static void BytesToText()
        {
          // Setup
          byte[] bytes = NetCommon.TextToBytes("Text");

          // Creates text from a byte array.
          string text = NetCommon.BytesToText(bytes);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.TextToBytes(System.String)">
            <summary>
      Creates a byte array from text. (E)
    </summary><param name="text">The Text value.</param><returns>The new byte array.</returns><example>
      <code>
        using LJCNetCommon;
        
        // Creates a byte array from text.
        private static void TextToBytes()
        {
          // Setup
          string text = "Text";

          // Creates a byte array from text.
          byte[] bytes = NetCommon.TextToBytes(text);

          // Check the text.
          text = NetCommon.BytesToText(bytes);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.MemStreamToBytes(System.IO.Stream)">
            <summary>
      Copies a memory stream to a byte array. (E)
    </summary><param name="stream">The stream object.</param><returns>The byte array.</returns><example>
      <code>
        using System.IO;
        using LJCNetCommon;
        
        // Copies a memory stream to a byte array.
        private static void MemStreamToBytes()
        {
          // Setup
          byte[] textBytes;
          using (Stream stream = NetCommon.StringToMemStream("Text"))
          {
            // Copies a memory stream to a byte array.
            textBytes = NetCommon.MemStreamToBytes(stream);
          }
          
          // Check the text.
          string text = NetCommon.BytesToText(textBytes);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.BytesToMemStream(System.Byte[])">
            <summary>
      Copies a byte array to a memory stream. (E)
    </summary><param name="bytes">The byte array.</param><returns>The reference to the memory stream.</returns><example>
      <code>
        using System.IO;
        using LJCNetCommon;
        
        // Copies a byte array to a memory stream.
        private static void BytesToMemStream()
        {
          // Setup
          byte[] bytes = NetCommon.TextToBytes("Text");

          // Copies a byte array to a memory stream.
          using (Stream stream = NetCommon.BytesToMemStream(bytes))
          {
            // Check the text.
            string text = NetCommon.MemStreamToString(stream);
          }
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.MemStreamToString(System.IO.Stream)">
            <summary>
      Creates a string from a memory stream. (E)
    </summary><param name="stream">The stream object.</param><returns>The string value.</returns><example>
      <code>
        using System.IO;
        using LJCNetCommon;

        // Creates a string from a memory stream.
        private static void MemStreamToString()
        {
          // Setup
          using (Stream stream = NetCommon.StringToMemStream("Text"))
          {
            // Creates a string from a memory stream.
            string text = NetCommon.MemStreamToString(stream);
          }
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.StringToMemStream(System.String)">
            <summary>
      Creates a memory stream from a string. (E)
    </summary><param name="text">The Text value.</param><returns>The reference to the memory stream.</returns><example>
      <code>
        using System.IO;
        using LJCNetCommon;
        
        // Creates a memory stream from a string.
        private static void StringToMemStream()
        {
          using (Stream stream = NetCommon.StringToMemStream("Text"))
          {
            // Check the text.
            string text = NetCommon.MemStreamToString(stream);
          }
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.XmlDecode(System.String)">
            <summary>
      Decodes an encoded XML string. (E)
    </summary><param name="text">The encoded text.</param><returns>The decoded text.</returns><example>
      <code>
        using LJCNetCommon;
        
        // Decodes an encoded XML string.
        private static void XmlDecode()
        {
          // Setup
          string xml = "&lt;text&gt;Here &amp; There&lt;/text&gt;";
          string encoded = NetCommon.XmlEncode(xml);

          // Decodes an encoded XML string.
          string text = NetCommon.XmlDecode(encoded);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.XmlEncode(System.String)">
            <summary>
      Encodes a string with XML escape values. (E)
    </summary><param name="text">The text to be encoded.</param><returns>The encoded text.</returns><example>
      <code>
        using LJCNetCommon;
        
        // Encodes a string with XML escape values.
        private static void XmlEncode()
        {
          // Setup
          string xml = "&lt;text&gt;Here &amp; There&lt;/text&gt;";

          // Encodes a string with XML escape values.
          string encoded = NetCommon.XmlEncode(xml);

          // Check the text.
          string text = NetCommon.XmlDecode(encoded);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.XmlDeserialize(System.Type,System.String,System.String)">
            <summary>
      Deserialize an XML message file to an object. (E)
    </summary><param name="type">The object type.</param><param name="fileSpec">The input file spec.</param><param name="rootName">The Root Name value.</param><returns>The deserialized object.</returns><example>
      <code>
        using LJCNetCommon;
      
        public class Person
        {
          public long Id { get; set; }
          public string Name { get; set; }
          public bool PrincipleFlag { get; set; }
        }
        
        // Deserialize an XML message file to an object.
        private static void XmlDeserialize()
        {
          // Setup
          var person = new Person()
          {
            Id = 1,
            Name = "Text",
            PrincipleFlag = true
          };
          string file = "Text.xml";
          NetCommon.XmlSerialize(person.GetType(), person, null, file);

          // Deserialize an XML message file to an object.
          Person newPerson;
          newPerson = NetCommon.XmlDeserialize(typeof(Person), file) as Person;
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.XmlDeserializeMessage(System.Type,System.String)">
            <summary>
      Deserialize an XML message string to an object. (E)
    </summary><param name="type">The object type.</param><param name="message">The message string.</param><returns>The deserialized object.</returns><example>
      <code>
        using LJCNetCommon;
      
        public class Person
        {
          public long Id { get; set; }
          public string Name { get; set; }
          public bool PrincipleFlag { get; set; }
        }
        
        // Deserialize an XML message string to an object.
        private static void XmlDeserializeMessage()
        {
          // Setup
          var person = new Person()
          {
            Id = 2,
            Name = "Text",
            PrincipleFlag = true
          };
          string message = NetCommon.XmlSerializeToString(person.GetType(), person, null);

          // Deserialize an XML message string to an object.
          Person newPerson;
          newPerson = NetCommon.XmlDeserializeMessage(typeof(Person), message) as Person;
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.XmlSerialize(System.Type,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String,System.String)">
            <summary>
      Serialize an object to an XML message file. (E)
    </summary><param name="type">The object type.</param><param name="data">The object reference.</param><param name="namespaces">The XML namespaces.</param><param name="fileSpec">The output file spec.</param><param name="rootName">The Root Name value.</param><example>
      <code>
        using LJCNetCommon
        
        public class Person
        {
          public long Id { get; set; }
          public string Name { get; set; }
          public bool PrincipleFlag { get; set; }
        }
        
        // Serialize an object to an XML message file.
        private static void XmlSerialize()
        {
          // Setup
          var person = new Person()
          {
            Id = 2,
            Name = "Text",
            PrincipleFlag = true
          };
          string file = "Text.xml";

          // Serialize an object to an XML message file.
          NetCommon.XmlSerialize(person.GetType(), person, null, file);

          // Check the object.
          Person newPerson;
          newPerson = NetCommon.XmlDeserialize(typeof(Person), file) as Person;
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.XmlSerializeToString(System.Type,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
      Serialize an object to an XML message string. (E)
    </summary><param name="type">The object type.</param><param name="data">The object reference.</param><param name="namespaces">The XML namespaces.</param><returns>The XML message string.</returns><example>
      <code>
        using LJCNetCommon;
        
        public class Person
        {
          public long Id { get; set; }
          public string Name { get; set; }
          public bool PrincipleFlag { get; set; }
        }

        // Serialize an object to an XML message string.
        private static void XmlSerializeToString()
        {
          // Serialize an object to an XML message string.
          var person = new Person()
          {
            Id = 2,
            Name = "Text",
            PrincipleFlag = true
          };
          string message = NetCommon.XmlSerializeToString(person.GetType(), person, null);

          // Check the object.
          Person newPerson;
          newPerson = NetCommon.XmlDeserializeMessage(typeof(Person), message) as Person;
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.GetBoolean(System.Object)">
            <summary>
      Gets a boolean value from an object.
    </summary><param name="value">The value object.</param><returns>
      The boolean value or false if the object is null.
      Also returns false if the object is not type "bool".
    </returns>
        </member>
        <member name="M:LJCNetCommon.NetCommon.GetDateTime(System.Object)">
            <summary>
      Gets a DateTime value from an object.
    </summary><param name="value">The value object.</param><returns>
      The DateTime value or null if the object is null.
      Also returns null if the object is not type "bool".
    </returns>
        </member>
        <member name="M:LJCNetCommon.NetCommon.GetDecimal(System.Object)">
            <summary>
      Gets a decimal value from an object. (E)
    </summary><param name="value">The value object.</param><returns>
      The decimal value or zero if the object is null.
      Also returns zero if the object is not type "decimal", "long", "int"
      or "short".
    </returns><example>
      <code>
        using LJCNetCommon;
        
        // Gets a decimal value from an object.
        private static void GetDecimal()
        {
          // Simulates an Object value like that received from a DataTable.
          decimal setup = 3.14m;
          object obj = setup;

          // Gets a decimal value from an object.
          decimal value = NetCommon.GetDecimal(obj);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.GetDouble(System.Object)">
            <summary>
      Gets a double value from an object.
    </summary><param name="value">The value object.</param><returns>
      The double value or zero if the object is null.
      Also returns zero if the object is not type "double", "decimal", "long"
      , "int" or "short".
    </returns>
        </member>
        <member name="M:LJCNetCommon.NetCommon.GetInt16(System.Object)">
            <summary>
      Gets a short value from an object. (E)
    </summary><param name="value">The value object.</param><returns>
      The long value or zero if the object is null.
      Also returns zero if the object is not type "short".
    </returns><example>
      <code>
        using LJCNetCommon;

        // Gets a short value from an object.
        private static void GetInt16()
        {
          // Simulates an Object value like that received from a DataTable.
          short setup = 3;
          object obj = setup;

          // Gets a short value from an object.
          short value = NetCommon.GetInt16(obj);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.GetInt32(System.Object)">
            <summary>
      Gets an integer value from an object. (E)
    </summary><param name="value">The value object.</param><returns>
      The integer value or zero if the object is null.
      Also returns zero if the object is not type "int" or "short".
    </returns><example>
      <code>
        using LJCNetCommon;
        
        // Gets an int value from an object.
        private static void GetInt32()
        {
          // Simulates an Object value like that received from a DataTable.
          int setup = 3;
          object obj = setup;

          // Gets an int value from an object.
          int value = NetCommon.GetInt32(obj);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.GetInt64(System.Object)">
            <summary>
      Gets a long value from an object. (E)
    </summary><param name="value">The value object.</param><returns>
      The long value or zero if the object is null.
      Also returns zero if the object is not type "long", "int" or "short".
    </returns><example>
      <code>
        using LJCNetCommon;
        
        // Gets a long value from an object.
        private static void GetInt64()
        {
          // Simulates an Object value like that received from a DataTable.
          long setup = 3;
          object obj = setup;

          // Gets a long value from an object.
          long value = NetCommon.GetInt64(obj);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.GetObject(System.Object)">
            <summary>
      Gets an instantiated object value.
    </summary><param name="value">The value object.</param><returns>The instantiated object.</returns>
        </member>
        <member name="M:LJCNetCommon.NetCommon.GetSingle(System.Object)">
            <summary>
      Gets a single value from an object.
    </summary><param name="value">The value object.</param><returns>
      The single value or zero if the object is null.
      Also returns zero if the object is not type "single", "long", "int"
      or "short".
    </returns>
        </member>
        <member name="M:LJCNetCommon.NetCommon.GetString(System.Object)">
            <summary>
      Gets a trimmed string value from an object. (E)
    </summary><param name="value">The value object.</param><returns>The trimmed string value or null if the object is null.</returns><example>
      <code>
        using LJCNetCommon;
        
        // Gets a trimmed string value from an object.
        private static void GetString()
        {
          // Simulates an Object value like that received from a DataTable.
          string setup = "3";
          object obj = setup;

          // Gets a string value from an object.
          string value = NetCommon.GetString(obj);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.ConfigBool(System.String)">
            <summary>
      Retrieves the Config bool value. (RE)
    </summary><param name="key">The key value.</param><returns>The bool config value.</returns><remarks>
      <para>
        This uses the program config file which is the name of the program plus
        the extension ".config".
      </para>
      <para>
        // An example config file.&lt;br /&gt;
        &lt;&lt;span class="ltgt"&gt;?&lt;/span&gt;&lt;span class="name"&gt;xml&lt;/span&gt;&lt;span
        class="attrib"&gt; version&lt;/span&gt;="&lt;span class="data"&gt;1.0&lt;/span&gt;"&lt;span
        class="attrib"&gt; encoding&lt;/span&gt;="&lt;span class="data"&gt;utf-8&lt;/span&gt;"&lt;span
        class="ltgt"&gt; ?&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;&lt;span class="name"&gt;configuration&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class="pad1"&gt;&lt;/span&gt;&lt;&lt;span class="name"&gt;appSettings&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class="pad2"&gt;&lt;/span&gt;&lt;&lt;span class="name"&gt;add&lt;/span&gt;&lt;span
        class="attrib"&gt; key&lt;/span&gt;="&lt;span class="data"&gt;LocalDbDataAccess&lt;/span&gt;"&lt;span
        class="attrib"&gt; value&lt;/span&gt;="&lt;span class="data"&gt;true&lt;/span&gt;"&lt;span
        class="ltgt"&gt; /&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class="pad1"&gt;&lt;/span&gt;&lt;&lt;span class="ltgt"&gt;/&lt;/span&gt;&lt;span class="name"&gt;appSettings&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;&lt;span class="ltgt"&gt;/&lt;/span&gt;&lt;span class="name"&gt;configuration&lt;/span&gt;&gt;
      </para>
    </remarks><example>
      <code>
        using LJCNetCommon;
        
        // This returns true.
        bool localDbAccess = NetCommon.ConfigBool("LocalDbDataAccess");
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.ConfigColor(System.String,System.Drawing.Color@)">
            <summary>
      Retrieves the Config Color value. (RE)
    </summary><param name="key">The key value.</param><param name="color">The default color value.</param><returns>The Color setting value.</returns><remarks>
      <para>
        This uses the program config file which is the name of the program plus
        the extension ".config".&lt;br /&gt;
      </para>
      <para>
        // An example config file.&lt;br /&gt;
        &lt;&lt;span class="ltgt"&gt;?&lt;/span&gt;&lt;span class="name"&gt;xml&lt;/span&gt;&lt;span
        class="attrib"&gt; version&lt;/span&gt;="&lt;span class="data"&gt;1.0&lt;/span&gt;"&lt;span
        class="attrib"&gt; encoding&lt;/span&gt;="&lt;span class="data"&gt;utf-8&lt;/span&gt;"&lt;span
        class="ltgt"&gt; ?&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;&lt;span class="name"&gt;configuration&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class="pad1"&gt;&lt;/span&gt;&lt;&lt;span class="name"&gt;appSettings&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class="pad2"&gt;&lt;/span&gt;&lt;&lt;span class="name"&gt;add&lt;/span&gt;&lt;span
        class="attrib"&gt; key&lt;/span&gt;="&lt;span class="data"&gt;BeginColor&lt;/span&gt;"&lt;span
        class="attrib"&gt; value&lt;/span&gt;="&lt;span class="data"&gt;AliceBlue&lt;/span&gt;"&lt;span
        class="ltgt"&gt; /&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class="pad1"&gt;&lt;/span&gt;&lt;&lt;span class="ltgt"&gt;/&lt;/span&gt;&lt;span class="name"&gt;appSettings&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;&lt;span class="ltgt"&gt;/&lt;/span&gt;&lt;span class="name"&gt;configuration&lt;/span&gt;&gt;
      </para>
    </remarks><example>
      <code>
        using LJCNetCommon;
        
        // This returns var beginColor that is Color.AliceBlue.
        // If the key is not found it returns Color.Black.
        NetCommon.ConfigColor("BeginColor", out Color beginColor);
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetCommon.ConfigString(System.String)">
            <summary>
      Retrieves the Config string value. (RE)
    </summary><param name="key">The key value.</param><returns>The string config value.</returns><remarks>
      <para>
        This uses the program config file which is the name of the program plus
        the extension ".config".
      </para>
      <para>
        // An example config file.&lt;br /&gt;
        &lt;&lt;span class="ltgt"&gt;?&lt;/span&gt;&lt;span class="name"&gt;xml&lt;/span&gt;&lt;span
        class="attrib"&gt; version&lt;/span&gt;="&lt;span class="data"&gt;1.0&lt;/span&gt;"&lt;span
        class="attrib"&gt; encoding&lt;/span&gt;="&lt;span class="data"&gt;utf-8&lt;/span&gt;"&lt;span
        class="ltgt"&gt; ?&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;&lt;span class="name"&gt;configuration&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class="pad1"&gt;&lt;/span&gt;&lt;&lt;span class="name"&gt;appSettings&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class="pad2"&gt;&lt;/span&gt;&lt;&lt;span class="name"&gt;add&lt;/span&gt;&lt;span
        class="attrib"&gt; key&lt;/span&gt;="&lt;span class="data"&gt;ConnectionType&lt;/span&gt;"&lt;span
        class="attrib"&gt; value&lt;/span&gt;="&lt;span class="data"&gt;MySql&lt;/span&gt;"&lt;span
        class="ltgt"&gt; /&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;span class="pad1"&gt;&lt;/span&gt;&lt;&lt;span class="ltgt"&gt;/&lt;/span&gt;&lt;span class="name"&gt;appSettings&lt;/span&gt;&gt;&lt;br /&gt;
        &lt;&lt;span class="ltgt"&gt;/&lt;/span&gt;&lt;span class="name"&gt;configuration&lt;/span&gt;&gt;
      </para>
    </remarks><example>
      <code>
        using LJCNetCommon;
        
        // This returns "MySql".
        string dbType = NetCommon.ConfigString("ConnectionType");
      </code>
    </example>
        </member>
        <member name="F:LJCNetCommon.NetCommon.TypeBoolean">
            <summary>The Boolean type name.</summary>
        </member>
        <member name="F:LJCNetCommon.NetCommon.TypeDateTime">
            <summary>The DateTime type name.</summary>
        </member>
        <member name="F:LJCNetCommon.NetCommon.TypeDecimal">
            <summary>Type Decimal type name.</summary>
        </member>
        <member name="F:LJCNetCommon.NetCommon.TypeDouble">
            <summary>The Double type name.</summary>
        </member>
        <member name="F:LJCNetCommon.NetCommon.TypeInt16">
            <summary>The Int16 type name.</summary>
        </member>
        <member name="F:LJCNetCommon.NetCommon.TypeInt32">
            <summary>The Int32 type name.</summary>
        </member>
        <member name="F:LJCNetCommon.NetCommon.TypeInt64">
            <summary>The Int64 type name.</summary>
        </member>
        <member name="F:LJCNetCommon.NetCommon.TypeSingle">
            <summary>The Single type name.</summary>
        </member>
        <member name="F:LJCNetCommon.NetCommon.TypeString">
            <summary>The String type name.</summary>
        </member>
        <member name="T:LJCNetCommon.NetFile">
            <summary>
      Contains common file related static functions. (RE)
    </summary><remarks>
      The NetFile class contains file related static helper functions for
      all .NET program types.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.NetFile.CreateFolder(System.String)">
            <summary>
      Creates a Folder Path if it does not already exist. (E)
    </summary><param name="path">The File specification.</param><example>
      <code>
        using LJCNetCommon;

        // Creates a Folder Path if it does not already exist.
        private static void CreateFolder()
        {
          string fileSpec = @"SubFolder\File.txt";

          // Creates folder "SubFolder" from the current folder.
          NetFile.CreateFolder(fileSpec);
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetFile.GetRelativePath(System.String,System.String)">
            <summary>
      Returns the relative path.
    </summary><param name="fromPath">The "from" path.</param><param name="toFileSpec">The "to" file specification.</param><returns>The relative path.</returns>
        </member>
        <member name="M:LJCNetCommon.NetFile.ReadAllLines(System.String)">
            <summary>
      Get all text lines from a file.
    </summary><param name="fileSpec">The file specification.</param><returns>A string array of text lines.</returns>
        </member>
        <member name="M:LJCNetCommon.NetFile.WriteLog(System.String,System.String,System.Object[])">
            <summary>
      Writes a string format to the Log file with the current date and time.
    </summary><param name="logFileSpec">The Log file specification.</param><param name="formatText">The Format text.</param><param name="parameters">The Format parameters.</param>
        </member>
        <member name="M:LJCNetCommon.NetFile.WriteLogLine(System.String,System.String,System.Object[])">
            <summary>
      Writes a string format plus cr/lf to the Log file with the current date
      and time.
    </summary><param name="logFileSpec">The Log file specification.</param><param name="formatText">The Format text.</param><param name="parameters">The Format parameters.</param>
        </member>
        <member name="T:LJCNetCommon.NetString">
            <summary>
      Contains common string related static functions.
    </summary><remarks>
      <para>
        The NetCommon class contains string related static helper functions for
        all .NET program types.
      </para>
      <para>
        &lt;b&gt;Checking String Values&lt;/b&gt; &lt;br /&gt;
        These include: HasValue(), IsDigits() and IsEqual().
      </para>
      <para>
        &lt;b&gt;Formatting a String&lt;/b&gt; &lt;br /&gt;
        These include: GetPropertyName(), ExceptionString() and InitString().
      </para>
      <para>
        &lt;b&gt;Parsing Delimited String Values&lt;/b&gt; &lt;br /&gt;
        These include: GetDelimitedAndIndexes(), GetDelimitedString() and
        GetStringWithDelimiters().
      </para>
      <para>
        &lt;b&gt;Soundex Functions&lt;/b&gt; &lt;br /&gt;
        These are helper functions for creating Soundex values. &lt;br /&gt;
        These include: CreateLSoundex(), CreatePSoundex(), IsSoundexLetter()
        and Phonetic().
      </para>
    </remarks>
        </member>
        <member name="M:LJCNetCommon.NetString.HasValue(System.String)">
            <summary>
      Checks if a text value exists.
    </summary><param name="text">The text value.</param><returns>True if there is a text value, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.NetString.IsDigits(System.String)">
            <summary>
      Checks a string value for digits.
    </summary><param name="text">The text value.</param><returns>True if all digits, otherwise false.</returns>
        </member>
        <member name="M:LJCNetCommon.NetString.IsEqual(System.String,System.String)">
            <summary>
      Do an Ignore Case string compare.
    </summary><param name="stringA">The first string.</param><param name="stringB">The second string.</param>
        </member>
        <member name="M:LJCNetCommon.NetString.GetPropertyName(System.String)">
            <summary>
      Gets a column name with underscores converted to Pascal case.
    </summary><param name="name">The column name.</param><returns>The Pascal case property name.</returns>
        </member>
        <member name="M:LJCNetCommon.NetString.ExceptionString(System.Exception)">
            <summary>
      Creates an exception string with outer and inner exception.
    </summary><param name="e">The Exception object.</param><returns>The exception string.</returns>
        </member>
        <member name="M:LJCNetCommon.NetString.InitString(System.String)">
            <summary>
      Initializes a string to the trimmed value or null.
    </summary><param name="value">The string value.</param><returns>
      The trimmed string value or null if the string is null
      or an empty string when trimmed.
    </returns>
        </member>
        <member name="M:LJCNetCommon.NetString.GetDelimitedAndIndexes(System.String,System.String,System.Int32@,System.Int32@,System.Int32@,System.String)">
            <summary>
      Get the delimited string begin and end index.
    </summary><param name="text">The text value.</param><param name="beginDelimiter">The beginning delimiter.</param><param name="beginIndex">The begin index.</param><param name="endIndex">The end index.</param><param name="startIndex">The starting index.</param><param name="endDelimiter">The ending delimiter.</param><returns>The string between the specified delimiters.</returns><example>
      <code>
        using LJCNetCommon;
        
        // Get the delimited string begin and end index.
        private static void GetDelimitedAndIndexes()
        {
          // Get text that has different begin and end delimiter.
          var source = "&lt;summary&gt;This is some text.&lt;/summary&gt;";
          int startIndex = 0;
          var beginDelimiter = "&lt;summary&gt;";
          var endDelimiter = "&lt;/summary&gt;";
          var text = NetString.GetDelimitedAndIndexes(source, beginDelimiter
            , out int beginIndex, out int endIndex, ref startIndex, endDelimiter);
          // text = "This is some text.";
          // beginIndex = 0;
          // endIndex = 27;
          // startIndex = -1;

          // Get text that has the same begin and end delimiter.
          // The endDelimiter is not specified or null.
          startIndex = 0;
          source = "|This is some text.|";
          beginDelimiter = "|";
          text = NetString.GetDelimitedAndIndexes(source, beginDelimiter
            , out beginIndex, out endIndex, ref startIndex);
          // text = "This is some text.";
          // beginIndex = 0;
          // endIndex = 19;
          // startIndex = -1;

          // Get text that has no end delimiter.
          startIndex = 0;
          source = "|This is some text.";
          beginDelimiter = "|";
          text = NetString.GetDelimitedAndIndexes(source, beginDelimiter
            , out beginIndex, out endIndex, ref startIndex, "#NoDelimiter");
          // text = "This is some text.";
          // beginIndex = 0;
          // endIndex = 19;
          // startIndex = -1;

          // Get delimited text where the delimiters occur multiple times.
          startIndex = 0;
          source = "|This is some text.| |and some more here.|";
          beginDelimiter = "|";
          while (startIndex &gt; -1)
          {
            text = NetString.GetDelimitedAndIndexes(source, beginDelimiter
              , out beginIndex, out endIndex, ref startIndex);
            // First time: text = "This is some text.";
            // beginIndex = 0;
            // endIndex = 19;
            // startIndex = 20;
            // Second time: text = "and some more here.";
            // beginIndex = 21;
            // endIndex = 41;
            // startIndex = -1
          }
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetString.GetDelimitedString(System.String,System.String,System.Int32@,System.String)">
            <summary>
      Gets the string between the specified delimiters.
    </summary><param name="text">The text value.</param><param name="beginDelimiter">The beginning delimiter.</param><param name="startIndex">The starting index.</param><param name="endDelimiter">The ending delimiter.</param><returns>The text between the delimiters.</returns><example>
      <code>
        using LJCNetCommon;
        
        // Gets the string between the specified delimiters.
        private static void GetDelimitedString()
        {
          var source = "&lt;summary&gt;This is some text.&lt;/summary&gt;";
          var startIndex = 0;
          var beginDelimiter = "&lt;summary&gt;";
          var endDelimiter = "&lt;/summary&gt;";

          var text = NetString.GetDelimitedString(source, beginDelimiter, ref startIndex
            , endDelimiter);
          // text = "This is some text.";
          // startIndex = -1;
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetString.GetStringWithDelimiters(System.String,System.String,System.Int32@,System.String)">
            <summary>
      Get the string including the specified delimiters.
    </summary><param name="text">The text value.</param><param name="beginDelimiter">The beginning delimiter.</param><param name="startIndex">The starting index.</param><param name="endDelimiter">The ending delimiter.</param><returns>The text including the specified delimiters.</returns><example>
      <code>
        using LJCNetCommon;

        // Get the string including the specified delimiters.
        private static void GetStringWithDelimiters()
        {
          var source = "&lt;summary&gt;This is some text.&lt;/summary&gt;";
          var startIndex = 0;
          var beginDelimiter = "&lt;summary&gt;";
          var endDelimiter = "&lt;/summary&gt;";
          var text = NetString.GetStringWithDelimiters(source, beginDelimiter
            , ref startIndex, endDelimiter);
          // text = "&lt;summary&gt;This is some text.&lt;/summary&gt;";
          // startIndex = -1;

          // Get text that has the same begin and end delimiter.
          // The endDelimiter is not specified or null.
          source = "|This is some text.|";
          startIndex = 0;
          beginDelimiter = "|";
          text = NetString.GetStringWithDelimiters(source, beginDelimiter
            , ref startIndex);
          // text = "|This is some text.|";
          // startIndex = -1;

          // Get text that has no end delimiter.
          source = "|This is some text.";
          startIndex = 0;
          beginDelimiter = "|";
          text = NetString.GetStringWithDelimiters(source, beginDelimiter
            , ref startIndex, "#NoDelimiter");
          // text = "|This is some text.";
          // startIndex = -1;

          // Get delimited text where the delimiters occur multiple times.
          source = "|This is some text.| |and some more here.|";
          startIndex = 0;
          beginDelimiter = "|";
          while (startIndex &gt; -1)
          {
            text = NetString.GetStringWithDelimiters(source, beginDelimiter
              , ref startIndex);
            // First time: text = "|This is some text.|";
            // startIndex = 20;
            // Second time: text = "|and some more here.|";
            // startIndex = -1
          }
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.NetString.CreateLSoundex(System.String)">
            <summary>
      Creates a letter based soundex value. (D)
    </summary><param name="text">The text value.</param><returns>The Letter based soundex value.</returns><remarks>
      Scatter = SCTR&lt;br /&gt;
      Aphrodisiac = APHRDSC&lt;br /&gt;
      Pharmacy = PHRMC&lt;br /&gt;
      Psychology = PSCHLG&lt;br /&gt;
      Cart = CRT&lt;br /&gt;
      Ceiling = CLNG&lt;br /&gt;
      Cyan = CN
    </remarks>
        </member>
        <member name="M:LJCNetCommon.NetString.CreatePSoundex(System.String)">
            <summary>
      Creates a Phonetic based soundex value. (D)
    </summary><param name="text">The text value.</param><returns>The Phonetic based soundex value.</returns><remarks>
      Scatter = SCTR&lt;br /&gt;
      Aphrodisiac = AFRDSC&lt;br /&gt;
      Pharmacy = FRMS&lt;br /&gt;
      Psychology = SCHLG&lt;br /&gt;
      Cart = KRT&lt;br /&gt;
      Ceiling = SLNG&lt;br /&gt;
      Cyan = SN
    </remarks>
        </member>
        <member name="M:LJCNetCommon.NetString.IsSoundexLetter(System.Char,System.Char)">
            <summary>
      Checks if the letter is a soundex skipped letter. (R)
    </summary><param name="letter">The text letter.</param><param name="prevLetter">The text previous letter.</param><returns>True if the letter should be skipped, otherwise false.</returns><remarks>
      True if the letter is the first letter or not a vowel and not the same as
      the previous letter.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.NetString.Phonetic(System.String,System.Int32@,System.Char@)">
            <summary>
      Creates a Phonetic character from the supplied text starting at the
      supplied index. (D)
    </summary><param name="text">The text value.</param><param name="index">The start index.</param><param name="letter">The Phonetic letter.</param><returns>True if a Phonetic was created, otherwise false.</returns><remarks>
      <para>
        Sets the letter parameter to:&lt;br /&gt;  -
        "F" if the current and following letter are "PH"&lt;br /&gt;
        - "S" if the current letter is "P", the following letter is "S"
        and the third letter is a vowel or "Y".&lt;br /&gt;
        - "K" if the current letter is "C" and the following letter is "A", "O"
        or "U".&lt;br /&gt;
        - "S" if the current letter is "C" and the following letter is "E", "I"
        or "Y".&lt;br /&gt;
        - Otherwise, the same letter as at the current index.
      </para>
    </remarks>
        </member>
        <member name="M:LJCNetCommon.NetString.AddMissingArgument(System.String,System.String)">
            <summary>
            Adds the missing argument name to the message.
            </summary>
            <param name="message">The message text.</param>
            <param name="argument">The argument value.</param>
        </member>
        <member name="M:LJCNetCommon.NetString.ThrowInvalidArgument(System.String)">
            <summary>
            Throws the invalid argument exception if message has a value.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="T:LJCNetCommon.LJCReflect">
            <summary>
      Provides object property reflection capabilities. (DE)
    </summary><remarks>
      <para>
        This class is commonly used when accessing properties of a Data Object.
        The object reference is passed to the constructor.
      </para>
      <para>
        The property objects can then be accessed with: GetPropertyNames(),
        GetPropertyType(), GetValue(), SetPropertyValue() and SetValue()
      </para>
      <para>
        The typed property values can be retrieved with: GetDateTime(),
        GetDbDateString(), GetInt32() and GetString().
      </para>
    </remarks>
        </member>
        <member name="M:LJCNetCommon.LJCReflect.#ctor(System.Object)">
            <summary>
      Instantiates an instance of the class.
    </summary><param name="source">The source object.</param>
        </member>
        <member name="M:LJCNetCommon.LJCReflect.SetSource(System.Object)">
            <summary>
      Sets the source object and type values.
    </summary><param name="source">The source object.</param>
        </member>
        <member name="M:LJCNetCommon.LJCReflect.GetDateTime(System.String)">
            <summary>
      Gets the property value as a DateTime value.
    </summary><param name="propertyName">The property name.</param><returns>The string property value.</returns>
        </member>
        <member name="M:LJCNetCommon.LJCReflect.GetDbDateString(System.String)">
            <summary>
      Gets the property value as a DB date/time string.
    </summary><param name="propertyName">The property name.</param><returns>The object property value or null if not a valid date/time.</returns>
        </member>
        <member name="M:LJCNetCommon.LJCReflect.GetInt32(System.String)">
            <summary>
      Gets the property value as an integer.
    </summary><param name="propertyName">The property name.</param><returns>The integer property value.</returns>
        </member>
        <member name="M:LJCNetCommon.LJCReflect.GetPropertyInfo(System.String)">
            <summary>
      Gets the cached PropertyInfo value.
    </summary><param name="propertyName">The property name.</param><returns>The PropertyInfo object.</returns>
        </member>
        <member name="M:LJCNetCommon.LJCReflect.GetPropertyNames">
            <summary>
      Gets a list of the property names.
    </summary><returns>The property name collection.</returns>
        </member>
        <member name="M:LJCNetCommon.LJCReflect.GetPropertyType(System.String)">
            <summary>
      Get the property type.
    </summary><param name="propertyName">The property name.</param><returns>The property type.</returns>
        </member>
        <member name="M:LJCNetCommon.LJCReflect.GetString(System.String)">
            <summary>
      Gets the property value as a string.
    </summary><param name="propertyName">The property name.</param><returns>The string property value.</returns><example>
      <code>
        using LJCNetCommon;
        
        // Initialize LJCReflect outside of loop.
        var mReflect = new LJCReflect(records[0]);
        foreach (var record in records)
        {
          // Use SetSource to change the data record.
          mReflect.SetSource(record);
          var value = mReflect.GetString("LastName");
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.LJCReflect.GetValue(System.String)">
            <summary>
      Gets the property value as an object using a delegate. (E)
    </summary><param name="propertyName">The property name.</param><returns>The object property value.</returns><example>
      <code>
        using LJCNetCommon;
        
        // Initialize LJCReflect outside of loop.
        var mReflect = new LJCReflect(records[0]);
        foreach (var record in records)
        {
          // Use SetSource to change the data record.
          mReflect.SetSource(record);
          var value = mReflect.GetValue("LastName");
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.LJCReflect.GetValueReflect(System.String)">
            <summary>
      Gets the property value as an object using reflection.
    </summary><param name="propertyName">The property name.</param><returns>The object property value.</returns>
        </member>
        <member name="M:LJCNetCommon.LJCReflect.SetPropertyValue(System.String,System.Object)">
            <summary>
      Sets the property value based on value type. (E)
    </summary><param name="propertyName">The property name.</param><param name="value">The property value.</param><example>
      <code>
        using System;
        using System.Data;
        using System.Data.Common;
        using LJC.DataAccess;
        
        // Sets the data object values from the DbColumns object.
        public static void SetObjectValues(DbColumns dbColumns, object dataObject)
        {
          LJCReflect reflect;

          reflect = new LJCReflect(dataObject);
          foreach (DbColumn dbColumn in dbColumns)
          {
            reflect.SetPropertyValue(dbColumn.PropertyName, dbColumn.Value);
          }
        }
      </code>
    </example>
        </member>
        <member name="M:LJCNetCommon.LJCReflect.SetValue(System.String,System.Object,System.Reflection.PropertyInfo)">
            <summary>
      Sets the property value.
    </summary><param name="propertyName">The property name.</param><param name="value">The property value.</param><param name="propertyInfo">The PropertyInfo value.</param>
        </member>
        <member name="P:LJCNetCommon.LJCReflect.PropertyInfos">
            <summary>Gets or sets the PropertyInfos value.</summary>
        </member>
        <member name="T:LJCNetCommon.PropertyDelegate">
            <summary>Represents a PropertyDelegate definition.</summary>
        </member>
        <member name="P:LJCNetCommon.PropertyDelegate.PropertyName">
            <summary>Gets or sets the PropertyName value.</summary>
        </member>
        <member name="P:LJCNetCommon.PropertyDelegate.Value">
            <summary>Gets or sets the Delegate reference.</summary>
        </member>
        <member name="T:LJCNetCommon.PropertyDelegates">
            <summary>Represents a collection of PropertyDelegate objects.</summary>
        </member>
        <member name="M:LJCNetCommon.PropertyDelegates.Add(System.Reflection.PropertyInfo)">
            <summary>
      Creates and adds a PropertyDelegate object to the collection. (R)
    </summary><param name="propertyInfo">The PropertyInfo object.</param><returns>The PropertyDelegate object.</returns><remarks>
      Returns the existing PropertyDelegate if it is already in the list.
    </remarks>
        </member>
        <member name="M:LJCNetCommon.PropertyDelegates.LJCSearchName(System.String)">
            <summary>
      Returns the PropertyDelegate object if found in the list.
    </summary><param name="propertyName">The property name.</param><returns>The PropertyDelegate object.</returns>
        </member>
        <member name="M:LJCNetCommon.PropertyDelegates.LJCCreateDelegate(System.Reflection.PropertyInfo)">
            <summary>
      Creates and returns the delegate for the named property.
    </summary><param name="propertyInfo">The PropertyInfo object.</param><returns>The property access delegate.</returns>
        </member>
    </members>
</doc>
