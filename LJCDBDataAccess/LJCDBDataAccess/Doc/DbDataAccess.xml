<?xml version="1.0" encoding="utf-8" ?>
<items>
  <DbDataAccessC>
    <summary>
      Initializes an object instance with the supplied values.
    </summary>
    <param name="connectionString">The Connection string.</param>
    <param name="providerName">The Provider name.</param>
    <param name="databaseName">The Database name.</param>
  </DbDataAccessC>

  <!-- Public Methods -->
  <Execute>
    <summary>
      Executes the specified DbRequest definition.
    </summary>
    <param name="dbRequest">
      The &lt;span class="userType"&gt;DbRequest&lt;/span&gt;
      object.
    </param>
    <returns>
      The &lt;span class="userType"&gt;DbResult&lt;/span&gt;
      object.</returns>
  </Execute>
  
  <!-- Private Data Methods -->
  <Add>
    <summary>
      Inserts a record with the specified columns.
      (E)
    </summary>
    <returns>The database result XML message.</returns>
    <remarks>
      <para>
        This method is called from the
        &lt;span class="commonType"&gt;Execute()&lt;/span&gt;
        method if the DbRequest.QueryType is "Insert".
      </para>
    </remarks>
    <example>
      <code>
        // Adds a Person record.
        private static void Add(DbDataAccess dbDataAccess
          , DbColumns dataDefinition)
        {
          // Create the list of included columns.
          // This list must not include the database assigned columns
          // or the database assigned columns must have the AutoIncrement
          // value set to "true".
          List&lt;string&gt; columnNames = new List&lt;string&gt;();
          foreach (DbColumn column in dataDefinition)
          {
            if (column.ColumnName != "Id")
            {
              columnNames.Add(column.ColumnName);
            }
          }

          // The inserted columns must not include the DB assigned columns.
          Person dataRecord = new Person()
          {
            Name = "TestName",
            PrincipleFlag = false
          };

          // Create a Data Columns object with the included data definitions
          // and values from the data record.
          var dataColumns = DbCommon.QueryDataColumns(dataRecord, columnList
            , dataDefinition);

          // This code is needed only if there are database assigned columns.
          DbColumns keyColumns = GetKeyColumns(dataRecord, dataDefinition);

          // Create query with columns containing values from the record.
          DbRequest dbRequest = new DbRequest()
          {
            Columns = dataColumns,
            KeyColumns = keyColumns
            QueryType = QueryType.Insert.ToString(),
            TableName = "PersonTest",
          };
          DbResult dbResult = dbDataAccess.Execute(dbRequest);

          if (dbResult != null)
          {
            string sqlStatement = dbResult.ExecutedSql;

            // This code is needed only if there are database assigned columns.
            if (dbResult.DbRecords != null &amp;&amp; dbResult.DbRecords.Count > 0)
            {
              SetAssignedValues(dataRecord, dbResult.DbRecords[0]);
            }
          }
        }

        // Gets the key columns if there are database assigned columns.
        private static DbColumns GetKeyColumns(Person person
          , DbColumns dataDefinition)
        {
          DbColumns retValue = null;

          // Create the list of database assigned and lookup column names.
          // This list must include the database assigned column definitions.
          List&lt;string&gt; lookupColumnNames = new List&lt;string&gt;()
          {
            "Id",
            "Name"
          };

          // Create a Lookup Keys object with the lookup data definitions
          // and values from the data record.
          // This is the unique key to find the inserted record for obtaining
          // the database assigned values.
          retValue = DbCommon.QueryDataKeys(person, dataDefinintion
            , lookupColumnNames);

          // Create the list of database assigned columns and updates
          // the key columns.
          List&lt;string&gt; dbAssignedColumnNames = new List&lt;string&gt;()
          {
            "Id"
          };
          DbCommon.SetDatabaseAssignedKeys(retValue, dbAssignedColumnNames);
          return retValue;
        }

        // Set the database assigned values.
        private static void SetAssignedValues(Person person, DbValues resultRecord)
        {
          Person addedPerson = new Person();
          DbCommon.SetObjectValues(resultRecord, addedPerson);
          person.ID = addedPerson.ID;
        }
      </code>
    </example>
  </Add>
  <Delete>
    <summary>
      Deletes a record.
      (E)
    </summary>
    <returns>The result XML message.</returns>
    <remarks>
      <para>
        This method is called from the
        &lt;span class="commonType"&gt;Execute()&lt;/span&gt;
        method if the DbRequest.QueryType is "Delete".
      </para>
    </remarks>
    <example>
      <code>
        // Deletes a record.
        private static void Delete(DbDataAccess dbDataAccess
          , DbColumns dataDefinition)
        {
          // Create Key Columns.
          var keyColumns = new DbColumns()
          {
            { "Name", (object)"TestNameUpdated" }
          };
          dataDefinition.LJCSetExcludeKeyValue("PrincipleFlag");

          var queryKeyColumns = DbCommon.QueryKeys(keyColumns, dataDefinition);
          DbRequest dbRequest = new DbRequest()
          {
            KeyColumns = queryKeyColumns
            QueryType = QueryType.Delete.ToString(),
            TableName = "PersonTest",
          };
          DbResult dbResult = dbDataAccess.Execute(dbRequest);

          if (dbResult != null)
          {
            string sqlStatement = dbResult.ExecutedSql;
          }
        }
      </code>
    </example>
  </Delete>
  <ExecuteClientSql>
    <summary>
      Executes a "Non-Query" client SQL statement.
      (E)
    </summary>
    <returns>The result XML message.</returns>
    <remarks>
      <para>
        This method is called from the
        &lt;span class="userType"&gt;Execute()&lt;/span&gt;
        method if the DbRequest.QueryType is "ExecuteSql".
      </para>
    </remarks>
    <example>
      <code>
        // Execute a non-query SQL statement.
        private static void ExecuteClientSql(DbDataAccess dbDataAccess
          , DbColumns dataDefinition)
        {
          StringBuilder builder = new StringBuilder(64);
          builder.AppendLine("update PersonTest");
          builder.AppendLine("set Name = 'TestNameUpdated'");
          builder.AppendLine("where Name = 'TestName'");
          string sql = builder.ToString();

          DbRequest dbRequest = new DbRequest()
          {
            ClientSql = sql
            QueryType = QueryType.ExecuteSql.ToString()",
            TableName = "PersonTest",
          };
          DbResult dbResult = dbDataAccess.Execute(dbRequest);
          
          if (dbResult != null)
          {
            string sqlStatement = dbResult.ExecutedSql;
            int affectedCount = dbResult.AffectedRecords;
          }
        }
      </code>
    </example>
  </ExecuteClientSql>
  <LoadClientSql>
    <summary>
      Executes a "Load" client SQL statement.
      (E)
    </summary>
    <returns>The result XML message.</returns>
    <remarks>
      <para>
        This method is called from the
        &lt;span class="commonType"&gt;Execute()&lt;/span&gt;
        method if the DbRequest.QueryType is "LoadSql".
      </para>
    </remarks>
    <example>
      <code>
        // Selects multiple records with an SQL statement.
        private static Persons LoadClientSql(DbDataAccess dbDataAccess
          , DbColumns dataDefinition)
        {
          Person retValue = null;

          StringBuilder builder = new StringBuilder(64);
          builder.AppendLine("select * from PersonTest");
          string sql = builder.ToString();

          DbColumns dataColumns = null;
          bool isColumnModifications = true;
          if (isColumnModifications)
          {
            // Create the list of included columns.
            // This list should include the database assigned columns.
            List&lt;string&gt; columnNames = new List&lt;string&gt;();
            foreach (DbColumn column in dataDefinition)
            {
              columnNames.Add(column.ColumnName);
            }

            // Create a Data Columns object with the included data definitions
            // and values from the data record.
            dataColumns = DbCommon.QueryColumns(columnNames, dataDefinition);
          }
          
          DbRequest dbRequest = new DbRequest()
          {
            ClientSql = sql
            Columns = dataColumns,
            QueryType = QueryType.LoadSQL.ToString(),
            TableName = "PersonTest",
          };
          DbResult dbResult = dbDataAccess.Execute(dbRequest);
          
          if (dbResult != null)
          {
            string sqlStatement = dbResult.ExecutedSql;
            if (dbResult.DbRecords != null &amp;&amp; dbResult.DbRecords.Count > 0)
            {
              retValue = new Persons();
              foreach (DbValues dbValues in dbResult.DbRecords)
              {
                Person person = new Person();
                DbCommon.SetObjectValues(dbValues, retValue);
                retValue.Add(person);
              }  
            }
            return retValue;
          }
        }
      </code>
    </example>
  </LoadClientSql>
  <Load>
    <summary>
      Retrieves multiple data rows.
      (E)
    </summary>
    <returns>The result XML message.</returns>
    <remarks>
      <para>
        This method is called from the
        &lt;span class="commonType"&gt;Execute()&lt;/span&gt;
        method if the DbRequest.QueryType is "Load".
      </para>
    </remarks>
    <example>
      <code>
        // Loads multiple Person objects.
        private static Persons Load(DbDataAccess dbDataAccess
          , DbColumns dataDefinition)
        {
          Person retValue = null;

          // Create the list of included columns.
          // This list should include the database assigned columns.
          List&lt;string&gt; columnNames = new List&lt;string&gt;();
          foreach (DbColumn column in dataDefinition)
          {
            columnNames.Add(column.ColumnName);
          }

          // Create a Data Columns object with the included data definitions
          // and values from the data record.
          var dataColumns = DbCommon.QueryColumns(columnNames, dataDefinition);

          // Create Key Columns.
          var keyColumns = new DbColumns()
          {
            { "Name", (object)"TestName" }
          };
          dataDefinition.LJCSetExcludeKeyValue("PrincipleFlag");
 
          var queryKeyColumns = DbCommon.QueryKeys(keyColumns, dataDefinition);

          // Create a query with the retrieve columns.
          // The retrieved columns should include the DB assigned columns.
          DbRequest dbRequest = new DbRequest()
          {
            Columns = dataColumns
            //KeyColumns = queryKeyColumns
            QueryType = QueryType.Load.ToString(),
            TableName = "PersonTest",
          };
          DbResult dbResult = dbDataAccess.Execute(dbRequest);

          if (dbResult != null)
          {
            string sqlStatement = dbResult.ExecutedSql;
            if (dbResult.DbRecords != null &amp;&amp; dbResult.DbRecords.Count > 0)
            {
              retValue = new Persons();
              foreach (DbValues dbValues in dbResult.DbRecords)
              {
                Person person = new Person();
                DbCommon.SetObjectValues(dbValues, retValue);
                retValue.Add(person);
              }
            }
          }
          return retValue;
        }
      </code>
    </example>
  </Load>
  <Retrieve>
    <summary>
      Retrieves the data row values.
      (E)
    </summary>
    <param name="dbRequest">The request object.</param>
    <returns>The result XML message.</returns>
    <remarks>
      <para>
        This method is called from the
        &lt;span class="commonType"&gt;Execute()&lt;/span&gt;
        method if the DbRequest.RequestType is "Select".
      </para>
    </remarks>
    <example>
      <code>
        // Retrieves a Person object.
        private static Person Retrieve(DbDataAccess dbDataAccess
          , DbColumns dataDefinition)
        {
          Person retValue = null;

          // Create the list of included columns.
          // This list should include the database assigned columns.
          List&lt;string&gt; columnList = new List&lt;string&gt;();
          foreach (DbColumn column in dataDefinition)
          {
            columnList.Add(column.ColumnName);
          }

          // Create a Data Columns object with the included data definitions
          // and values from the data record.
          var dataColumns = DbCommon.QueryColumns(columnList, dataDefinition);

          // Create Key Columns.
          var keyColumns = new DbColumns()
          {
            { "Name", (object)"TestName" }
          };
          dataDefinition.LJCSetExcludeKeyValue("PrincipleFlag");

          var queryKeyColumns = DbCommon.QueryKeys(keyColumns, dataDefinition);

          // Create a query with the retrieve columns.
          // The retrieved columns should include the DB assigned columns.
          DbRequest dbRequest = new DbRequest()
          {
            Columns = dataColumns,
            KeyColumns = queryKeyColumns
            QueryType = QueryType.Select.ToString(),
            TableName = "PersonTest",
          };
          DbResult dbResult = dbDataAccess.Execute(dbRequest);

          if (dbResult != null)
          {
            string sqlStatement = dbResult.ExecutedSql;
            if (dbResult.DbRecords != null &amp;&amp; dbResult.DbRecords.Count > 0)
            {
              retValue = new Person();
              DbCommon.SetObjectValues(dbResult.DbRecords[0], retValue);
            }
          }
          return retValue;
        }
      </code>
    </example>
  </Retrieve>
  <RetrieveClientSql>
    <summary>
      Executes a "Retrieve" client SQL statement.
      (E)
    </summary>
    <returns>The result XML message.</returns>
    <remarks>
      <para>
        This method is called from the
        &lt;span class="userType"&gt;Execute()&lt;/span&gt;
        method if the DbRequest.QueryType is "RetrieveSql".
      </para>
    </remarks>
    <example>
      <code>
        // Selects a record with an SQL statement.
        private static Person RetrieveClientSql(DbDataAccess dbDataAccess
          , DbColumns dataDefinition)
        {
          Person retValue = null;

          StringBuilder builder = new StringBuilder(64);
          builder.AppendLine("select * from PersonTest");
          builder.AppendLine("where Name = 'TestName'");
          string sql = builder.ToString();

          DbColumns dataColumns = null;
          bool isColumnModifications = true;
          if (isColumnModifications)
          {
            // Create the list of included columns.
            // This list should include the database assigned columns.
            List&lt;string&gt; columnNames = new List&lt;string&gt;();
            foreach (DbColumn column in dataDefinition)
            {
              columnNames.Add(column.ColumnName);
            }

            // Create a Data Columns object with the included data definitions
            // and values from the data record.
            dataColumns = DbCommon.QueryColumns(columnNames, dataDefinition);
          }
          
          DbRequest dbRequest = new DbRequest()
          {
            ClientSql = sql
            Columns = dataColumns,
            QueryType = QueryType.RetrieveSQL.ToString(),
            TableName = "PersonTest",
          };
          DbResult dbResult = dbDataAccess.Execute(dbRequest);
          
          if (dbResult != null)
          {
            string sqlStatement = dbResult.ExecutedSql;
            if (dbResult.DbRecords != null &amp;&amp; dbResult.DbRecords.Count > 0)
            {
              retValue = new Person();
              DbCommon.SetObjectValues(dbResult.DbRecords[0], retValue);
            }
          }
          return retValue;
        }
      </code>
    </example>
  </RetrieveClientSql>
  <SelectProcedure>
    <summary>
      Retrieves the data row values from a Stored Procedure.
    </summary>
    <param name="dbRequest">The request object.</param>
    <returns>The result XML message.</returns>
    <remarks>
      <para>
        This method is called from the
        &lt;span class="userType"&gt;Execute()&lt;/span&gt;
        method if the DbRequest.QueryType is "SelectProcedure".
      </para>
    </remarks>
  </SelectProcedure>
  <TableNames>
    <summary>
      Retrieves the table names for the specified database.
    </summary>
    <param name="databaseName">The Database name.</param>
    <param name="dbRequest">The request object.</param>
    <returns>The result XML message.</returns>
  </TableNames>
  <Update>
    <summary>
      Updates a database record.
      (E)
    </summary>
    <returns>The result XML message.</returns>
    <remarks>
      <para>
        This method is called from the
        &lt;span class="commonType"&gt;Execute()&lt;/span&gt;
        method if the DbRequest.QueryType is "Update".
        (E)
      </para>
    </remarks>
    <example>
      <code>
        // Updates a record.
        private static void Update(DbDataAccess dbDataAccess
          , DbColumns dataDefinition)
        {
          // Create the list of included columns.
          // This list must not include the database assigned columns
          // or the database assigned columns must have the AutoIncrement
          // value set to "true".
          List&lt;string&gt; columnNames = new List&lt;string&gt;();
          foreach (DbColumn column in dataDefinition)
          {
            if (column.ColumnName != "Id")
            {
              columnNames.Add(column.ColumnName);
            }
          }

          Person dataRecord = new Person()
          {
            Name = "TestNameUpdated"
          };

          // Create a Data Columns object with the included data definitions
          // and values from the data record.
          var dataColumns = DbCommon.QueryDataColumns(dataRecord
            , dataDefinition, columnNames);

          // Create Key Columns.
          var keyColumns = new DbColumns()
          {
            { "Name}, (object)"TestName" }
          };
          dataDefinition.LJCSetExcludeKeyValue("PrincipleFlag");

          var queryKeyColumns = DbCommon.QueryKeys(keyColumns, dataDefinition);

          // Create query with columns containing values from the record.
          // The updated columns must not include the Db assigned columns.
          DbRequest dbRequest = new DbRequest()
          {
            Columns = dataColumns,
            KeyColumns = queryKeyColumns
            QueryType = QueryType.Update.ToString(),
            TableName = "PersonTest",
          };
          DbResult dbResult = dbDataAccess.Execute(dbRequest);

          if (dbResult != null)
          {
            string sqlStatement = dbResult.ExecutedSql;
            int affectedCount = dbResult.AffectedRecords;
          }
          return retValue;
        }
      </code>
    </example>
  </Update>
  <!-- DataConfig Methods -->
  <GetConfigValues>
    <summary>
      Sets the DataConfig values.
    </summary>
    <param name="dataConfigName">The DataConfig name.</param>
  </GetConfigValues>
 
  <!-- Private Methods -->
  <CreateResult>
    <summary>
      Creates the result object with common values.
    </summary>
    <param name="dbRequest">The request object.</param>
    <returns>
      The &lt;span class="userType"&gt;DbResult&lt;/span&gt;
      object.
    </returns>
  </CreateResult>
</items>
