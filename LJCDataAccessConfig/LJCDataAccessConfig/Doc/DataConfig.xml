<?xml version="1.0" encoding="utf-8" ?>
<!-- Copyright (c) Lester J. Clark 2021,2022 - All Rights Reserved -->
<items>
	<GetProviderName>
		<summary>
			Retrieves the provider name value.
		</summary>
		<param name="connectionTypeName">The database connection type string.</param>
		<returns>The provider name.</returns>
		<example>
			<code>
				using LJCDataAccessConfig;

				string connTypeName = "SQLServer";
				string providerName = DataConfig.GetProviderName(connTypeName);
			</code>
		</example>
	</GetProviderName>
	<DataConfigC>
		<summary>
			Initializes an object instance.
		</summary>
	</DataConfigC>
	<ToString>
		<summary>
			The object string identifier.
		</summary>
		<returns>The identifier value.</returns>
	</ToString>
	<GetProviderName2>
		<summary>
			Retrieves the provider name value.
		</summary>
		<returns>The provider name.</returns>
		<example>
			<code>
				using LJCDataAccessConfig;

				DataConfigs configs = new DataConfigs();
				configs.LJCLoadData();
				DataConfig config = dataConfigs.LJCGetByName("ConfigName");

				string providerName = config.GetProviderName();
			</code>
		</example>
	</GetProviderName2>
	<GetConnectionString1>
		<summary>
			Creates the populated connection string.
		</summary>
		<returns>The connection string.</returns>
		<example>
			<code>
				using LJCDataAccessConfig;

				DataConfigs configs = new DataConfigs();
				configs.LJCLoadData();
				DataConfig config = configs.LJCGetByName("ConfigName");

				string connString = config.GetConnectionString();
			</code>
		</example>
	</GetConnectionString1>
	<GetConnectionString2>
		<summary>
			Creates the populated connection string from the ConnectionType name.
		</summary>
		<param name="connectionTypeName">The ConnectionType name.</param>
		<returns>The connection string.</returns>
		<example>
			<code>
				using LJCDataAccessConfig;

				DataConfigs configs = new DataConfigs();
				configs.LJCLoadData();
				DataConfig config = dataConfigs.LJCGetByName("ConfigName");

				string connTypeName = config.ConnectionTypeName;
				string connString = config.GetConnectionString(connTypeName);
			</code>
		</example>
	</GetConnectionString2>
	<GetConnectionStringFromText>
		<summary>
			Creates the populated connection string from the template text.
		</summary>
		<param name="templateText">The connection template text value.</param>
		<returns>The connection string.</returns>
		<example>
			<code>
				using LJCDataAccessConfig;

				DataConfigs configs = new DataConfigs();
				configs.LJCLoadData();
				DataConfig config = configs.LJCGetByName("ConfigName");

				ConnectionTemplates templates = new ConnectionTemplates();
				templates.LJCLoadData();
				ConnectionTemplate template = templates.LJCGetByName("SQLServer");

				string connString;
				connString = config.GetConnectionStringFromText(template.Template);
			</code>
		</example>
	</GetConnectionStringFromText>
	<SQLIntegratedConnectionString>
		<summary>
			Creates the SQL integrated connection string from an internal value.
		</summary>
		<returns>The connection string.</returns>
		<example>
			<code>
				using LJCDataAccessConfig;

				DataConfigs configs = new DataConfigs();
				configs.LJCLoadData();
				DataConfig config = configs.LJCGetByName("ConfigName");

				string connString = config.SQLIntegratedConnectionString("SQLServer");
			</code>
		</example>
	</SQLIntegratedConnectionString>
	<CompareTo>
		<summary>
			Provides the default Sort functionality.
		</summary>
		<param name="other">The compared to object.</param>
		<returns>An integer value indicating the order relationship.</returns>
	</CompareTo>
</items>
