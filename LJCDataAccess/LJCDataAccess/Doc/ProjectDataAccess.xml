<?xml version="1.0" encoding="utf-8" ?>
<!-- Copyright (c) Lester J. Clark 2021,2022 - All Rights Reserved -->
<items>
  <LJCDataAccess>
    <summary>
      Implements an ADO.NET SQL data access control layer
      (DE).
    </summary>
    <remarks>
      <para>
        The Data Access class encapsulates the repetitive code required to
        perform common database functions using ADO.Net. This reduces the amount
        of application code required to access this functionality and provides a
        standard location for implementing common best practices.
      </para>
      <para>
        This class is capable of connecting using the SQL Server data provider,
        OLEDB driver, ODBC driver or MySQL data provider.
      </para>
      <para>
        The "Select" methods are:
        &lt;span class="commonType"&gt;FillDataTable()&lt;/span&gt;,
        &lt;span class="commonType"&gt;GetDataReader()&lt;/span&gt;,
        &lt;span class="commonType"&gt;GetDataSet()&lt;/span&gt;,
        &lt;span class="commonType"&gt;GetDataTable()&lt;/span&gt;,
        &lt;span class="commonType"&gt;GetProcedureDataTable()&lt;/span&gt; and
        &lt;span class="commonType"&gt;GetSchemaOnly()&lt;/span&gt;.
      </para>
      <para>
        The "Insert", "Update" and "Delete" method is
        &lt;span class="commonType"&gt;ExecuteNonQuery()&lt;/span&gt;.
      </para>
      <para>
        The "Script" methods are:
        &lt;span class="commonType"&gt;ExecuteScript() and
        &lt;span class="commonType"&gt;ExecuteScriptText()&lt;/span&gt;.
      </para>
      <para>
        The most commonly used methods are
        &lt;span class="commonType"&gt;GetDataTable()&lt;/span&gt;,
        &lt;span class="commonType"&gt;ExecuteNonQuery()&lt;/span&gt; and
        &lt;span class="commonType"&gt;GetSchemaOnly()&lt;/span&gt;.
      </para>
      <para>-- Project Level Remarks</para>
      <para>Data Access Library</para>
      <para>
        The Data Access library contains classes that provide common functionality
        for program access to database tables.&lt;br /&gt;
      </para>
      <para>
        The primary class is
        &lt;span class="userType"&gt;DataAccess&lt;/span&gt;.
      </para>
      <para>
        The test code is found in project LJCDataAccessTest.
      </para>
    </remarks>
    <example>
      <para>
        This is main function sample code for testing. The code for the additional
        test functions is listed under the methods with the same names.
      </para>
      <code>
        using System;
        using System.Data;
        using System.Data.Common;
        using System.IO;
        using LJCDataAccess;
        using LJCDataAccessConfig;

        // Test DataAccess.
        private static void TestDataAccess()
        {
          DbConnectionStringBuilder connectionBuilder;
          DataAccess dataAccess;
          string connectionString;
          string providerName;

          bool useInternal = false;
          if (useInternal)
          {
            // Use internal configuration.
            connectionBuilder = new DbConnectionStringBuilder()
            {
              { "Data Source", "DataServiceName" },
              { "Initial Catalog", "DatabaseName" },
              { "Integrated Security", "True" }
            };
            connectionString = connectionBuilder.ConnectionString;
            providerName = "System.Data.SqlClient";
          }
          else
          {
            // Or use external configuration.
            DataConfigs dataConfigs = new DataConfigs();
            dataConfigs.LJCLoadData();
            dataConfig = dataConfigs.LJCGetByName("ConfigName");
            connectionString = dataConfig.GetConnectionString();
            providerName = dataConfig.GetProviderName();
          }

          dataAccess = new DataAccess(connectionString, providerName);

          GetDataReader(dataAccess);
          GetDataTable(dataAccess);
          GetDataSet(dataAccess);
          GetProcedureDataTable(dataAccess);
          FillDataTable(dataAccess);
          GetSchemaOnly(dataAccess);
          ExecuteNonQuery(dataAccess);
          ExecuteScript(dataAccess);
          ExecuteScriptText(dataAccess);
        }

        IF NOT EXISTS(SELECT* FROM INFORMATION_SCHEMA.TABLES
        WHERE TABLE_NAME = N'PersonTest')
        BEGIN
        CREATE TABLE[dbo].[PersonTest]
        (
          [Id][int] IDENTITY(1,1) NOT NULL,
          [Name] [nvarchar] (60) NULL,
          [PrincipleFlag] [bit] NOT NULL,
          CONSTRAINT[PK_PersonTest]
          PRIMARY KEY CLUSTERED(
          [Id] ASC),
        )
        END
        GO
      </code>
    </example>
  </LJCDataAccess>
</items>