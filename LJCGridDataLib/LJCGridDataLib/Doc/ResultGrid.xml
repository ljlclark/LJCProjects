<?xml version="1.0" encoding="utf-8" ?>
<!-- ResultGrid.xml -->
<items>
  <!--GetDisplayColumns>
    <summary>
      Get the Display Columns from the DbColumns definition.
    </summary>
    <param name="dbColumns">The DbColumns.</param>
    <param name="columnNames">The display column names.</param>
    <returns></returns>
  </GetDisplayColumns-->
  <ResultGridC>
    <summary>
      Initalizes an object instance.
    </summary>
    <param name="grid">The Grid control.</param>
  </ResultGridC>

  <!-- Row Data Methods -->
  <LoadRows1>
    <summary>
      Loads the grid rows from the result Rows.
    </summary>
    <param name="dbResult">The DbResult object.</param>
    <example>
      <code>
        // See the DataManager setup code on the ResultGrid class page.

        // Loads the grid rows from the result Rows.
        private static void LoadRows1(DataManager dataManager)
        {
          var dbResult = dataManager.Load();
          if (dbResult.HasData())
          {
            LJCDataGridName.Clear();

            // Setup grid columns.
            var resultGridData = new ResultGridData(LJCDataGridName);
            resultGridData.SetDisplayColumns(dbResult.Columns);
            
            // Set Grid data.
            LJCDataGridName.LJCAddDisplayColumns(resultGridData.DisplayColumns);
            resultGridData.LoadRows(dbResult);
          }
        }
      </code>
    </example>
  </LoadRows1>
  <LoadRows2>
    <summary>
      Loads the grid rows from the DbRows object.
    </summary>
    <param name="dbRows">The DbRows object.</param>
    <example>
      <code>
        // See the DataManager setup code on the ResultGrid class page.

        // Loads the grid rows from the DbRows object.
        private static void LoadRows2(DataManager dataManager)
        {
          var dbResult = dataManager.Load();
          if (dbResult.HasData())
          {
            LJCDataGridName.Clear();

            // Setup grid columns.
            var resultGridData = new ResultGridData(LJCDataGridName);
            resultGridData.SetDisplayColumns(dbResult.Columns);
            
            // Set Grid data.
            LJCDataGridName.LJCAddDisplayColumns(resultGridData.DisplayColumns);
            resultGridData.LoadRows(dbResult.Rows);
          }
        }
      </code>
    </example>
  </LoadRows2>
  <RowAdd>
    <summary>
      Adds a grid row and updates it with the DbValues.
    </summary><param name="record">The DbValues object.</param>
  </RowAdd>
  <RowUpdate>
    <summary>
      Updates the current row with the DbValues.
    </summary>
    <param name="record">The DbValues object.</param>
  </RowUpdate>
  <RowSetValues>
    <summary>
      Updates a grid row with the DbValues.
    </summary>
    <param name="gridRow">The grid row.</param>
    <param name="record">The DbValues object.</param>
  </RowSetValues>
  <OnAddRow>
    <summary>
      Fires the AddRow event.
    </summary>
    <remarks>
      <para>Syntax: protected void OnAddRow()</para>
    </remarks>
  </OnAddRow>

  <!-- Configuration Methods -->
  <SetDisplayColumns1>
    <summary>
      Configure the Display Columns from the DbColumns definition.
    </summary>
    <param name="dbColumns">The DbColumns.</param>
    <param name="columnNames">The display column names.</param>
    <example>
      <code>
        // See the DataManager setup code on the ResultGrid class page.

        // Configure the Display Columns from the DbColumns definition.
        private static void SetDisplayColumns1(DataManager dataManager)
        {
          var dbResult = dataManager.Load();
          if (dbResult.HasData())
          {
            LJCDataGridName.Clear();

            // Setup grid columns.
            var resultGridData = new ResultGridData(LJCDataGridName);
            resultGridData.SetDisplayColumns(dbResult.Columns);
          }
        }
      </code>
    </example>
  </SetDisplayColumns1>
  <SetDisplayColumns2>
    <summary>
      Configure the Display Columns from the DbRequest object definition.
    </summary>
    <param name="dbRequest">The DbRequest object.</param>
    <param name="columnNames">The included columns.</param>
    <example>
      <code>
        // See the DataManager setup code on the ResultGrid class page.

        using LJCDBViewDAL;

        // Configure the Display Columns from the DbRequest object definition.
        private static void SetDisplayColumns2(DataManager dataManager)
        {
          // Get View Request.
          var dbRequest = ViewHelper.GetViewRequest("TableName", "ViewDataName");

          // Execute the dbRequest directly since it was retrieved.
          var dbResult = dataManager.ExecuteRequest(dbRequest);
          if (DbResult.HasData(dbResult))
          {
            LJCDataGridName.Clear();

            // Setup grid columns.
            var resultGridData = new ResultGridData(LJCDataGridName);
            resultGridData.SetDisplayColumns(dbRequest);
          }
        }
      </code>
    </example>
  </SetDisplayColumns2>
  <SetDisplayColumns3>
    <summary>
      Configure the Display Columns from the Data object properties.
    </summary>
    <param name="dataObject">The Data object.</param>
    <param name="propertyNames">The included columns.</param>
  </SetDisplayColumns3>
  <RemoveDisplayColumn>
    <summary>
      Removes a display column.
    </summary>
    <param name="columnName">The column name.</param>
  </RemoveDisplayColumn>
</items>
